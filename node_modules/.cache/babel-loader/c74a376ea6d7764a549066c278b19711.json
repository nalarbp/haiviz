{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Volumes/DATA/BUDI/APP_DEV/haiviz-v04/src/viz_SimulatedMap/chart_SimulatedMap_treemap.js\";\n\nimport React, { useEffect, useRef } from \"react\";\nimport { select } from \"d3-selection\";\nimport { arc, pie } from \"d3-shape\";\nimport { group } from \"d3-array\";\nimport { Empty, Button } from \"antd\";\nimport { treemap } from \"d3-hierarchy\";\nimport { getColorScaleByObject, getColumnNameByColorType } from \"../utils/utils\";\nimport \"./style_simulatedMap.css\";\nimport { ZoomInOutlined, ZoomOutOutlined, ClearOutlined } from \"@ant-design/icons\";\nimport { event as currentEvent } from \"d3\";\nimport { zoom } from \"d3-zoom\";\nimport { forceSimulation, forceManyBody, forceCollide } from \"d3-force\";\nimport usePrevious from \"../react_hooks/usePrevious-hook\";\n\nvar _ = require(\"lodash\");\n\nvar SimulatedMapChart = function SimulatedMapChart(props) {\n  //INTERNAL STATES/REFS\n  var zoomStateRef = useRef(null); //DRAWING CONSTRUCTOR\n\n  var simulatedmapSVGRef = useRef();\n  var simulatedmapContainerRef = useRef();\n  var observedWidth = props.width - 10;\n  var observedHeight = props.height - 90;\n  var container = select(simulatedmapContainerRef.current);\n  var svg = select(simulatedmapSVGRef.current);\n  var margin = {\n    top: 10,\n    right: 20,\n    bottom: 10,\n    left: 20\n  };\n  var container_w = observedWidth;\n  var container_h = observedHeight;\n  var simulatedmap_width = container_w - margin.left - margin.right;\n  var simulatedmap_height = container_h - margin.top - margin.bottom;\n\n  var isolateDataClone = _.cloneDeep(Array.from(props.data.values()));\n\n  var prevDimension = usePrevious(observedWidth + observedHeight);\n  var isInitialDraw = prevDimension && prevDimension < 0 ? true : false; //DRAWING DATA PREP/\n  //\n  //SETTINGS\n\n  var isUserStartResize = props.simulatedmapSettings.isUserStartResize_simap;\n  var nodeSize = props.simulatedmapSettings.nodeSize;\n  var textSize = props.simulatedmapSettings.textSize;\n  var isLocationLabelShown = props.simulatedmapSettings.isLocationLabelShown;\n  var layout = props.simulatedmapSettings.layout; //USEEFFECTS\n\n  useEffect(function () {\n    //console.log(isUserStartResize, props.isUserRedraw);\n    if (isUserStartResize) {\n      select(\"#simulatedmap_svgGroup\").remove();\n      select(\"#simulatedmap-buttons-container\").style(\"display\", \"none\");\n      select(\"#simulatedmap-no-drawing\").style(\"display\", \"block\");\n    } else {\n      if (isInitialDraw) {\n        draw();\n      } else {\n        if (props.isUserRedraw) {\n          draw();\n        }\n      }\n    } // if (\n    //   observedWidth &&\n    //   observedHeight &&\n    //   !isUserStartResize &&\n    //   !props.isUserRedraw\n    // ) {\n    //   draw(); //when initial draw\n    // } else if (\n    //   observedWidth &&\n    //   observedHeight &&\n    //   !isUserStartResize &&\n    //   props.isUserRedraw\n    // ) {\n    //   draw(); //when user click redraw\n    // } else {\n    //   //console.log(\"hide and remove\");\n    //   select(\"#simulatedmap_svgGroup\").remove();\n    //   select(\"#simulatedmap-buttons-container\").style(\"display\", \"none\");\n    //   select(\"#simulatedmap-no-drawing\").style(\"display\", \"block\");\n    // }\n\n  }, [isInitialDraw, isUserStartResize, props.isUserRedraw]); // === SELECTED DATA ===\n\n  useEffect(function () {\n    if (props.selectedData && props.selectedData.length > 0) {\n      updateBySelectedData();\n    } else if (props.selectedData && props.selectedData.length === 0) {\n      clearSelectedData();\n    }\n  }, [props.selectedData]); // === COLORSCALE ===\n\n  useEffect(function () {\n    if (props.colorScale.colorType) {\n      if (layout === \"scatter\") {\n        svg.selectAll(\".simulatedMap_circles\").attr(\"fill\", function (d) {\n          return getColorScaleByObject(d, props.colorScale);\n        });\n      } else if (layout === \"piechart\") {\n        draw();\n      }\n    }\n  }, [props.colorScale]); // === NODE SIZE ===\n\n  useEffect(function () {\n    if (nodeSize) {\n      if (layout === \"scatter\") {\n        if (props.selectedData && props.selectedData.length > 0) {\n          svg.selectAll(\".simulatedMap_circles\").attr(\"r\", nodeSize);\n          updateBySelectedData();\n        } else {\n          svg.selectAll(\".simulatedMap_circles\").attr(\"r\", nodeSize);\n        }\n      } else {\n        draw();\n      }\n    }\n  }, [nodeSize]); // === SHOW TEXT AND TEXT SIZE ===\n\n  useEffect(function () {\n    if (isLocationLabelShown && textSize) {\n      svg.selectAll(\".simap_tileLabel\").attr(\"display\", \"block\").attr(\"font-size\", textSize + \"pt\");\n    } else if (!isLocationLabelShown) {\n      svg.selectAll(\".simap_tileLabel\").attr(\"display\", \"none\");\n    }\n  }, [textSize, isLocationLabelShown]); // === LAYOUT ===\n\n  useEffect(function () {\n    if (layout) {\n      draw();\n    }\n  }, [layout]); //DRAWING\n\n  function draw() {\n    var svg = select(simulatedmapSVGRef.current); //clean previous drawing artifacts\n\n    select(\"#simulatedmap_svgGroup\").remove();\n    select(\"#simulatedmap-buttons-container\").style(\"display\", \"block\");\n    select(\"#simulatedmap-no-drawing\").style(\"display\", \"none\"); //set svg attributes\n\n    svg.attr(\"width\", simulatedmap_width + margin.left + margin.right).attr(\"height\", simulatedmap_height + margin.top + margin.bottom); //make group root of svg for transformation purpose\n\n    var svgGroup = svg.append(\"g\").attr(\"id\", \"simulatedmap_svgGroup\").attr(\"transform\", function (d) {\n      if (zoomStateRef.current) {\n        return \"translate(\" + zoomStateRef.current.x + \",\" + zoomStateRef.current.y + \")\" + \"scale(\" + zoomStateRef.current.k + \")\";\n      } else {\n        return \"translate(\" + margin.left + \",\" + margin.top + \")scale(1)\";\n      }\n    }); //add treemap\n\n    var treemapLayout = treemap().size([simulatedmap_width, simulatedmap_height]).padding(4);\n    var treeMap = treemapLayout(props.simulatedMap); //build Map table\n\n    var locCoordMap = new Map();\n    treeMap.leaves().forEach(function (d) {\n      var key = d.data[0];\n      var val = {\n        box_w: Math.abs(d.x0 - d.x1),\n        box_h: Math.abs(d.y0 - d.y1),\n        locX: d.x0 + Math.abs(d.x0 - d.x1) / 2,\n        locY: d.y0 + Math.abs(d.y0 - d.y1) / 2\n      };\n      locCoordMap.set(key, val);\n    }); //add coord to isolateData clone\n\n    isolateDataClone.forEach(function (d) {\n      var coord = locCoordMap.get(d.isolate_colLocation);\n      d[\"x\"] = coord.locX;\n      d[\"y\"] = coord.locY;\n    }); //draw tile of map\n\n    svgGroup.append(\"g\").selectAll(\"rect\").data(treeMap.leaves()).enter().append(\"rect\").attr(\"x\", function (d) {\n      return d.x0;\n    }).attr(\"y\", function (d) {\n      return d.y0;\n    }).attr(\"width\", function (d) {\n      return d.x1 - d.x0;\n    }).attr(\"height\", function (d) {\n      return d.y1 - d.y0;\n    }).style(\"stroke\", \"black\").style(\"fill\", \"white\").on(\"click\", function (d) {\n      var obj = isolateDataClone.filter(function (el) {\n        return el.isolate_colLocation === d.data[0];\n      });\n\n      if (obj) {\n        var selectedNames = obj.map(function (d) {\n          return d.uid;\n        });\n        props.setSelectedData(selectedNames);\n      }\n    }).append(\"title\").text(function (d) {\n      return \"\".concat(d.data[0], \": \").concat(d.data[1], \" isolates\");\n    }); //add tile labels\n\n    svgGroup.append(\"g\").selectAll(\".simap_tileLabel\").data(treeMap.leaves()).enter().append(\"text\").attr(\"class\", \"simap_tileLabel\").attr(\"x\", function (d) {\n      return d.x0 + 2;\n    }).attr(\"y\", function (d) {\n      return d.y0 + 15;\n    }).text(function (d) {\n      return d.data[0];\n    }).attr(\"font-size\", textSize + \"pt\").attr(\"display\", function (d) {\n      return isLocationLabelShown ? \"block\" : \"none\";\n    }).attr(\"fill\", \"black\"); //LAYOUT: SCATTER\n\n    if (layout === \"scatter\") {\n      //add simulation to avoid overlap\n      forceSimulation(isolateDataClone) // create simulation for circles\n      .force(\"gravity\", forceManyBody().strength(-0.1)).force(\"collide\", forceCollide().radius(nodeSize).strength(0.3)).tick(50).stop(); //draw circles of isolates\n\n      svgGroup.append(\"g\").selectAll(\".simulatedMap_circles\").data(isolateDataClone).enter().append(\"circle\").attr(\"class\", \"simulatedMap_circles\").attr(\"cx\", function (d) {\n        return d.x;\n      }).attr(\"cy\", function (d) {\n        return d.y;\n      }).attr(\"fill\", function (d) {\n        return getColorScaleByObject(d, props.colorScale);\n      }).attr(\"r\", nodeSize).attr(\"stroke\", \"black\").attr(\"stroke-width\", \"1px\").style(\"cursor\", \"pointer\").style(\"opacity\", 0.8).on(\"click\", function (d) {\n        props.setSelectedData([d.uid]);\n      }).append(\"title\").text(function (d) {\n        return \"isolate: \".concat(d.isolate_name);\n      });\n    } //LAYOUT: PIE CHART\n    else {\n        var pieGenerator = pie().sort(null).value(function (d) {\n          return d[1].length;\n        });\n        var isolateDataGroupByLoc = group(isolateDataClone, function (d) {\n          return d.isolate_colLocation;\n        }); //make data input for pie chart\n\n        var locPieChartData = Array.from(locCoordMap.entries()); //locPieChartData = [0:[0:loc_name, 1:{locX: loc, locY: loc, data: dataByLocGroup}]]\n\n        locPieChartData.forEach(function (loc) {\n          var data = isolateDataGroupByLoc.get(loc[0]);\n\n          if (Array.isArray(data)) {\n            data = Array.from(group(data, function (d) {\n              return getColumnNameByColorType(d, props.colorScale.colorType);\n            }).entries());\n          }\n\n          loc[1][\"data\"] = data; //console.log(loc);\n        }); // 1. list of locations, with each location has data\n        // 2. this data is feed to pieGenetor\n        // make nodes group and draw nodes on it\n\n        var nodesGroup = svgGroup.append(\"g\").attr(\"id\", \"simap_nodesGroup\"); //draw node circle\n\n        var pieGroup = nodesGroup.selectAll(\".simap_pieGroup\").data(locPieChartData).enter().append(\"g\").attr(\"class\", \"simap_pieGroup\").attr(\"transform\", function (d) {\n          return \"translate(\" + d[1].locX + \",\" + d[1].locY + \")\";\n        });\n        var pieArcGroup = pieGroup.selectAll(\".simap_pieArcGroup\").data(function (d) {\n          var res = d[1].data ? pieGenerator(d[1].data) : [null];\n          return res;\n        }).enter().append(\"g\").attr(\"class\", \"simap_pieArcGroup\");\n        pieArcGroup.append(\"path\").attr(\"d\", function (d) {\n          if (d) {\n            var arcGenerator = arc().outerRadius(nodeSize).innerRadius(0);\n            return arcGenerator(d);\n          } else {\n            return \"none\";\n          }\n        }).style(\"fill\", function (d) {\n          if (d) {\n            var obj = d.data[1][0] ? d.data[1][0] : null;\n            var col = obj ? getColorScaleByObject(obj, props.colorScale) : \"black\";\n            return col;\n          } else {\n            return \"black\";\n          }\n        }).style(\"opacity\", 1).on(\"click\", function (d) {\n          var clickedData = d.data[1];\n          var clickedselectedData = [];\n\n          if (clickedData.length > 0) {\n            clickedData.forEach(function (d) {\n              clickedselectedData.push(d.uid);\n            });\n          }\n\n          props.setSelectedData(clickedselectedData);\n        }).append(\"title\").text(function (d) {\n          if (d) {\n            var percentage = ((d.endAngle - d.startAngle) / (2 * Math.PI) * 100).toFixed(2);\n            return d.data[0] + \" \" + percentage + \"%\";\n          } else {\n            return \"none\";\n          }\n        });\n      }\n\n    if (props.selectedData && props.selectedData.length > 0) {\n      updateBySelectedData();\n    } //zoom functionality\n\n\n    var zoomHandler = zoom().scaleExtent([0.1, 6]).on(\"zoom\", function () {\n      zoomStateRef.current = currentEvent.transform;\n      select(\"#simulatedmap_svgGroup\").attr(\"transform\", currentEvent.transform);\n    }).filter(function () {\n      return !currentEvent.button && currentEvent.type !== \"wheel\";\n    }); //Zoom in button\n\n    container.select(\"#simulatedmap-zoomIn\").on(\"click\", function () {\n      zoomHandler.scaleBy(svg.transition().duration(500), 1.5);\n    }); //Zoom out button\n\n    container.select(\"#simulatedmap-zoomOut\").on(\"click\", function () {\n      zoomHandler.scaleBy(svg.transition().duration(500), 0.5);\n    });\n    svg.call(zoomHandler);\n  }\n\n  function updateBySelectedData() {\n    if (layout === \"scatter\") {\n      svg.selectAll(\".simulatedMap_circles\").attr(\"r\", function (d) {\n        if (props.selectedData.indexOf(d.uid) !== -1) {\n          return nodeSize * 1.5;\n        } else {\n          return nodeSize;\n        }\n      }).style(\"opacity\", function (d) {\n        if (props.selectedData.indexOf(d.uid) !== -1) {\n          return 0.8;\n        } else {\n          return 0.2;\n        }\n      });\n    } else {\n      svg.selectAll(\".simap_pieArcGroup\").style(\"opacity\", function (d) {\n        //get all isolates from the slice of the pie chart\n        var isolatesInSlice = d.data[1].map(function (d) {\n          return d.isolate_name;\n        });\n        var diff = isolatesInSlice.filter(function (n) {\n          return props.selectedData.indexOf(n) !== -1;\n        }); //if it contains isolate_name that in selected data list, show it\n\n        if (diff && diff.length > 0) {\n          return 0.8;\n        } else {\n          return 0.2;\n        }\n      });\n    }\n  }\n\n  function clearSelectedData() {\n    if (layout === \"scatter\") {\n      svg.selectAll(\".simulatedMap_circles\").attr(\"r\", function (d) {\n        return nodeSize;\n      }).style(\"opacity\", function (d) {\n        return 0.8;\n      });\n    } else {\n      svg.selectAll(\".simap_pieArcGroup\").style(\"opacity\", 1);\n    }\n  } //HANDLERS\n\n\n  var clearSelectedDataHandler = function clearSelectedDataHandler() {\n    props.setSelectedData([]);\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 460,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      height: \"100%\"\n    },\n    id: \"simulatedmapContainer\",\n    ref: simulatedmapContainerRef,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 461,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"simulatedmap-no-drawing\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 466,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Empty, {\n    description: \"No chart: please click redraw button\",\n    image: Empty.PRESENTED_IMAGE_SIMPLE,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 467,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"simulatedmap-buttons-container\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 472,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"simulatedmap-zoom-buttons\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 473,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    title: \"Zoom in\",\n    shape: \"circle\",\n    id: \"simulatedmap-zoomIn\",\n    size: \"medium\",\n    icon: /*#__PURE__*/React.createElement(ZoomInOutlined, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 479,\n        columnNumber: 21\n      }\n    }),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 474,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    title: \"Zoom out\",\n    shape: \"circle\",\n    id: \"simulatedmap-zoomOut\",\n    size: \"medium\",\n    icon: /*#__PURE__*/React.createElement(ZoomOutOutlined, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 486,\n        columnNumber: 21\n      }\n    }),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 481,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    title: \"Clear selection\",\n    shape: \"circle\",\n    id: \"simulatedmap-clearSelection\",\n    size: \"medium\",\n    icon: /*#__PURE__*/React.createElement(ClearOutlined, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 493,\n        columnNumber: 21\n      }\n    }),\n    onClick: clearSelectedDataHandler,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 488,\n      columnNumber: 13\n    }\n  }))), /*#__PURE__*/React.createElement(\"svg\", {\n    id: \"simulatedmap-svg\",\n    ref: simulatedmapSVGRef,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 498,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default SimulatedMapChart;","map":{"version":3,"sources":["/Volumes/DATA/BUDI/APP_DEV/haiviz-v04/src/viz_SimulatedMap/chart_SimulatedMap_treemap.js"],"names":["React","useEffect","useRef","select","arc","pie","group","Empty","Button","treemap","getColorScaleByObject","getColumnNameByColorType","ZoomInOutlined","ZoomOutOutlined","ClearOutlined","event","currentEvent","zoom","forceSimulation","forceManyBody","forceCollide","usePrevious","_","require","SimulatedMapChart","props","zoomStateRef","simulatedmapSVGRef","simulatedmapContainerRef","observedWidth","width","observedHeight","height","container","current","svg","margin","top","right","bottom","left","container_w","container_h","simulatedmap_width","simulatedmap_height","isolateDataClone","cloneDeep","Array","from","data","values","prevDimension","isInitialDraw","isUserStartResize","simulatedmapSettings","isUserStartResize_simap","nodeSize","textSize","isLocationLabelShown","layout","remove","style","draw","isUserRedraw","selectedData","length","updateBySelectedData","clearSelectedData","colorScale","colorType","selectAll","attr","d","svgGroup","append","x","y","k","treemapLayout","size","padding","treeMap","simulatedMap","locCoordMap","Map","leaves","forEach","key","val","box_w","Math","abs","x0","x1","box_h","y0","y1","locX","locY","set","coord","get","isolate_colLocation","enter","on","obj","filter","el","selectedNames","map","uid","setSelectedData","text","force","strength","radius","tick","stop","isolate_name","pieGenerator","sort","value","isolateDataGroupByLoc","locPieChartData","entries","loc","isArray","nodesGroup","pieGroup","pieArcGroup","res","arcGenerator","outerRadius","innerRadius","col","clickedData","clickedselectedData","push","percentage","endAngle","startAngle","PI","toFixed","zoomHandler","scaleExtent","transform","button","type","scaleBy","transition","duration","call","indexOf","isolatesInSlice","diff","n","clearSelectedDataHandler","PRESENTED_IMAGE_SIMPLE"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport { select } from \"d3-selection\";\nimport { arc, pie } from \"d3-shape\";\nimport { group } from \"d3-array\";\nimport { Empty, Button } from \"antd\";\nimport { treemap } from \"d3-hierarchy\";\nimport {\n  getColorScaleByObject,\n  getColumnNameByColorType,\n} from \"../utils/utils\";\nimport \"./style_simulatedMap.css\";\nimport {\n  ZoomInOutlined,\n  ZoomOutOutlined,\n  ClearOutlined,\n} from \"@ant-design/icons\";\nimport { event as currentEvent } from \"d3\";\nimport { zoom } from \"d3-zoom\";\nimport { forceSimulation, forceManyBody, forceCollide } from \"d3-force\";\nimport usePrevious from \"../react_hooks/usePrevious-hook\";\n\nconst _ = require(\"lodash\");\n\nconst SimulatedMapChart = (props) => {\n  //INTERNAL STATES/REFS\n  const zoomStateRef = useRef(null);\n\n  //DRAWING CONSTRUCTOR\n  const simulatedmapSVGRef = useRef();\n  const simulatedmapContainerRef = useRef();\n  const observedWidth = props.width - 10;\n  const observedHeight = props.height - 90;\n  const container = select(simulatedmapContainerRef.current);\n  const svg = select(simulatedmapSVGRef.current);\n  const margin = { top: 10, right: 20, bottom: 10, left: 20 };\n  const container_w = observedWidth;\n  const container_h = observedHeight;\n  const simulatedmap_width = container_w - margin.left - margin.right;\n  const simulatedmap_height = container_h - margin.top - margin.bottom;\n  const isolateDataClone = _.cloneDeep(Array.from(props.data.values()));\n  const prevDimension = usePrevious(observedWidth + observedHeight);\n  const isInitialDraw = prevDimension && prevDimension < 0 ? true : false;\n\n  //DRAWING DATA PREP/\n  //\n  //SETTINGS\n  const isUserStartResize = props.simulatedmapSettings.isUserStartResize_simap;\n  const nodeSize = props.simulatedmapSettings.nodeSize;\n  const textSize = props.simulatedmapSettings.textSize;\n  const isLocationLabelShown = props.simulatedmapSettings.isLocationLabelShown;\n  const layout = props.simulatedmapSettings.layout;\n\n  //USEEFFECTS\n  useEffect(() => {\n    //console.log(isUserStartResize, props.isUserRedraw);\n    if (isUserStartResize) {\n      select(\"#simulatedmap_svgGroup\").remove();\n      select(\"#simulatedmap-buttons-container\").style(\"display\", \"none\");\n      select(\"#simulatedmap-no-drawing\").style(\"display\", \"block\");\n    } else {\n      if (isInitialDraw) {\n        draw();\n      } else {\n        if (props.isUserRedraw) {\n          draw();\n        }\n      }\n    }\n    // if (\n    //   observedWidth &&\n    //   observedHeight &&\n    //   !isUserStartResize &&\n    //   !props.isUserRedraw\n    // ) {\n    //   draw(); //when initial draw\n    // } else if (\n    //   observedWidth &&\n    //   observedHeight &&\n    //   !isUserStartResize &&\n    //   props.isUserRedraw\n    // ) {\n    //   draw(); //when user click redraw\n    // } else {\n    //   //console.log(\"hide and remove\");\n    //   select(\"#simulatedmap_svgGroup\").remove();\n    //   select(\"#simulatedmap-buttons-container\").style(\"display\", \"none\");\n    //   select(\"#simulatedmap-no-drawing\").style(\"display\", \"block\");\n    // }\n  }, [isInitialDraw, isUserStartResize, props.isUserRedraw]);\n\n  // === SELECTED DATA ===\n  useEffect(() => {\n    if (props.selectedData && props.selectedData.length > 0) {\n      updateBySelectedData();\n    } else if (props.selectedData && props.selectedData.length === 0) {\n      clearSelectedData();\n    }\n  }, [props.selectedData]);\n\n  // === COLORSCALE ===\n  useEffect(() => {\n    if (props.colorScale.colorType) {\n      if (layout === \"scatter\") {\n        svg\n          .selectAll(\".simulatedMap_circles\")\n          .attr(\"fill\", (d) => getColorScaleByObject(d, props.colorScale));\n      } else if (layout === \"piechart\") {\n        draw();\n      }\n    }\n  }, [props.colorScale]);\n\n  // === NODE SIZE ===\n  useEffect(() => {\n    if (nodeSize) {\n      if (layout === \"scatter\") {\n        if (props.selectedData && props.selectedData.length > 0) {\n          svg.selectAll(\".simulatedMap_circles\").attr(\"r\", nodeSize);\n          updateBySelectedData();\n        } else {\n          svg.selectAll(\".simulatedMap_circles\").attr(\"r\", nodeSize);\n        }\n      } else {\n        draw();\n      }\n    }\n  }, [nodeSize]);\n  // === SHOW TEXT AND TEXT SIZE ===\n  useEffect(() => {\n    if (isLocationLabelShown && textSize) {\n      svg\n        .selectAll(\".simap_tileLabel\")\n        .attr(\"display\", \"block\")\n        .attr(\"font-size\", textSize + \"pt\");\n    } else if (!isLocationLabelShown) {\n      svg.selectAll(\".simap_tileLabel\").attr(\"display\", \"none\");\n    }\n  }, [textSize, isLocationLabelShown]);\n  // === LAYOUT ===\n  useEffect(() => {\n    if (layout) {\n      draw();\n    }\n  }, [layout]);\n\n  //DRAWING\n  function draw() {\n    const svg = select(simulatedmapSVGRef.current);\n    //clean previous drawing artifacts\n    select(\"#simulatedmap_svgGroup\").remove();\n    select(\"#simulatedmap-buttons-container\").style(\"display\", \"block\");\n    select(\"#simulatedmap-no-drawing\").style(\"display\", \"none\");\n\n    //set svg attributes\n    svg\n      .attr(\"width\", simulatedmap_width + margin.left + margin.right)\n      .attr(\"height\", simulatedmap_height + margin.top + margin.bottom);\n\n    //make group root of svg for transformation purpose\n    let svgGroup = svg\n      .append(\"g\")\n      .attr(\"id\", \"simulatedmap_svgGroup\")\n      .attr(\"transform\", function(d) {\n        if (zoomStateRef.current) {\n          return (\n            \"translate(\" +\n            zoomStateRef.current.x +\n            \",\" +\n            zoomStateRef.current.y +\n            \")\" +\n            \"scale(\" +\n            zoomStateRef.current.k +\n            \")\"\n          );\n        } else {\n          return \"translate(\" + margin.left + \",\" + margin.top + \")scale(1)\";\n        }\n      });\n\n    //add treemap\n    const treemapLayout = treemap()\n      .size([simulatedmap_width, simulatedmap_height])\n      .padding(4);\n    const treeMap = treemapLayout(props.simulatedMap);\n    //build Map table\n    const locCoordMap = new Map();\n    treeMap.leaves().forEach(function(d) {\n      let key = d.data[0];\n      let val = {\n        box_w: Math.abs(d.x0 - d.x1),\n        box_h: Math.abs(d.y0 - d.y1),\n        locX: d.x0 + Math.abs(d.x0 - d.x1) / 2,\n        locY: d.y0 + Math.abs(d.y0 - d.y1) / 2,\n      };\n      locCoordMap.set(key, val);\n    });\n    //add coord to isolateData clone\n    isolateDataClone.forEach((d) => {\n      let coord = locCoordMap.get(d.isolate_colLocation);\n      d[\"x\"] = coord.locX;\n      d[\"y\"] = coord.locY;\n    });\n\n    //draw tile of map\n    svgGroup\n      .append(\"g\")\n      .selectAll(\"rect\")\n      .data(treeMap.leaves())\n      .enter()\n      .append(\"rect\")\n      .attr(\"x\", (d) => d.x0)\n      .attr(\"y\", (d) => d.y0)\n      .attr(\"width\", (d) => d.x1 - d.x0)\n      .attr(\"height\", (d) => d.y1 - d.y0)\n      .style(\"stroke\", \"black\")\n      .style(\"fill\", \"white\")\n      .on(\"click\", (d) => {\n        let obj = isolateDataClone.filter(\n          (el) => el.isolate_colLocation === d.data[0]\n        );\n        if (obj) {\n          let selectedNames = obj.map((d) => d.uid);\n          props.setSelectedData(selectedNames);\n        }\n      })\n      .append(\"title\")\n      .text((d) => `${d.data[0]}: ${d.data[1]} isolates`);\n\n    //add tile labels\n    svgGroup\n      .append(\"g\")\n      .selectAll(\".simap_tileLabel\")\n      .data(treeMap.leaves())\n      .enter()\n      .append(\"text\")\n      .attr(\"class\", \"simap_tileLabel\")\n      .attr(\"x\", (d) => d.x0 + 2)\n      .attr(\"y\", (d) => d.y0 + 15)\n      .text((d) => d.data[0])\n      .attr(\"font-size\", textSize + \"pt\")\n      .attr(\"display\", (d) => (isLocationLabelShown ? \"block\" : \"none\"))\n      .attr(\"fill\", \"black\");\n\n    //LAYOUT: SCATTER\n    if (layout === \"scatter\") {\n      //add simulation to avoid overlap\n      forceSimulation(isolateDataClone) // create simulation for circles\n        .force(\"gravity\", forceManyBody().strength(-0.1))\n        .force(\n          \"collide\",\n          forceCollide()\n            .radius(nodeSize)\n            .strength(0.3)\n        )\n        .tick(50)\n        .stop();\n\n      //draw circles of isolates\n      svgGroup\n        .append(\"g\")\n        .selectAll(\".simulatedMap_circles\")\n        .data(isolateDataClone)\n        .enter()\n        .append(\"circle\")\n        .attr(\"class\", \"simulatedMap_circles\")\n        .attr(\"cx\", (d) => d.x)\n        .attr(\"cy\", (d) => d.y)\n        .attr(\"fill\", (d) => getColorScaleByObject(d, props.colorScale))\n        .attr(\"r\", nodeSize)\n        .attr(\"stroke\", \"black\")\n        .attr(\"stroke-width\", \"1px\")\n        .style(\"cursor\", \"pointer\")\n        .style(\"opacity\", 0.8)\n        .on(\"click\", (d) => {\n          props.setSelectedData([d.uid]);\n        })\n        .append(\"title\")\n        .text((d) => `isolate: ${d.isolate_name}`);\n    }\n    //LAYOUT: PIE CHART\n    else {\n      const pieGenerator = pie()\n        .sort(null)\n        .value((d) => d[1].length);\n      const isolateDataGroupByLoc = group(\n        isolateDataClone,\n        (d) => d.isolate_colLocation\n      );\n      //make data input for pie chart\n      const locPieChartData = Array.from(locCoordMap.entries());\n      //locPieChartData = [0:[0:loc_name, 1:{locX: loc, locY: loc, data: dataByLocGroup}]]\n      locPieChartData.forEach((loc) => {\n        let data = isolateDataGroupByLoc.get(loc[0]);\n        if (Array.isArray(data)) {\n          data = Array.from(\n            group(data, (d) =>\n              getColumnNameByColorType(d, props.colorScale.colorType)\n            ).entries()\n          );\n        }\n        loc[1][\"data\"] = data;\n        //console.log(loc);\n      });\n\n      // 1. list of locations, with each location has data\n      // 2. this data is feed to pieGenetor\n      // make nodes group and draw nodes on it\n      let nodesGroup = svgGroup.append(\"g\").attr(\"id\", \"simap_nodesGroup\");\n      //draw node circle\n      let pieGroup = nodesGroup\n        .selectAll(\".simap_pieGroup\")\n        .data(locPieChartData)\n        .enter()\n        .append(\"g\")\n        .attr(\"class\", \"simap_pieGroup\")\n        .attr(\n          \"transform\",\n          (d) => \"translate(\" + d[1].locX + \",\" + d[1].locY + \")\"\n        );\n      let pieArcGroup = pieGroup\n        .selectAll(\".simap_pieArcGroup\")\n        .data((d) => {\n          let res = d[1].data ? pieGenerator(d[1].data) : [null];\n          return res;\n        })\n        .enter()\n        .append(\"g\")\n        .attr(\"class\", \"simap_pieArcGroup\");\n\n      pieArcGroup\n        .append(\"path\")\n        .attr(\"d\", (d) => {\n          if (d) {\n            let arcGenerator = arc()\n              .outerRadius(nodeSize)\n              .innerRadius(0);\n            return arcGenerator(d);\n          } else {\n            return \"none\";\n          }\n        })\n        .style(\"fill\", (d) => {\n          if (d) {\n            let obj = d.data[1][0] ? d.data[1][0] : null;\n            let col = obj\n              ? getColorScaleByObject(obj, props.colorScale)\n              : \"black\";\n            return col;\n          } else {\n            return \"black\";\n          }\n        })\n        .style(\"opacity\", 1)\n        .on(\"click\", (d) => {\n          let clickedData = d.data[1];\n          let clickedselectedData = [];\n          if (clickedData.length > 0) {\n            clickedData.forEach((d) => {\n              clickedselectedData.push(d.uid);\n            });\n          }\n          props.setSelectedData(clickedselectedData);\n        })\n        .append(\"title\")\n        .text((d) => {\n          if (d) {\n            let percentage = (\n              ((d.endAngle - d.startAngle) / (2 * Math.PI)) *\n              100\n            ).toFixed(2);\n            return d.data[0] + \" \" + percentage + \"%\";\n          } else {\n            return \"none\";\n          }\n        });\n    }\n\n    if (props.selectedData && props.selectedData.length > 0) {\n      updateBySelectedData();\n    }\n\n    //zoom functionality\n    const zoomHandler = zoom()\n      .scaleExtent([0.1, 6])\n      .on(\"zoom\", () => {\n        zoomStateRef.current = currentEvent.transform;\n        select(\"#simulatedmap_svgGroup\").attr(\n          \"transform\",\n          currentEvent.transform\n        );\n      })\n      .filter(function() {\n        return !currentEvent.button && currentEvent.type !== \"wheel\";\n      });\n\n    //Zoom in button\n    container.select(\"#simulatedmap-zoomIn\").on(\"click\", () => {\n      zoomHandler.scaleBy(svg.transition().duration(500), 1.5);\n    });\n    //Zoom out button\n    container.select(\"#simulatedmap-zoomOut\").on(\"click\", () => {\n      zoomHandler.scaleBy(svg.transition().duration(500), 0.5);\n    });\n\n    svg.call(zoomHandler);\n  }\n\n  function updateBySelectedData() {\n    if (layout === \"scatter\") {\n      svg\n        .selectAll(\".simulatedMap_circles\")\n        .attr(\"r\", (d) => {\n          if (props.selectedData.indexOf(d.uid) !== -1) {\n            return nodeSize * 1.5;\n          } else {\n            return nodeSize;\n          }\n        })\n        .style(\"opacity\", (d) => {\n          if (props.selectedData.indexOf(d.uid) !== -1) {\n            return 0.8;\n          } else {\n            return 0.2;\n          }\n        });\n    } else {\n      svg.selectAll(\".simap_pieArcGroup\").style(\"opacity\", (d) => {\n        //get all isolates from the slice of the pie chart\n        let isolatesInSlice = d.data[1].map((d) => d.isolate_name);\n        let diff = isolatesInSlice.filter(function(n) {\n          return props.selectedData.indexOf(n) !== -1;\n        });\n        //if it contains isolate_name that in selected data list, show it\n        if (diff && diff.length > 0) {\n          return 0.8;\n        } else {\n          return 0.2;\n        }\n      });\n    }\n  }\n\n  function clearSelectedData() {\n    if (layout === \"scatter\") {\n      svg\n        .selectAll(\".simulatedMap_circles\")\n        .attr(\"r\", (d) => nodeSize)\n        .style(\"opacity\", (d) => 0.8);\n    } else {\n      svg.selectAll(\".simap_pieArcGroup\").style(\"opacity\", 1);\n    }\n  }\n\n  //HANDLERS\n  const clearSelectedDataHandler = () => {\n    props.setSelectedData([]);\n  };\n\n  return (\n    <React.Fragment>\n      <div\n        style={{ height: \"100%\" }}\n        id=\"simulatedmapContainer\"\n        ref={simulatedmapContainerRef}\n      >\n        <div id=\"simulatedmap-no-drawing\">\n          <Empty\n            description={\"No chart: please click redraw button\"}\n            image={Empty.PRESENTED_IMAGE_SIMPLE}\n          />\n        </div>\n        <div id=\"simulatedmap-buttons-container\">\n          <div id=\"simulatedmap-zoom-buttons\">\n            <Button\n              title={\"Zoom in\"}\n              shape={\"circle\"}\n              id={\"simulatedmap-zoomIn\"}\n              size={\"medium\"}\n              icon={<ZoomInOutlined />}\n            ></Button>\n            <Button\n              title={\"Zoom out\"}\n              shape={\"circle\"}\n              id={\"simulatedmap-zoomOut\"}\n              size={\"medium\"}\n              icon={<ZoomOutOutlined />}\n            ></Button>\n            <Button\n              title={\"Clear selection\"}\n              shape={\"circle\"}\n              id={\"simulatedmap-clearSelection\"}\n              size={\"medium\"}\n              icon={<ClearOutlined />}\n              onClick={clearSelectedDataHandler}\n            ></Button>\n          </div>\n        </div>\n        <svg id=\"simulatedmap-svg\" ref={simulatedmapSVGRef}></svg>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default SimulatedMapChart;\n"]},"metadata":{},"sourceType":"module"}