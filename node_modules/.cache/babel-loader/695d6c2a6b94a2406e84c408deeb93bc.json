{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Volumes/DATA/BUDI/APP_DEV/haiviz-v04/src/viz_TemporalBar/chart_TemporalBar_histogram.js\";\n\n/* ============================================================================\nPROBLEM: D3 brush currentEvent state is interfered by ract grid layout postion\nSo we can only use gid 0,0 and make it non resizeable\n============================================================================ */\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { extent } from \"d3-array\";\nimport { timeFormat } from \"d3-time-format\";\nimport { select } from \"d3-selection\";\nimport { Empty } from \"antd\";\nimport { brushX } from \"d3-brush\";\nimport { scaleLinear, scaleTime } from \"d3-scale\";\nimport { axisBottom, axisLeft } from \"d3-axis\";\nimport { event as currentEvent } from \"d3\";\nimport { filterUnique } from \"../utils/utils\";\nimport \"./style_TemporalBar.css\";\n\nvar moment = require(\"moment\");\n\nvar TemporalHistogram = function TemporalHistogram(props) {\n  //states\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      selectionDate = _useState2[0],\n      setselectionDate = _useState2[1];\n\n  var temporalbarSVGRef = useRef();\n  var temporalbarContainerRef = useRef();\n  var animPlayer = useRef([]);\n  var animIsPlaying = useRef(false);\n  var observedWidth = props.width - 10;\n  var observedHeight = props.height - 100; //ofsett by card head\n\n  var svg = select(temporalbarSVGRef.current);\n  var margin = {\n    top: 10,\n    right: 20,\n    bottom: 10,\n    left: 30\n  };\n  var temporalbar_w = observedWidth - margin.left - margin.right;\n  var temporalbar_h = observedHeight - margin.top - margin.bottom - 10; //SETTINGS\n\n  var isUserStartResize = props.temporalbarSettings.isUserStartResize;\n  var scaleMode = props.temporalbarSettings.scaleMode; //USEEFFECTS\n\n  useEffect(function () {\n    //console.log(isUserStartResize, props.isUserRedraw);\n    if (!isUserStartResize && !props.isUserRedraw) {\n      draw(); //when initial draw\n    } else if (!isUserStartResize && props.isUserRedraw) {\n      draw(); //when user click redraw\n    } else {\n      //console.log(\"hide and remove\");\n      select(\"#temporalbar-svgGroup\").remove();\n      select(\"#temporalbar-buttons-container\").style(\"display\", \"none\");\n      select(\"#temporalbar-no-drawing\").style(\"display\", \"block\");\n    }\n  }, [observedWidth, observedHeight, props.chartData, isUserStartResize, props.isUserRedraw]);\n  useEffect(function () {\n    if (props.selectedData && props.selectedData.length === 0) {\n      clearSelectedData();\n    }\n  }, [props.selectedData]);\n  useEffect(function () {\n    if (selectionDate) {\n      var cont = select(temporalbarContainerRef.current);\n      cont.select(\"#selection-date-text\").text(function () {\n        return \" \" + moment(selectionDate[0]).format(\"D MMMM YYYY\") + \" - \" + moment(selectionDate[1]).format(\"D MMMM YYYY\");\n      });\n    }\n  }, [selectionDate]); //draw function: heavy processes like drawing each data points are here\n\n  function draw() {\n    var svg = select(temporalbarSVGRef.current);\n    var dateArr = Array.from(props.isolateData.values()).map(function (d) {\n      return d.isolate_colDate;\n    });\n    var dateRange = extent(dateArr);\n    var chartDataArr = Array.from(props.chartData.entries());\n    var frequencyRange = extent(chartDataArr.map(function (d) {\n      return d[1].length;\n    })); //clean previous drawing artifacts\n\n    select(\"#temporalbar-svgGroup\").remove();\n    select(\"#temporalbar-buttons-container\").style(\"display\", \"block\");\n    select(\"#temporalbar-no-drawing\").style(\"display\", \"none\"); //set svg attributes\n\n    svg.attr(\"width\", temporalbar_w + margin.left + margin.right).attr(\"height\", temporalbar_h + margin.top + margin.bottom); //scale\n\n    var scale_x = scaleTime().domain([moment(dateRange[0]).subtract(2, \"weeks\"), moment(dateRange[1]).add(2, \"weeks\")]).range([0, temporalbar_w]); //.nice(); -> make to inconsistent scale offset, without it we have consistent offset that is 1 week before and after\n\n    var scale_y = scaleLinear().domain([0, frequencyRange[1]]).range([temporalbar_h, 0]); //axis\n\n    var axis_x = axisBottom().scale(scale_x).tickSize([5]).tickFormat(timeFormat(\"%Y-%m\"));\n    var axis_y = axisLeft().scale(scale_y).tickSize([5]); //animation\n\n    var animDateIntervalMilliseconds = dateArr.map(function (d) {\n      return d.getTime();\n    }).filter(filterUnique);\n    var animDateInterval = animDateIntervalMilliseconds.map(function (d) {\n      return new Date(d);\n    }).sort(function (a, b) {\n      return a - b;\n    }); //console.log(animDateInterval);\n\n    var pointInInterval = 0; //brush area\n\n    var brush = brushX() // brush rectangle area for mini chart\n    .extent([[0, 0], [temporalbar_w, temporalbar_h]]) // brush region from top left corner 0, 0 to 900, 40\n    .on(\"start\", brushStart).on(\"brush\", brushed).on(\"end\", brushEnd); //make group root of svg for transformation purpose\n\n    var svgGroup = svg.append(\"g\").attr(\"id\", \"temporalbar-svgGroup\").attr(\"transform\", \"translate(\" + margin.left + \",\" + 5 + \")\"); //axis group\n\n    svgGroup.append(\"g\").attr(\"class\", \"temporal-axis axis--x\").attr(\"transform\", \"translate(\" + 0 + \",\" + temporalbar_h + \")\").call(axis_x);\n    svgGroup.append(\"g\").attr(\"class\", \"temporal-axis axis--y\").call(axis_y); //make bar chart group and draw chart on it\n\n    var barGroup = svgGroup.append(\"g\").attr(\"id\", \"barchartGroup\");\n    var bars = barGroup.selectAll(\".temporal-bar-rectangle\").data(chartDataArr).enter().append(\"rect\").attr(\"class\", \"temporal-bar-rectangle\").attr(\"x\", function (d) {\n      var day = moment(d[0]);\n      var day_begin = day.startOf(\"day\").toString();\n      return scale_x(new Date(day_begin));\n    }).attr(\"y\", function (d) {\n      return scale_y(d[1].length);\n    }).attr(\"height\", function (d) {\n      return temporalbar_h - scale_y(d[1].length);\n    }).attr(\"stroke\", \"black\").style(\"fill\", \"none\");\n\n    if (scaleMode === \"daily\") {\n      bars.attr(\"width\", function (d) {\n        var day = moment(d[0]);\n        var day_begin = day.startOf(\"day\").toString();\n        var day_end = day.endOf(\"day\").toString();\n        return scale_x(new Date(day_end)) - scale_x(new Date(day_begin));\n      });\n    } else {\n      bars.attr(\"width\", function (d) {\n        var day = moment(d[0]);\n        var day_begin = day.startOf(\"isoWeek\").toString();\n        var day_end = day.endOf(\"isoWeek\").toString();\n        return scale_x(new Date(day_end)) - scale_x(new Date(day_begin));\n      });\n    } //make brush group\n\n\n    var brushAreaGroup = svgGroup.append(\"g\").attr(\"class\", \"temporal-brushArea\").call(brush); // function brushHandle(g, selection) {\n    //   g.selectAll(\".handle--custom\")\n    //     .data([{ type: \"w\" }, { type: \"e\" }])\n    //     .join(enter =>\n    //       enter\n    //         .append(\"path\")\n    //         .attr(\"class\", \"handle--custom\")\n    //         .attr(\"fill\", \"#666\")\n    //         .attr(\"fill-opacity\", 0)\n    //         .attr(\"stroke\", \"#000\")\n    //         .attr(\"stroke-width\", 1.5)\n    //         .attr(\"cursor\", \"ew-resize\")\n    //         .attr(\"d\", d => brushResizePath(d, temporalbar_h))\n    //     )\n    //     .attr(\n    //       \"transform\",\n    //       selection.length === 0\n    //         ? null\n    //         : (d, i) => `translate(${selection[i]},${temporalbar_h / 4})`\n    //     );\n    // }\n\n    function brushStart() {\n      //hide handle\n      if (currentEvent.sourceEvent !== null && animIsPlaying.current) {\n        animPlayer.current.forEach(clearInterval);\n        pointInInterval = 0;\n        animIsPlaying.current = false;\n      } // let selection = currentEvent.selection;\n      // if (selection[0] - selection[1] === 0) {\n      //   brushAreaGroup.selectAll(\".handle--custom\").attr(\"display\", \"none\");\n      // }\n\n    }\n\n    function brushed() {//move handle and highlight selected bar\n      //brushAreaGroup.selectAll(\".handle--custom\").attr(\"display\", \"true\");\n      //let selection = currentEvent.selection;\n      //select(this).call(brushHandle, selection); //move brush handle based on selection\n    }\n\n    function brushEnd() {\n      //when brush is end, do logic here (e.g., filter data)\n      var selection = currentEvent.selection;\n\n      if (selection !== null) {\n        var dateSelection = selection.map(scale_x.invert);\n        svgGroup.selectAll(\".temporal-bar-rectangle\").attr(\"stroke\", function (d) {\n          var day = moment(d[0]);\n\n          if (day >= dateSelection[0] && day <= dateSelection[1]) {\n            return \"red\";\n          } else {\n            return \"black\";\n          }\n        });\n        var selectedData = Array.from(props.isolateData.values()).map(function (d) {\n          return d;\n        }).filter(function (d) {\n          return d.isolate_colDate >= dateSelection[0] && d.isolate_colDate <= dateSelection[1];\n        });\n\n        if (selectedData && selectedData.length > 0) {\n          selectedData = selectedData.map(function (d) {\n            return d.uid;\n          });\n          props.setSelectedData(selectedData);\n        }\n\n        setselectionDate(dateSelection);\n      }\n    } // ======================= ANIMATION CONTROLLER ================================\n\n\n    var cont = select(temporalbarContainerRef.current);\n    cont.select(\"#playBtn\").on(\"click\", function () {\n      if (!animIsPlaying.current) {\n        //jika animasi tidak saat dijalankan = FALSE\n        playAnimation();\n      } else {\n        pauseAnimation();\n      }\n    });\n    cont.select(\"#stopBtn\").on(\"click\", function () {\n      if (animIsPlaying.current) {\n        stopAnimation();\n      }\n    }); //when animation is playing never make new set interval\n\n    function playAnimation() {\n      var animPlayer_interval = setInterval(function () {\n        movingBrush();\n      }, 1000);\n      animPlayer.current.push(animPlayer_interval); //set animation is playing = TRUE\n      //change the state on anim is playing\n      //props.changeTempIsAnimationPlaying(true);\n\n      animIsPlaying.current = true;\n    }\n\n    function pauseAnimation() {\n      animPlayer.current.forEach(clearInterval); //props.changeTempIsAnimationPlaying(false);\n\n      animIsPlaying.current = false;\n    }\n\n    function movingBrush() {\n      //console.log(\"moving\");\n      if (animIsPlaying.current && pointInInterval < animDateInterval.length) {\n        var currentDate = pointInInterval === animDateInterval.length - 1 ? moment(animDateInterval[pointInInterval]).add(1, \"day\") : animDateInterval[pointInInterval];\n        brushAreaGroup.call(brush).call(brush.move, [0, scale_x(currentDate)]);\n        pointInInterval += 1;\n      } else {\n        stopAnimation();\n      }\n    }\n\n    function stopAnimation() {\n      animPlayer.current.forEach(clearInterval);\n      pointInInterval = 0; //props.changeTempIsAnimationPlaying(false);\n\n      animIsPlaying.current = false; //console.log(scale_x.range());\n\n      brushAreaGroup.call(brush.move, scale_x.range());\n    }\n\n    brushAreaGroup.call(brush.move, scale_x.range());\n  }\n\n  function clearSelectedData() {\n    svg.selectAll(\".temporal-bar-rectangle\").attr(\"stroke\", \"black\");\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 343,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"temporalbarContainer\",\n    ref: temporalbarContainerRef,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 344,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"temporalbar-no-drawing\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 345,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Empty, {\n    description: \"No chart: please click redraw button\",\n    image: Empty.PRESENTED_IMAGE_SIMPLE,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 346,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"temporalbar-buttons-container\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 351,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"temporalbar-selectedDate\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 352,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      marginLeft: \"10px\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 353,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 354,\n      columnNumber: 15\n    }\n  }, \"Selected date: \"), /*#__PURE__*/React.createElement(\"span\", {\n    id: \"selection-date-text\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 355,\n      columnNumber: 15\n    }\n  })))), /*#__PURE__*/React.createElement(\"svg\", {\n    id: \"temporalbar-svg\",\n    ref: temporalbarSVGRef,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 359,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default TemporalHistogram;\n/*\n<div id=\"temporalbar-playback\">\n  <Button\n    id={\"playBtn\"}\n    size={\"medium\"}\n    style={{ margin: \"0px\", border: \"none\" }}\n    icon={<PlayCircleOutlined />}\n  ></Button>\n  <Button\n    id={\"stopBtn\"}\n    size={\"small\"}\n    style={{ margin: \"0px\", border: \"none\" }}\n    icon={<BorderOutlined />}\n  ></Button>\n</div>\n*/","map":{"version":3,"sources":["/Volumes/DATA/BUDI/APP_DEV/haiviz-v04/src/viz_TemporalBar/chart_TemporalBar_histogram.js"],"names":["React","useEffect","useRef","useState","extent","timeFormat","select","Empty","brushX","scaleLinear","scaleTime","axisBottom","axisLeft","event","currentEvent","filterUnique","moment","require","TemporalHistogram","props","selectionDate","setselectionDate","temporalbarSVGRef","temporalbarContainerRef","animPlayer","animIsPlaying","observedWidth","width","observedHeight","height","svg","current","margin","top","right","bottom","left","temporalbar_w","temporalbar_h","isUserStartResize","temporalbarSettings","scaleMode","isUserRedraw","draw","remove","style","chartData","selectedData","length","clearSelectedData","cont","text","format","dateArr","Array","from","isolateData","values","map","d","isolate_colDate","dateRange","chartDataArr","entries","frequencyRange","attr","scale_x","domain","subtract","add","range","scale_y","axis_x","scale","tickSize","tickFormat","axis_y","animDateIntervalMilliseconds","getTime","filter","animDateInterval","Date","sort","a","b","pointInInterval","brush","on","brushStart","brushed","brushEnd","svgGroup","append","call","barGroup","bars","selectAll","data","enter","day","day_begin","startOf","toString","day_end","endOf","brushAreaGroup","sourceEvent","forEach","clearInterval","selection","dateSelection","invert","uid","setSelectedData","playAnimation","pauseAnimation","stopAnimation","animPlayer_interval","setInterval","movingBrush","push","currentDate","move","PRESENTED_IMAGE_SIMPLE","marginLeft"],"mappings":"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","sourcesContent":["/* ============================================================================\nPROBLEM: D3 brush currentEvent state is interfered by ract grid layout postion\nSo we can only use gid 0,0 and make it non resizeable\n============================================================================ */\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { extent } from \"d3-array\";\nimport { timeFormat } from \"d3-time-format\";\nimport { select } from \"d3-selection\";\nimport { Empty } from \"antd\";\nimport { brushX } from \"d3-brush\";\nimport { scaleLinear, scaleTime } from \"d3-scale\";\nimport { axisBottom, axisLeft } from \"d3-axis\";\nimport { event as currentEvent } from \"d3\";\nimport { filterUnique } from \"../utils/utils\";\nimport \"./style_TemporalBar.css\";\n\nconst moment = require(\"moment\");\n\nconst TemporalHistogram = (props) => {\n  //states\n  const [selectionDate, setselectionDate] = useState(null);\n  const temporalbarSVGRef = useRef();\n  const temporalbarContainerRef = useRef();\n  const animPlayer = useRef([]);\n  const animIsPlaying = useRef(false);\n  const observedWidth = props.width - 10;\n  const observedHeight = props.height - 100; //ofsett by card head\n  const svg = select(temporalbarSVGRef.current);\n  const margin = { top: 10, right: 20, bottom: 10, left: 30 };\n  const temporalbar_w = observedWidth - margin.left - margin.right;\n  const temporalbar_h = observedHeight - margin.top - margin.bottom - 10;\n\n  //SETTINGS\n  const isUserStartResize = props.temporalbarSettings.isUserStartResize;\n  const scaleMode = props.temporalbarSettings.scaleMode;\n\n  //USEEFFECTS\n  useEffect(() => {\n    //console.log(isUserStartResize, props.isUserRedraw);\n    if (!isUserStartResize && !props.isUserRedraw) {\n      draw(); //when initial draw\n    } else if (!isUserStartResize && props.isUserRedraw) {\n      draw(); //when user click redraw\n    } else {\n      //console.log(\"hide and remove\");\n      select(\"#temporalbar-svgGroup\").remove();\n      select(\"#temporalbar-buttons-container\").style(\"display\", \"none\");\n      select(\"#temporalbar-no-drawing\").style(\"display\", \"block\");\n    }\n  }, [\n    observedWidth,\n    observedHeight,\n    props.chartData,\n    isUserStartResize,\n    props.isUserRedraw,\n  ]);\n\n  useEffect(() => {\n    if (props.selectedData && props.selectedData.length === 0) {\n      clearSelectedData();\n    }\n  }, [props.selectedData]);\n\n  useEffect(() => {\n    if (selectionDate) {\n      const cont = select(temporalbarContainerRef.current);\n      cont.select(\"#selection-date-text\").text(() => {\n        return (\n          \" \" +\n          moment(selectionDate[0]).format(\"D MMMM YYYY\") +\n          \" - \" +\n          moment(selectionDate[1]).format(\"D MMMM YYYY\")\n        );\n      });\n    }\n  }, [selectionDate]);\n\n  //draw function: heavy processes like drawing each data points are here\n  function draw() {\n    const svg = select(temporalbarSVGRef.current);\n    const dateArr = Array.from(props.isolateData.values()).map(\n      (d) => d.isolate_colDate\n    );\n    const dateRange = extent(dateArr);\n    const chartDataArr = Array.from(props.chartData.entries());\n    const frequencyRange = extent(chartDataArr.map((d) => d[1].length));\n    //clean previous drawing artifacts\n    select(\"#temporalbar-svgGroup\").remove();\n    select(\"#temporalbar-buttons-container\").style(\"display\", \"block\");\n    select(\"#temporalbar-no-drawing\").style(\"display\", \"none\");\n    //set svg attributes\n    svg\n      .attr(\"width\", temporalbar_w + margin.left + margin.right)\n      .attr(\"height\", temporalbar_h + margin.top + margin.bottom);\n\n    //scale\n    const scale_x = scaleTime()\n      .domain([\n        moment(dateRange[0]).subtract(2, \"weeks\"),\n        moment(dateRange[1]).add(2, \"weeks\"),\n      ])\n      .range([0, temporalbar_w]);\n    //.nice(); -> make to inconsistent scale offset, without it we have consistent offset that is 1 week before and after\n    const scale_y = scaleLinear()\n      .domain([0, frequencyRange[1]])\n      .range([temporalbar_h, 0]);\n\n    //axis\n    const axis_x = axisBottom()\n      .scale(scale_x)\n      .tickSize([5])\n      .tickFormat(timeFormat(\"%Y-%m\"));\n    const axis_y = axisLeft()\n      .scale(scale_y)\n      .tickSize([5]);\n\n    //animation\n    let animDateIntervalMilliseconds = dateArr\n      .map((d) => d.getTime())\n      .filter(filterUnique);\n\n    let animDateInterval = animDateIntervalMilliseconds\n      .map(function(d) {\n        return new Date(d);\n      })\n      .sort(function(a, b) {\n        return a - b;\n      });\n    //console.log(animDateInterval);\n    let pointInInterval = 0;\n\n    //brush area\n    const brush = brushX() // brush rectangle area for mini chart\n      .extent([\n        [0, 0],\n        [temporalbar_w, temporalbar_h],\n      ]) // brush region from top left corner 0, 0 to 900, 40\n      .on(\"start\", brushStart)\n      .on(\"brush\", brushed)\n      .on(\"end\", brushEnd);\n\n    //make group root of svg for transformation purpose\n    let svgGroup = svg\n      .append(\"g\")\n      .attr(\"id\", \"temporalbar-svgGroup\")\n      .attr(\"transform\", \"translate(\" + margin.left + \",\" + 5 + \")\");\n\n    //axis group\n    svgGroup\n      .append(\"g\")\n      .attr(\"class\", \"temporal-axis axis--x\")\n      .attr(\"transform\", \"translate(\" + 0 + \",\" + temporalbar_h + \")\")\n      .call(axis_x);\n    svgGroup\n      .append(\"g\")\n      .attr(\"class\", \"temporal-axis axis--y\")\n      .call(axis_y);\n\n    //make bar chart group and draw chart on it\n    let barGroup = svgGroup.append(\"g\").attr(\"id\", \"barchartGroup\");\n    let bars = barGroup\n      .selectAll(\".temporal-bar-rectangle\")\n      .data(chartDataArr)\n      .enter()\n      .append(\"rect\")\n      .attr(\"class\", \"temporal-bar-rectangle\")\n      .attr(\"x\", (d) => {\n        let day = moment(d[0]);\n        let day_begin = day.startOf(\"day\").toString();\n        return scale_x(new Date(day_begin));\n      })\n      .attr(\"y\", (d) => {\n        return scale_y(d[1].length);\n      })\n      .attr(\"height\", (d) => {\n        return temporalbar_h - scale_y(d[1].length);\n      })\n      .attr(\"stroke\", \"black\")\n      .style(\"fill\", \"none\");\n\n    if (scaleMode === \"daily\") {\n      bars.attr(\"width\", (d) => {\n        let day = moment(d[0]);\n        let day_begin = day.startOf(\"day\").toString();\n        let day_end = day.endOf(\"day\").toString();\n        return scale_x(new Date(day_end)) - scale_x(new Date(day_begin));\n      });\n    } else {\n      bars.attr(\"width\", (d) => {\n        let day = moment(d[0]);\n        let day_begin = day.startOf(\"isoWeek\").toString();\n        let day_end = day.endOf(\"isoWeek\").toString();\n        return scale_x(new Date(day_end)) - scale_x(new Date(day_begin));\n      });\n    }\n\n    //make brush group\n    let brushAreaGroup = svgGroup\n      .append(\"g\")\n      .attr(\"class\", \"temporal-brushArea\")\n      .call(brush);\n\n    // function brushHandle(g, selection) {\n    //   g.selectAll(\".handle--custom\")\n    //     .data([{ type: \"w\" }, { type: \"e\" }])\n    //     .join(enter =>\n    //       enter\n    //         .append(\"path\")\n    //         .attr(\"class\", \"handle--custom\")\n    //         .attr(\"fill\", \"#666\")\n    //         .attr(\"fill-opacity\", 0)\n    //         .attr(\"stroke\", \"#000\")\n    //         .attr(\"stroke-width\", 1.5)\n    //         .attr(\"cursor\", \"ew-resize\")\n    //         .attr(\"d\", d => brushResizePath(d, temporalbar_h))\n    //     )\n    //     .attr(\n    //       \"transform\",\n    //       selection.length === 0\n    //         ? null\n    //         : (d, i) => `translate(${selection[i]},${temporalbar_h / 4})`\n    //     );\n    // }\n\n    function brushStart() {\n      //hide handle\n      if (currentEvent.sourceEvent !== null && animIsPlaying.current) {\n        animPlayer.current.forEach(clearInterval);\n        pointInInterval = 0;\n        animIsPlaying.current = false;\n      }\n      // let selection = currentEvent.selection;\n      // if (selection[0] - selection[1] === 0) {\n      //   brushAreaGroup.selectAll(\".handle--custom\").attr(\"display\", \"none\");\n      // }\n    }\n\n    function brushed() {\n      //move handle and highlight selected bar\n      //brushAreaGroup.selectAll(\".handle--custom\").attr(\"display\", \"true\");\n      //let selection = currentEvent.selection;\n      //select(this).call(brushHandle, selection); //move brush handle based on selection\n    }\n\n    function brushEnd() {\n      //when brush is end, do logic here (e.g., filter data)\n      let selection = currentEvent.selection;\n      if (selection !== null) {\n        let dateSelection = selection.map(scale_x.invert);\n        svgGroup\n          .selectAll(\".temporal-bar-rectangle\")\n          .attr(\"stroke\", function(d) {\n            let day = moment(d[0]);\n            if (day >= dateSelection[0] && day <= dateSelection[1]) {\n              return \"red\";\n            } else {\n              return \"black\";\n            }\n          });\n        let selectedData = Array.from(props.isolateData.values())\n          .map((d) => d)\n          .filter(\n            (d) =>\n              d.isolate_colDate >= dateSelection[0] &&\n              d.isolate_colDate <= dateSelection[1]\n          );\n        if (selectedData && selectedData.length > 0) {\n          selectedData = selectedData.map((d) => d.uid);\n          props.setSelectedData(selectedData);\n        }\n\n        setselectionDate(dateSelection);\n      }\n    }\n\n    // ======================= ANIMATION CONTROLLER ================================\n    const cont = select(temporalbarContainerRef.current);\n    cont.select(\"#playBtn\").on(\"click\", () => {\n      if (!animIsPlaying.current) {\n        //jika animasi tidak saat dijalankan = FALSE\n        playAnimation();\n      } else {\n        pauseAnimation();\n      }\n    });\n\n    cont.select(\"#stopBtn\").on(\"click\", () => {\n      if (animIsPlaying.current) {\n        stopAnimation();\n      }\n    });\n\n    //when animation is playing never make new set interval\n\n    function playAnimation() {\n      let animPlayer_interval = setInterval(function() {\n        movingBrush();\n      }, 1000);\n      animPlayer.current.push(animPlayer_interval);\n      //set animation is playing = TRUE\n      //change the state on anim is playing\n      //props.changeTempIsAnimationPlaying(true);\n      animIsPlaying.current = true;\n    }\n\n    function pauseAnimation() {\n      animPlayer.current.forEach(clearInterval);\n      //props.changeTempIsAnimationPlaying(false);\n      animIsPlaying.current = false;\n    }\n\n    function movingBrush() {\n      //console.log(\"moving\");\n      if (animIsPlaying.current && pointInInterval < animDateInterval.length) {\n        var currentDate =\n          pointInInterval === animDateInterval.length - 1\n            ? moment(animDateInterval[pointInInterval]).add(1, \"day\")\n            : animDateInterval[pointInInterval];\n        brushAreaGroup.call(brush).call(brush.move, [0, scale_x(currentDate)]);\n        pointInInterval += 1;\n      } else {\n        stopAnimation();\n      }\n    }\n\n    function stopAnimation() {\n      animPlayer.current.forEach(clearInterval);\n      pointInInterval = 0;\n      //props.changeTempIsAnimationPlaying(false);\n      animIsPlaying.current = false;\n      //console.log(scale_x.range());\n      brushAreaGroup.call(brush.move, scale_x.range());\n    }\n\n    brushAreaGroup.call(brush.move, scale_x.range());\n  }\n\n  function clearSelectedData() {\n    svg.selectAll(\".temporal-bar-rectangle\").attr(\"stroke\", \"black\");\n  }\n\n  return (\n    <React.Fragment>\n      <div id=\"temporalbarContainer\" ref={temporalbarContainerRef}>\n        <div id=\"temporalbar-no-drawing\">\n          <Empty\n            description={\"No chart: please click redraw button\"}\n            image={Empty.PRESENTED_IMAGE_SIMPLE}\n          />\n        </div>\n        <div id=\"temporalbar-buttons-container\">\n          <div id=\"temporalbar-selectedDate\">\n            <p style={{ marginLeft: \"10px\" }}>\n              <strong>Selected date: </strong>\n              <span id=\"selection-date-text\"></span>\n            </p>\n          </div>\n        </div>\n        <svg id=\"temporalbar-svg\" ref={temporalbarSVGRef}></svg>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default TemporalHistogram;\n/*\n<div id=\"temporalbar-playback\">\n  <Button\n    id={\"playBtn\"}\n    size={\"medium\"}\n    style={{ margin: \"0px\", border: \"none\" }}\n    icon={<PlayCircleOutlined />}\n  ></Button>\n  <Button\n    id={\"stopBtn\"}\n    size={\"small\"}\n    style={{ margin: \"0px\", border: \"none\" }}\n    icon={<BorderOutlined />}\n  ></Button>\n</div>\n*/\n"]},"metadata":{},"sourceType":"module"}