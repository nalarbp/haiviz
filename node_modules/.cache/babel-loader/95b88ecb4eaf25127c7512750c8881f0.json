{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread\";\nimport { csv, text, xml } from \"d3-fetch\";\nimport { hierarchy } from \"d3-hierarchy\";\nimport dotparser from \"dotparser\";\nimport { scaleOrdinal, scaleSequential } from \"d3-scale\";\nimport * as d3Chroma from \"d3-scale-chromatic\";\nimport { rollup } from \"d3-array\";\nimport Moment from \"moment\";\nimport { extendMoment } from \"moment-range\";\nimport { color } from \"d3-color\"; //import SVGSaver from \"svgsaver\";\n\nvar moment = extendMoment(Moment);\n\nvar _ = require(\"lodash\");\n\nvar xmlJSconvert = require(\"xml-js\");\n\nvar d3 = _objectSpread({}, require(\"d3-scale\"), require(\"d3-selection\"), require(\"d3-time-format\"), require(\"d3-time\"), require(\"d3-array\")); // ============================ TABLE DATA UTIL  =============================\n\n\nexport function getIsolateDataHeader(key) {\n  switch (key) {\n    case \"isolate_name\":\n      return \"Name\";\n\n    case \"isolate_species\":\n      return \"Species\";\n\n    case \"isolate_sourceName\":\n      return \"Source name\";\n\n    case \"isolate_sourceType\":\n      return \"Source type\";\n\n    case \"isolate_colLocation\":\n      return \"Collection location\";\n\n    case \"isolate_colDate\":\n      return \"Collection date\";\n\n    case \"profile_1\":\n      return \"Profile 1\";\n\n    case \"profile_2\":\n      return \"Profile 2\";\n\n    case \"profile_3\":\n      return \"Profile 3\";\n\n    default:\n      return null;\n  }\n}\nexport function getColorTypeTitle(key) {\n  switch (key) {\n    case \"species\":\n      return \"Species\";\n\n    case \"sourceType\":\n      return \"Source type\";\n\n    case \"location\":\n      return \"Location\";\n\n    case \"profile1\":\n      return \"Profile 1\";\n\n    case \"profile2\":\n      return \"Profile 2\";\n\n    case \"profile3\":\n      return \"Profile 3\";\n\n    default:\n      return null;\n  }\n}\nexport function colorOrdinalInterpolator(domainList, d3ChromaInterpolator) {\n  //domainList: [locA, locB, locC]\n  //d3ChromaInterpolator: d3.InterpolateSpectral\n  //return a function (interpolator) from a given domain and d3 interpolator\n  var domainInterpolator = scaleSequential().domain([0, domainList.length]).interpolator(d3ChromaInterpolator);\n  var colorList = [];\n\n  for (var i = 0; i < domainList.length; i++) {\n    colorList.push(domainInterpolator(i));\n  }\n\n  var colorScale = scaleOrdinal().domain(domainList).range(colorList);\n  return colorScale;\n}\nexport function generateColor(domainList) {\n  //in: list;[patA, patB, ...]\n  //out: obj; {patA:#colIdx, patB:#colIdx, ...}\n  var res = {},\n      interpolator = colorOrdinalInterpolator(domainList);\n  domainList.forEach(function (d) {\n    res[d] = interpolator(d);\n  });\n  return res;\n} // ============================ TIME-RELATED UTIL  =============================\n// TODO: Change later to moment approach for consistancy\n\nexport var formatTime = d3.timeFormat(\"%d %b %Y\");\nexport var timeFormatting = d3.timeFormat(\"%d/%B/%Y\");\nexport var isoDateParser = d3.utcParse(\"%Y-%m-%d\");\nexport var dateToString_ddmmYYYY = d3.timeFormat(\"%d %b %Y\");\nexport var dateToStringIS08601 = d3.timeFormat(\"%Y-%m-%d\");\nexport var formatWeekOfYear = d3.timeFormat(\"%Y-%V\");\nexport var formatWeekISO8601 = d3.timeFormat(\"%V\"); // =========================== INPUT-RELATED UTIL ==============================\n\nexport var childrenAccessorFn = function childrenAccessorFn(_ref) {\n  var _ref2 = _slicedToArray(_ref, 2),\n      value = _ref2[1];\n\n  return value.size && Array.from(value);\n};\nexport function getIsolateData(_x, _x2, _x3, _x4, _x5) {\n  return _getIsolateData.apply(this, arguments);\n}\n\nfunction _getIsolateData() {\n  _getIsolateData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(fileURL, loadIsolateData, setColorScale, loadSimulatedMap, setisLoading) {\n    var data_promise_raw, validHeaders, inputHeaders, header_is_valid, isolate_name, duplicatedRecords, isolate_name_empty, isolate_date_invalid, data_promise, colHeaders, colHeaders_Map, species_list, location_list, sourceType_list, profile1_list, profile2_list, profile3_list, colorScale_bySpecies, colorScale_byLocation, colorScale_bySourceType, colorScale_byProfile1, colorScale_byProfile2, colorScale_byProfile3, colorbySpecies_Map, colorbyLocation_Map, colorbySourceType_Map, colorbyProfile1_Map, colorbyProfile2_Map, colorbyProfile3_Map, colorScale_init, locationRollup, hierarchyData, isolateData_Map;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return csv(fileURL).then(function (result) {\n              return result;\n            });\n\n          case 2:\n            data_promise_raw = _context.sent;\n            validHeaders = [\"isolate_name\", \"isolate_species\", \"isolate_colDate\", \"isolate_colLocation\", \"isolate_sourceType\", \"isolate_sourceName\", \"profile_1\", \"profile_2\", \"profile_3\"];\n            inputHeaders = Object.keys(data_promise_raw[0]);\n            header_is_valid = true;\n            validHeaders.forEach(function (item) {\n              if (inputHeaders.indexOf(item) === -1) {\n                header_is_valid = false;\n              }\n            });\n\n            if (header_is_valid) {\n              _context.next = 11;\n              break;\n            }\n\n            alert(\"Invalid headers\");\n            setisLoading(false);\n            return _context.abrupt(\"return\");\n\n          case 11:\n            // no duplicate in isolate name\n            isolate_name = _.countBy(data_promise_raw, \"isolate_name\");\n            duplicatedRecords = Object.keys(isolate_name).map(function (key) {\n              return {\n                name: key,\n                count: isolate_name[key]\n              };\n            }).filter(function (d) {\n              return d.count > 1;\n            });\n\n            if (!(duplicatedRecords.length > 0)) {\n              _context.next = 17;\n              break;\n            }\n\n            alert(\"Invalid data: duplicate record in column isolate name:\" + \"\".concat(JSON.stringify(duplicatedRecords)));\n            setisLoading(false);\n            return _context.abrupt(\"return\");\n\n          case 17:\n            // no empty record in isolate_name\n            isolate_name_empty = isolate_name[\"\"] ? true : false;\n\n            if (!isolate_name_empty) {\n              _context.next = 22;\n              break;\n            }\n\n            alert(\"Invalid data: column isolate_name contain empty record\");\n            setisLoading(false);\n            return _context.abrupt(\"return\");\n\n          case 22:\n            //console.log(data_promise_raw);\n            // no empty record or invalid format in collection date\n            isolate_date_invalid = false;\n            data_promise_raw.forEach(function (d) {\n              d.isolate_name = d.isolate_name.replace(/\\s*$/, \"\");\n              d.isolate_colDate = d.isolate_colDate.replace(/\\s*$/, \"\");\n              d.isolate_sourceType = d.isolate_sourceType.replace(/\\s*$/, \"\");\n              d.isolate_sourceName = d.isolate_sourceName.replace(/\\s*$/, \"\");\n              d.isolate_species = d.isolate_species.replace(/\\s*$/, \"\");\n              d.isolate_colLocation = d.isolate_colLocation.replace(/\\s*$/, \"\");\n\n              if (isoDateParser(d.isolate_colDate)) {\n                d[\"uid\"] = d.isolate_name;\n                d.isolate_colDate = isoDateParser(d.isolate_colDate);\n              } else {\n                isolate_date_invalid = true;\n              }\n            });\n            data_promise = data_promise_raw.map(function (d) {\n              return {\n                uid: d.uid,\n                isolate_name: d.isolate_name,\n                isolate_colDate: d.isolate_colDate,\n                isolate_sourceType: d.isolate_sourceType,\n                isolate_sourceName: d.isolate_sourceName,\n                isolate_species: d.isolate_species,\n                isolate_colLocation: d.isolate_colLocation,\n                profile_1: d.profile_1,\n                profile_2: d.profile_2,\n                profile_3: d.profile_3\n              };\n            });\n\n            if (!isolate_date_invalid) {\n              _context.next = 29;\n              break;\n            }\n\n            alert(\"Invalid data: wrong date format in column collection date\");\n            setisLoading(false);\n            return _context.abrupt(\"return\");\n\n          case 29:\n            // Create initial color table =====================================\n            // check and extract user defined color in the metadata\n            colHeaders = [];\n            inputHeaders.forEach(function (header) {\n              if (header.split(\":\")[1] === \"color\") {\n                var headerColorObj = {\n                  headerName: header,\n                  isHeaderHasColor: true\n                };\n                colHeaders.push(headerColorObj);\n              }\n            });\n            colHeaders_Map = new Map();\n            colHeaders.forEach(function (d) {\n              colHeaders_Map.set(d.headerName, d);\n            });\n            species_list = data_promise.map(function (d) {\n              return d.isolate_species;\n            }).filter(filterUnique);\n            location_list = data_promise.map(function (d) {\n              return d.isolate_colLocation;\n            }).filter(filterUnique);\n            sourceType_list = data_promise.map(function (d) {\n              return d.isolate_sourceType;\n            }).filter(filterUnique);\n            profile1_list = data_promise.map(function (d) {\n              return d.profile_1;\n            }).filter(filterUnique);\n            profile2_list = data_promise.map(function (d) {\n              return d.profile_2;\n            }).filter(filterUnique);\n            profile3_list = data_promise.map(function (d) {\n              return d.profile_3;\n            }).filter(filterUnique); // is predefined color for species true? if so extract the color (metadata, column name), if no generate initial color\n\n            colorScale_bySpecies = colHeaders_Map.get(\"isolate_species:color\") ? getUserDefinedColor(data_promise_raw, species_list, \"isolate_species\", \"isolate_species:color\") : colorOrdinalInterpolator(species_list, d3Chroma.interpolateRdYlBu);\n            colorScale_byLocation = colHeaders_Map.get(\"isolate_colLocation:color\") ? getUserDefinedColor(data_promise_raw, location_list, \"isolate_colLocation\", \"isolate_colLocation:color\") : colorOrdinalInterpolator(location_list, d3Chroma.interpolateSpectral);\n            colorScale_bySourceType = colHeaders_Map.get(\"isolate_sourceType:color\") ? getUserDefinedColor(data_promise_raw, sourceType_list, \"isolate_sourceType\", \"isolate_sourceType:color\") : colorOrdinalInterpolator(sourceType_list, d3Chroma.interpolateSpectral);\n            colorScale_byProfile1 = colHeaders_Map.get(\"profile_1:color\") ? getUserDefinedColor(data_promise_raw, profile1_list, \"profile_1\", \"profile_1:color\") : colorOrdinalInterpolator(profile1_list, d3Chroma.interpolateViridis);\n            colorScale_byProfile2 = colHeaders_Map.get(\"profile_2:color\") ? getUserDefinedColor(data_promise_raw, profile2_list, \"profile_2\", \"profile_2:color\") : colorOrdinalInterpolator(profile2_list, d3Chroma.interpolateViridis);\n            colorScale_byProfile3 = colHeaders_Map.get(\"profile_3:color\") ? getUserDefinedColor(data_promise_raw, profile3_list, \"profile_3\", \"profile_3:color\") : colorOrdinalInterpolator(profile3_list, d3Chroma.interpolateViridis);\n            colorbySpecies_Map = new Map();\n            species_list.forEach(function (d) {\n              colorbySpecies_Map.set(d, color(colorScale_bySpecies(d)).formatHex());\n            });\n            colorbyLocation_Map = new Map();\n            location_list.forEach(function (d) {\n              colorbyLocation_Map.set(d, color(colorScale_byLocation(d)).formatHex());\n            });\n            colorbySourceType_Map = new Map();\n            sourceType_list.forEach(function (d) {\n              colorbySourceType_Map.set(d, color(colorScale_bySourceType(d)).formatHex());\n            });\n            colorbyProfile1_Map = new Map();\n            profile1_list.forEach(function (d) {\n              colorbyProfile1_Map.set(d, color(colorScale_byProfile1(d)).formatHex());\n            });\n            colorbyProfile2_Map = new Map();\n            profile2_list.forEach(function (d) {\n              colorbyProfile2_Map.set(d, color(colorScale_byProfile2(d)).formatHex());\n            });\n            colorbyProfile3_Map = new Map();\n            profile3_list.forEach(function (d) {\n              colorbyProfile3_Map.set(d, color(colorScale_byProfile3(d)).formatHex());\n            });\n            colorScale_init = {\n              colorType: \"location\",\n              byLocation: colorbyLocation_Map,\n              bySpecies: colorbySpecies_Map,\n              bySourceType: colorbySourceType_Map,\n              byProfile1: colorbyProfile1_Map,\n              byProfile2: colorbyProfile2_Map,\n              byProfile3: colorbyProfile3_Map,\n              byLocation_ori: colorbyLocation_Map,\n              bySpecies_ori: colorbySpecies_Map,\n              bySourceType_ori: colorbySourceType_Map,\n              byProfile1_ori: colorbyProfile1_Map,\n              byProfile2_ori: colorbyProfile2_Map,\n              byProfile3_ori: colorbyProfile3_Map\n            }; // make simulated map ================================================#########\n\n            locationRollup = rollup(data_promise, function (d) {\n              return d.length;\n            }, function (d) {\n              return d.isolate_colLocation;\n            });\n            hierarchyData = hierarchy([null, locationRollup], childrenAccessorFn).sum(function (_ref3) {\n              var _ref4 = _slicedToArray(_ref3, 2),\n                  value = _ref4[1];\n\n              return value;\n            }).sort(function (a, b) {\n              return b.value - a.value;\n            }); //console.log(hierarchyData);\n            //=========================================================================\n            //When all pass validation test, send to store\n            //Convert isolateDate into Map\n\n            isolateData_Map = new Map();\n            data_promise.forEach(function (d) {\n              isolateData_Map.set(d.uid, d);\n            }); //console.log(colorScale_byLocation.domain());\n\n            loadIsolateData(isolateData_Map);\n            loadSimulatedMap(hierarchyData);\n            setColorScale(colorScale_init);\n\n          case 65:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getIsolateData.apply(this, arguments);\n}\n\nexport function parseXML(_x6, _x7) {\n  return _parseXML.apply(this, arguments);\n}\n\nfunction _parseXML() {\n  _parseXML = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(fileURL, dispatchDataToStore) {\n    var data_promise;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return xml(fileURL).then(function (result) {\n              return result;\n            });\n\n          case 2:\n            data_promise = _context2.sent;\n            dispatchDataToStore(data_promise);\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _parseXML.apply(this, arguments);\n}\n\nexport function parseTree(_x8, _x9) {\n  return _parseTree.apply(this, arguments);\n}\n\nfunction _parseTree() {\n  _parseTree = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(fileURL, dispatchDataToStore) {\n    var data_promise, treeLayout;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return text(fileURL).then(function (result) {\n              return result;\n            });\n\n          case 2:\n            data_promise = _context3.sent;\n            //const phylotree = newickParse(data_promise);\n            // const treeLayout = hierarchy(phylotree, d => d.branchset).sum(d =>\n            //   d.branchset ? 0 : 1\n            // );\n            treeLayout = data_promise;\n            dispatchDataToStore(treeLayout);\n\n          case 5:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _parseTree.apply(this, arguments);\n}\n\nexport function parseGraph(_x10, _x11) {\n  return _parseGraph.apply(this, arguments);\n} //\n\nfunction _parseGraph() {\n  _parseGraph = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(fileURL, dispatchDataToStore) {\n    var graph_promise, graph;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return text(fileURL).then(function (result) {\n              return result;\n            });\n\n          case 2:\n            graph_promise = _context4.sent;\n            //const graph = parseDOTtoJSON(graph_promise);\n            graph = parseDOTtoCytoscape(graph_promise);\n\n            if (graph) {\n              //add layout detection here\n              //console.log(graph);\n              dispatchDataToStore(graph);\n            }\n\n          case 5:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n  return _parseGraph.apply(this, arguments);\n}\n\nexport function parseMovement(_x12, _x13) {\n  return _parseMovement.apply(this, arguments);\n}\n\nfunction _parseMovement() {\n  _parseMovement = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(fileURL, dispatchDataToStore) {\n    var data_promise, validHeaders, inputHeaders, header_is_valid, date_invalid;\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _context5.next = 2;\n            return csv(fileURL).then(function (result) {\n              return result;\n            });\n\n          case 2:\n            data_promise = _context5.sent;\n            validHeaders = [\"source_name\", \"location_name\", \"start_date\", \"end_date\"];\n            inputHeaders = Object.keys(data_promise[0]);\n            header_is_valid = true;\n            validHeaders.forEach(function (item) {\n              if (inputHeaders.indexOf(item) === -1) {\n                header_is_valid = false;\n              }\n            });\n\n            if (header_is_valid) {\n              _context5.next = 10;\n              break;\n            }\n\n            alert(\"Invalid headers\");\n            return _context5.abrupt(\"return\");\n\n          case 10:\n            // no empty record or invalid format on start and end date\n            date_invalid = false;\n            data_promise.forEach(function (d) {\n              if (moment(d.start_date) && moment(d.end_date)) {\n                d.start_date = moment(d.start_date);\n                d.end_date = moment(d.end_date);\n              } else {\n                date_invalid = true;\n              }\n            });\n\n            if (!date_invalid) {\n              _context5.next = 15;\n              break;\n            }\n\n            alert(\"Invalid data: wrong date format in column start or end date\");\n            return _context5.abrupt(\"return\");\n\n          case 15:\n            data_promise.sort(function (a, b) {\n              return a.source_name - b.source_name;\n            });\n            dispatchDataToStore(data_promise);\n\n          case 17:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n  return _parseMovement.apply(this, arguments);\n}\n\nexport var getMapLocationData = function getMapLocationData(mapDataNode) {\n  if (mapDataNode) {\n    var serializedMapData = new XMLSerializer().serializeToString(mapDataNode);\n    var locationDataObj = xmlJSconvert.xml2js(serializedMapData, {\n      compact: true,\n      spaces: 0\n    });\n    var locationData = locationDataObj.mapdata.location.map(function (d) {\n      return {\n        name: d._attributes.name,\n        x: +d._attributes.x,\n        y: +d._attributes.y\n      };\n    });\n    var locationData_Map = new Map();\n    locationData.forEach(function (d) {\n      locationData_Map.set(d.name, d);\n    });\n    return locationData_Map;\n  } else {\n    return null;\n  }\n}; // ================================= OTHERS  ===================================\n\nexport var getRandomIntInclusive = function getRandomIntInclusive(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min; //The maximum is inclusive and the minimum is inclusive\n};\nexport function getColorScale(colorScaleState) {\n  switch (colorScaleState.colorType) {\n    case \"species\":\n      return colorScaleState.bySpecies;\n\n    case \"location\":\n      return colorScaleState.byLocation;\n\n    case \"sourceType\":\n      return colorScaleState.bySourceType;\n\n    case \"profile1\":\n      return colorScaleState.byProfile1;\n\n    case \"profile2\":\n      return colorScaleState.byProfile2;\n\n    case \"profile3\":\n      return colorScaleState.byProfile3;\n\n    default:\n      return colorScaleState.byLocation;\n  }\n}\nexport function getColumnNameByColorType(d, colorType) {\n  switch (colorType) {\n    case \"species\":\n      return d.isolate_species;\n\n    case \"location\":\n      return d.isolate_colLocation;\n\n    case \"sourceType\":\n      return d.isolate_sourceType;\n\n    case \"profile1\":\n      return d.profile_1;\n\n    case \"profile2\":\n      return d.profile_2;\n\n    case \"profile3\":\n      return d.profile_3;\n\n    default:\n      return d.isolate_colLocation;\n  }\n}\nexport function getColorScaleByObject(obj, colorScaleState) {\n  if (obj) {\n    switch (colorScaleState.colorType) {\n      case \"species\":\n        return colorScaleState.bySpecies.get(obj.isolate_species);\n\n      case \"location\":\n        return colorScaleState.byLocation.get(obj.isolate_colLocation);\n\n      case \"sourceType\":\n        return colorScaleState.bySourceType.get(obj.isolate_sourceType);\n\n      case \"profile1\":\n        return colorScaleState.byProfile1.get(obj.profile_1);\n\n      case \"profile2\":\n        return colorScaleState.byProfile2.get(obj.profile_2);\n\n      case \"profile3\":\n        return colorScaleState.byProfile3.get(obj.profile_3);\n\n      default:\n        return colorScaleState.byLocation.get(obj.isolate_colLocation);\n    }\n  } else {\n    return \"black\";\n  }\n}\nexport function getColorScaleByObjectAndColType(obj, colorScaleState, colType) {\n  if (obj) {\n    switch (colType) {\n      case \"species\":\n        return colorScaleState.bySpecies.get(obj.isolate_species);\n\n      case \"location\":\n        return colorScaleState.byLocation.get(obj.isolate_colLocation);\n\n      case \"sourceType\":\n        return colorScaleState.bySourceType.get(obj.isolate_sourceType);\n\n      case \"profile1\":\n        return colorScaleState.byProfile1.get(obj.profile_1);\n\n      case \"profile2\":\n        return colorScaleState.byProfile2.get(obj.profile_2);\n\n      case \"profile3\":\n        return colorScaleState.byProfile3.get(obj.profile_3);\n\n      default:\n        return colorScaleState.byLocation.get(obj.isolate_colLocation);\n    }\n  } else {\n    return \"black\";\n  }\n}\nexport function getIsolateCompositionByCategory(category, isolateData_Map) {\n  var isolateData = _.cloneDeep(Array.from(isolateData_Map.values()));\n\n  var data;\n\n  switch (category) {\n    case \"species\":\n      var species_count = _.countBy(isolateData, function (d) {\n        return d.isolate_species;\n      });\n\n      data = Object.keys(species_count).map(function (key) {\n        return {\n          _id: key,\n          id: key,\n          label: key,\n          value: species_count[key]\n        };\n      });\n      return {\n        categoryLength: Object.keys(species_count).length,\n        data: data\n      };\n\n    case \"sourceType\":\n      var source_count = _.countBy(isolateData, function (d) {\n        return d.isolate_sourceType;\n      });\n\n      data = Object.keys(source_count).map(function (key) {\n        return {\n          _id: key,\n          id: key,\n          label: key,\n          value: source_count[key]\n        };\n      });\n      return {\n        categoryLength: Object.keys(source_count).length,\n        data: data\n      };\n\n    case \"location\":\n      var location_count = _.countBy(isolateData, function (d) {\n        return d.isolate_colLocation;\n      });\n\n      data = Object.keys(location_count).map(function (key) {\n        return {\n          _id: key,\n          id: key,\n          label: key,\n          value: location_count[key]\n        };\n      });\n      return {\n        categoryLength: Object.keys(location_count).length,\n        data: data\n      };\n\n    case \"profile1\":\n      var profile1_count = _.countBy(isolateData, function (d) {\n        return d.profile_1;\n      });\n\n      data = Object.keys(profile1_count).map(function (key) {\n        return {\n          _id: key,\n          id: key,\n          label: key,\n          value: profile1_count[key]\n        };\n      });\n      return {\n        categoryLength: Object.keys(profile1_count).length,\n        data: data\n      };\n\n    case \"profile2\":\n      var profile2_count = _.countBy(isolateData, function (d) {\n        return d.profile_2;\n      });\n\n      data = Object.keys(profile2_count).map(function (key) {\n        return {\n          _id: key,\n          id: key,\n          label: key,\n          value: profile2_count[key]\n        };\n      });\n      return {\n        categoryLength: Object.keys(profile2_count).length,\n        data: data\n      };\n\n    case \"profile3\":\n      var profile3_count = _.countBy(isolateData, function (d) {\n        return d.profile_3;\n      });\n\n      data = Object.keys(profile3_count).map(function (key) {\n        return {\n          _id: key,\n          id: key,\n          label: key,\n          value: profile3_count[key]\n        };\n      });\n      return {\n        categoryLength: Object.keys(profile3_count).length,\n        data: data\n      };\n\n    default:\n      return data;\n  }\n}\nexport function downloadFileAsText(filename, text) {\n  var element = document.createElement(\"a\");\n  element.setAttribute(\"href\", \"data:text/plain;charset=utf-8,\" + encodeURIComponent(text));\n  element.setAttribute(\"download\", filename);\n  element.style.display = \"none\";\n  document.body.appendChild(element);\n  element.click();\n  document.body.removeChild(element);\n}\nexport function filterUnique(value, index, self) {\n  // filter to only unique value from a given array\n  return self.indexOf(value) === index;\n}\nexport function getDatafromChildren(childrenList) {\n  var res = [];\n\n  for (var i = 0; i < childrenList.length; i++) {\n    if (childrenList[i].meta) {\n      res.push(childrenList[i].meta);\n    }\n  } //sort result by date\n\n\n  return res;\n} // phyloTree auxilarry function ============================================\n\nexport function tree_rightAngleDiagonal() {\n  var projection = function projection(d) {\n    return [d.y, d.x];\n  };\n\n  var path = function path(pathData) {\n    return \"M\" + pathData[0] + \" \" + pathData[1] + \" \" + pathData[2];\n  };\n\n  function diagonal(diagonalPath) {\n    var source = diagonalPath.source,\n        target = diagonalPath.target,\n        pathData = [source, {\n      x: target.x,\n      y: source.y\n    }, target];\n    pathData = pathData.map(projection);\n    return path(pathData);\n  }\n\n  return diagonal;\n}\nexport function tree_scaleBranchLengths(nodes, w) {\n  // Visit all nodes and adjust y pos width distance metric\n  var visitPreOrder = function visitPreOrder(root, callback) {\n    callback(root);\n\n    if (root.children) {\n      for (var i = root.children.length - 1; i >= 0; i--) {\n        visitPreOrder(root.children[i], callback);\n      }\n    }\n  };\n\n  visitPreOrder(nodes[0], function (node) {\n    node.rootDist = (node.parent ? node.parent.rootDist : 0) + (node.data.length || 0);\n  });\n  var rootDists = nodes.map(function (n) {\n    return n.rootDist;\n  });\n  var yscale = d3.scaleLinear().domain([0, d3.max(rootDists)]).range([0, w]);\n  visitPreOrder(nodes[0], function (node) {\n    node.y = yscale(node.rootDist);\n  });\n  return yscale;\n}\nexport function tree_pathGenerator(d) {\n  function tree_path(pathData) {\n    return \"M\" + pathData[0] + \" \" + pathData[1] + \" \" + pathData[2];\n  }\n\n  var source = d.source;\n  var target = d.target;\n  var pathData = [source, {\n    x: target.x,\n    y: source.y\n  }, target];\n  pathData = pathData.map(function (el) {\n    return [el.y, el.x];\n  });\n  return tree_path(pathData);\n}\nexport function sortNumber(a, b) {\n  return a - b;\n}\nexport function parseDOTtoJSON(dot) {\n  function _getNodeLabelAtt(attrList) {\n    var nameAttObj = attrList.find(function (att) {\n      return att.id === \"name\";\n    });\n    var nameAtt = nameAttObj && nameAttObj.eq ? String(nameAttObj.eq) : null;\n    return nameAtt;\n  }\n\n  function _getLinkWeightAtt(attrList) {\n    var weightAttObj = attrList.find(function (att) {\n      return att.id === \"weight\";\n    });\n    var weightAtt = weightAttObj && weightAttObj.eq && weightAttObj.eq !== \"null\" ? parseFloat(weightAttObj.eq) : null;\n    return weightAtt;\n  }\n\n  function _getLinkColorAtt(attrList) {\n    var colorAttObj = attrList.find(function (att) {\n      return att.id === \"color\";\n    });\n    var colorAtt = colorAttObj && color(colorAttObj.eq) ? color(colorAttObj.eq).formatHex() : color(\"black\").formatHex();\n    return colorAtt;\n  }\n\n  function _getLinkStyleAtt(attrList) {\n    var styleAttObj = attrList.find(function (att) {\n      return att.id === \"style\";\n    });\n    var validStyle = [\"solid\", \"dashed\"];\n    var styleAtt = styleAttObj && validStyle.indexOf(styleAttObj.eq) !== -1 ? styleAttObj.eq : \"solid\";\n    return styleAtt;\n  }\n\n  function _getLinkDirAtt(attrList) {\n    var dirAttObj = attrList.find(function (att) {\n      return att.id === \"dir\";\n    });\n    var validDir = [\"forward\", \"none\"];\n    var dirAtt = dirAttObj && validDir.indexOf(dirAttObj.eq) !== -1 ? dirAttObj.eq : \"forward\";\n    return dirAtt;\n  }\n\n  function _createTransmissionDatafromDOT(graphDOT) {\n    var data = {\n      nodes: [],\n      links: []\n    };\n    graphDOT[0].children.forEach(function (d) {\n      if (d.type === \"node_stmt\") {\n        //process nodes\n        // node (d)={'id':d}\n        var id = d.node_id.id,\n            name = _getNodeLabelAtt(d.attr_list);\n\n        data.nodes.push({\n          id: id,\n          name: name\n        });\n      } else {\n        //process edges\n        //link (d)={'source': 'P1', 'target': 'P2', 'weight': '0.5'}\n        var source = d.edge_list[0].id,\n            target = d.edge_list[1].id,\n            weight = _getLinkWeightAtt(d.attr_list),\n            color = _getLinkColorAtt(d.attr_list),\n            dir = _getLinkDirAtt(d.attr_list),\n            style = _getLinkStyleAtt(d.attr_list);\n\n        data.links.push({\n          source: source,\n          target: target,\n          weight: weight,\n          color: color,\n          dir: dir,\n          style: style\n        });\n      }\n    });\n    return data;\n  }\n\n  try {\n    dotparser(dot);\n  } catch (e) {\n    alert(\"Invalid dot format. Error\");\n    return;\n  }\n\n  var graphdata = dotparser(dot); //console.log(graphdata);\n\n  var jsondata = _createTransmissionDatafromDOT(graphdata);\n\n  return jsondata;\n}\nexport function isTreeHasLength(treeNodes) {\n  var lengths = treeNodes.map(function (d) {\n    return d.data.length;\n  }).filter(filterUnique);\n  return lengths && lengths.length === 1 ? false : true;\n}\nexport function adjustNodesPosition(nodes) {\n  var newPosition,\n      currentNodeDepth = 0;\n  nodes.forEach(function (d) {\n    if (d.depth - currentNodeDepth === 1) {\n      currentNodeDepth = d.depth; //totalTreeLength;\n    }\n  });\n  return newPosition;\n}\nexport function treeBranchHasParrent(node) {\n  if (!node.parent) {\n    return 0;\n  } else {\n    return node.data.length + treeBranchHasParrent(node.parent);\n  }\n}\nexport function randomize(uniqArr) {\n  //in locations list, for each make random index x and y\n  //x: randomly move 5px to left or right (max 10px)\n  //y: randomly move 5px to top or bottom (max 10px)\n  //out res = {di:{x:3, y:4}, dj:{x:3, y:4}}\n  function getRandomArbitrary(min, max) {\n    return Math.random() * (max - min) + min;\n  }\n\n  var res = {};\n  uniqArr.forEach(function (d) {\n    res[d] = {\n      x: getRandomArbitrary(0.45, 0.55),\n      y: getRandomArbitrary(0.45, 0.55)\n    };\n  });\n  return res;\n}\nexport function getIsolateDataForDev(_x14, _x15, _x16, _x17) {\n  return _getIsolateDataForDev.apply(this, arguments);\n}\n\nfunction _getIsolateDataForDev() {\n  _getIsolateDataForDev = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(fileURL, loadIsolateData, setColorScale, loadSimulatedMap) {\n    var data_promise_raw, inputHeaders, data_promise, colHeaders, colHeaders_Map, species_list, location_list, sourceType_list, profile1_list, profile2_list, profile3_list, colorScale_bySpecies, colorScale_byLocation, colorScale_bySourceType, colorScale_byProfile1, colorScale_byProfile2, colorScale_byProfile3, colorbySpecies_Map, colorbyLocation_Map, colorbySourceType_Map, colorbyProfile1_Map, colorbyProfile2_Map, colorbyProfile3_Map, colorScale_init, locationRollup, childrenAccessorFn, hierarchyData, isolateData_Map;\n    return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            _context6.next = 2;\n            return csv(fileURL).then(function (result) {\n              return result;\n            });\n\n          case 2:\n            data_promise_raw = _context6.sent;\n            inputHeaders = Object.keys(data_promise_raw[0]); // no empty record or invalid format in collection date\n\n            data_promise_raw.forEach(function (d) {\n              d.isolate_name = d.isolate_name.replace(/\\s*$/, \"\");\n              d.isolate_colDate = d.isolate_colDate.replace(/\\s*$/, \"\");\n              d.isolate_sourceType = d.isolate_sourceType.replace(/\\s*$/, \"\");\n              d.isolate_sourceName = d.isolate_sourceName.replace(/\\s*$/, \"\");\n              d.isolate_species = d.isolate_species.replace(/\\s*$/, \"\");\n              d.isolate_colLocation = d.isolate_colLocation.replace(/\\s*$/, \"\");\n\n              if (isoDateParser(d.isolate_colDate)) {\n                d[\"uid\"] = d.isolate_name;\n                d.isolate_colDate = isoDateParser(d.isolate_colDate);\n              } else {}\n            });\n            data_promise = data_promise_raw.map(function (d) {\n              return {\n                uid: d.uid,\n                isolate_name: d.isolate_name,\n                isolate_colDate: d.isolate_colDate,\n                isolate_sourceType: d.isolate_sourceType,\n                isolate_sourceName: d.isolate_sourceName,\n                isolate_species: d.isolate_species,\n                isolate_colLocation: d.isolate_colLocation,\n                profile_1: d.profile_1,\n                profile_2: d.profile_2,\n                profile_3: d.profile_3\n              };\n            }); // Create initial color table =====================================\n            // check and extract user defined color in the metadata\n\n            colHeaders = [];\n            inputHeaders.forEach(function (header) {\n              if (header.split(\":\")[1] === \"color\") {\n                var headerColorObj = {\n                  headerName: header,\n                  isHeaderHasColor: true\n                };\n                colHeaders.push(headerColorObj);\n              }\n            });\n            colHeaders_Map = new Map();\n            colHeaders.forEach(function (d) {\n              colHeaders_Map.set(d.headerName, d);\n            });\n            species_list = data_promise.map(function (d) {\n              return d.isolate_species;\n            }).filter(filterUnique);\n            location_list = data_promise.map(function (d) {\n              return d.isolate_colLocation;\n            }).filter(filterUnique);\n            sourceType_list = data_promise.map(function (d) {\n              return d.isolate_sourceType;\n            }).filter(filterUnique);\n            profile1_list = data_promise.map(function (d) {\n              return d.profile_1;\n            }).filter(filterUnique);\n            profile2_list = data_promise.map(function (d) {\n              return d.profile_2;\n            }).filter(filterUnique);\n            profile3_list = data_promise.map(function (d) {\n              return d.profile_3;\n            }).filter(filterUnique); // is predefined color for species true? if so extract the color (metadata, column name), if no generate initial color\n\n            colorScale_bySpecies = colHeaders_Map.get(\"isolate_species:color\") ? getUserDefinedColor(data_promise_raw, species_list, \"isolate_species\", \"isolate_species:color\") : colorOrdinalInterpolator(species_list, d3Chroma.interpolateRdYlBu);\n            colorScale_byLocation = colHeaders_Map.get(\"isolate_colLocation:color\") ? getUserDefinedColor(data_promise_raw, location_list, \"isolate_colLocation\", \"isolate_colLocation:color\") : colorOrdinalInterpolator(location_list, d3Chroma.interpolateSpectral);\n            colorScale_bySourceType = colHeaders_Map.get(\"isolate_sourceType:color\") ? getUserDefinedColor(data_promise_raw, sourceType_list, \"isolate_sourceType\", \"isolate_sourceType:color\") : colorOrdinalInterpolator(sourceType_list, d3Chroma.interpolateSpectral);\n            colorScale_byProfile1 = colHeaders_Map.get(\"profile_1:color\") ? getUserDefinedColor(data_promise_raw, profile1_list, \"profile_1\", \"profile_1:color\") : colorOrdinalInterpolator(profile1_list, d3Chroma.interpolateViridis);\n            colorScale_byProfile2 = colHeaders_Map.get(\"profile_2:color\") ? getUserDefinedColor(data_promise_raw, profile2_list, \"profile_2\", \"profile_2:color\") : colorOrdinalInterpolator(profile2_list, d3Chroma.interpolateViridis);\n            colorScale_byProfile3 = colHeaders_Map.get(\"profile_3:color\") ? getUserDefinedColor(data_promise_raw, profile1_list, \"profile_3\", \"profile_3:color\") : colorOrdinalInterpolator(profile3_list, d3Chroma.interpolateViridis);\n            colorbySpecies_Map = new Map();\n            species_list.forEach(function (d) {\n              colorbySpecies_Map.set(d, colorScale_bySpecies(d));\n            });\n            colorbyLocation_Map = new Map();\n            location_list.forEach(function (d) {\n              colorbyLocation_Map.set(d, colorScale_byLocation(d));\n            });\n            colorbySourceType_Map = new Map();\n            sourceType_list.forEach(function (d) {\n              colorbySourceType_Map.set(d, colorScale_bySourceType(d));\n            });\n            colorbyProfile1_Map = new Map();\n            profile1_list.forEach(function (d) {\n              colorbyProfile1_Map.set(d, colorScale_byProfile1(d));\n            });\n            colorbyProfile2_Map = new Map();\n            profile2_list.forEach(function (d) {\n              colorbyProfile2_Map.set(d, colorScale_byProfile2(d));\n            });\n            colorbyProfile3_Map = new Map();\n            profile3_list.forEach(function (d) {\n              colorbyProfile3_Map.set(d, colorScale_byProfile3(d));\n            });\n            colorScale_init = {\n              colorType: \"location\",\n              byLocation: colorbyLocation_Map,\n              bySpecies: colorbySpecies_Map,\n              bySourceType: colorbySourceType_Map,\n              byProfile1: colorbyProfile1_Map,\n              byProfile2: colorbyProfile2_Map,\n              byProfile3: colorbyProfile3_Map,\n              byLocation_ori: colorbyLocation_Map,\n              bySpecies_ori: colorbySpecies_Map,\n              bySourceType_ori: colorbySourceType_Map,\n              byProfile1_ori: colorbyProfile1_Map,\n              byProfile2_ori: colorbyProfile2_Map,\n              byProfile3_ori: colorbyProfile3_Map\n            }; // make simulated map ================================================#########\n\n            locationRollup = rollup(data_promise, function (d) {\n              return d.length;\n            }, function (d) {\n              return d.isolate_colLocation;\n            });\n\n            childrenAccessorFn = function childrenAccessorFn(_ref5) {\n              var _ref6 = _slicedToArray(_ref5, 2),\n                  value = _ref6[1];\n\n              return value.size && Array.from(value);\n            };\n\n            hierarchyData = hierarchy([null, locationRollup], childrenAccessorFn).sum(function (_ref7) {\n              var _ref8 = _slicedToArray(_ref7, 2),\n                  value = _ref8[1];\n\n              return value;\n            }).sort(function (a, b) {\n              return b.value - a.value;\n            }); //=========================================================================\n            //When all pass validation test, send to store\n            //Convert isolateDate into Map\n\n            isolateData_Map = new Map();\n            data_promise.forEach(function (d) {\n              isolateData_Map.set(d.uid, d);\n            }); //console.log(colorScale_byLocation.domain());\n\n            loadIsolateData(isolateData_Map);\n            loadSimulatedMap(hierarchyData);\n            setColorScale(colorScale_init);\n\n          case 43:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee6);\n  }));\n  return _getIsolateDataForDev.apply(this, arguments);\n}\n\nexport var brushResizePath = function brushResizePath(d, temporalbar_h) {\n  var e = +(d.type === \"e\"),\n      x = e ? 1 : -1,\n      y = temporalbar_h / 6;\n  return \"M\" + 0.5 * x + \",\" + y + \"A6,6 0 0 \" + e + \" \" + 6.5 * x + \",\" + (y + 6) + \"V\" + (2 * y - 6) + \"A6,6 0 0 \" + e + \" \" + 0.5 * x + \",\" + 2 * y + \"Z\" + \"M\" + 2.5 * x + \",\" + (y + 8) + \"V\" + (2 * y - 8) + \"M\" + 4.5 * x + \",\" + (y + 8) + \"V\" + (2 * y - 8);\n};\nexport function computeQuadraticCurve(p1x, p1y, p2x, p2y, offset) {\n  // mid-point of line:\n  var mpx = (p2x + p1x) * 0.5;\n  var mpy = (p2y + p1y) * 0.5; // angle of perpendicular to line:\n\n  var theta = Math.atan2(p2y - p1y, p2x - p1x) - Math.PI / 2; // offset: distance of control point from mid-point of line:\n  // location of control point:\n\n  var c1x = mpx + offset * Math.cos(theta);\n  var c1y = mpy + offset * Math.sin(theta);\n  return [c1x, c1y];\n}\nexport function getUserDefinedColor(metadataTable, domainList, headerName, headerNameColor) {\n  var colorList = [];\n  domainList.forEach(function (d) {\n    var rec = metadataTable.find(function (e) {\n      return e[headerName] === d;\n    }); //console.log(rec[headerNameColor]);\n\n    var userCol = rec && color(rec[headerNameColor]) ? color(rec[headerNameColor]) : color(\"Black\");\n    colorList.push(userCol);\n  });\n  var colorScale = scaleOrdinal().domain(domainList).range(colorList);\n  return colorScale;\n}\nexport function removeAllChildFromNode(elem) {\n  var e = document.querySelector(elem);\n  var first = e.firstElementChild;\n\n  while (first) {\n    first.remove();\n    first = e.firstElementChild;\n  }\n}\nexport function capitalizeFirstLetter(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\nexport function downloadSVG(id) {\n  //const svgsaver = new SVGSaver();\n  var svg_node = document.querySelector(\"#\".concat(id));\n  var XMLS = new XMLSerializer();\n\n  if (id === \"summary-piechart\") {\n    svg_node = document.querySelector(\"#\".concat(id, \" svg\"));\n  }\n\n  var svgString = XMLS.serializeToString(svg_node);\n  downloadFileAsText(\"HAIviz-\".concat(id, \".svg\"), svgString); // const svg_node = document.querySelector(\"#\" + id);\n  // let XMLS = new XMLSerializer();\n  // let svgString = XMLS.serializeToString(svg_node);\n  // downloadFileAsText(`HAIviz-${id}.svg`, svgString);\n  //svgsaver.asSvg(svg_node, `HAIviz-${id}.svg`);\n}\nexport function parseDOTtoCytoscape(dot) {\n  function _getNodeLabelAtt(attrList) {\n    var nameAttObj = attrList.find(function (att) {\n      return att.id === \"name\";\n    });\n    var nameAtt = nameAttObj && nameAttObj.eq ? String(nameAttObj.eq) : null;\n    return nameAtt;\n  }\n\n  function _getLinkWeightAtt(attrList) {\n    var weightAttObj = attrList.find(function (att) {\n      return att.id === \"weight\";\n    });\n    var weightAtt = weightAttObj && weightAttObj.eq && weightAttObj.eq !== \"null\" ? parseFloat(weightAttObj.eq).toFixed(2) : null;\n    return weightAtt;\n  }\n\n  function _getLinkColorAtt(attrList) {\n    var colorAttObj = attrList.find(function (att) {\n      return att.id === \"color\";\n    });\n    var colorAtt = colorAttObj && color(colorAttObj.eq) ? color(colorAttObj.eq).formatHex() : color(\"black\").formatHex();\n    return colorAtt;\n  }\n\n  function _getLinkStyleAtt(attrList) {\n    var styleAttObj = attrList.find(function (att) {\n      return att.id === \"style\";\n    });\n    var validStyle = [\"solid\", \"dashed\"];\n    var styleAtt = styleAttObj && validStyle.indexOf(styleAttObj.eq) !== -1 ? styleAttObj.eq : \"solid\";\n    return styleAtt;\n  }\n\n  function _getLinkDirAtt(attrList) {\n    var dirAttObj = attrList.find(function (att) {\n      return att.id === \"dir\";\n    });\n    var validDir = [\"forward\", \"none\"];\n    var dirAtt = dirAttObj && validDir.indexOf(dirAttObj.eq) !== -1 ? dirAttObj.eq : \"forward\";\n    return dirAtt;\n  }\n\n  function _createTransmissionDatafromDOT(graphDOT) {\n    //get directed or undirected\n    var graphType = graphDOT[0].type; //var data = { nodes: [], links: [] };\n\n    var data_cy = [];\n    var node_labels = [];\n    graphDOT[0].children.forEach(function (d) {\n      if (d.type === \"node_stmt\") {\n        var id = d.node_id.id;\n\n        var nodeName = _getNodeLabelAtt(d.attr_list);\n\n        var name = nodeName ? nodeName : id;\n        node_labels.push(name);\n        data_cy.push({\n          data: {\n            id: id,\n            label: name\n          }\n        });\n      } else {\n        //process edges\n        //link (d)={'source': 'P1', 'target': 'P2', 'weight': '0.5'}\n        var source = d.edge_list[0].id;\n        var target = d.edge_list[1].id;\n\n        var weight = _getLinkWeightAtt(d.attr_list);\n\n        var _color = _getLinkColorAtt(d.attr_list);\n\n        var dir = graphType === \"graph\" ? \"none\" : _getLinkDirAtt(d.attr_list);\n\n        var style = _getLinkStyleAtt(d.attr_list);\n\n        data_cy.push({\n          data: {\n            source: source,\n            target: target,\n            weight: weight,\n            color: _color,\n            dir: dir,\n            style: style\n          }\n        });\n      }\n    });\n    var graphObj = {\n      nodeLabels: node_labels,\n      data: data_cy\n    };\n    return graphObj;\n  }\n\n  try {\n    dotparser(dot);\n    var graphdata = dotparser(dot);\n\n    var jsondata = _createTransmissionDatafromDOT(graphdata);\n\n    return jsondata;\n  } catch (e) {\n    alert(\"Invalid dot format. Error\");\n    return;\n  }\n}\nexport function isIsolateOrHost(nodeLabels, isolateNames, sourceNames) {\n  var res = null;\n  var intersectIsolatesAndLabels = isolateNames.filter(function (x) {\n    return nodeLabels.includes(x);\n  });\n  var intersectHostsAndLabels = sourceNames.filter(function (x) {\n    return nodeLabels.includes(x);\n  });\n\n  if (intersectIsolatesAndLabels.length / isolateNames.length * 100 >= 5) {\n    res = \"isolate\";\n  } else {\n    if (intersectHostsAndLabels.length / sourceNames.length * 100 >= 5) {\n      res = \"host\";\n    } else {\n      res = null;\n    }\n  }\n\n  return res;\n}\n/* SAVE IT FOR LATER\n================================================================================\n\n*/","map":{"version":3,"sources":["/Volumes/DATA/BUDI/APP_DEV/haiviz-v04/src/utils/utils.js"],"names":["csv","text","xml","hierarchy","dotparser","scaleOrdinal","scaleSequential","d3Chroma","rollup","Moment","extendMoment","color","moment","_","require","xmlJSconvert","d3","getIsolateDataHeader","key","getColorTypeTitle","colorOrdinalInterpolator","domainList","d3ChromaInterpolator","domainInterpolator","domain","length","interpolator","colorList","i","push","colorScale","range","generateColor","res","forEach","d","formatTime","timeFormat","timeFormatting","isoDateParser","utcParse","dateToString_ddmmYYYY","dateToStringIS08601","formatWeekOfYear","formatWeekISO8601","childrenAccessorFn","value","size","Array","from","getIsolateData","fileURL","loadIsolateData","setColorScale","loadSimulatedMap","setisLoading","then","result","data_promise_raw","validHeaders","inputHeaders","Object","keys","header_is_valid","item","indexOf","alert","isolate_name","countBy","duplicatedRecords","map","name","count","filter","JSON","stringify","isolate_name_empty","isolate_date_invalid","replace","isolate_colDate","isolate_sourceType","isolate_sourceName","isolate_species","isolate_colLocation","data_promise","uid","profile_1","profile_2","profile_3","colHeaders","header","split","headerColorObj","headerName","isHeaderHasColor","colHeaders_Map","Map","set","species_list","filterUnique","location_list","sourceType_list","profile1_list","profile2_list","profile3_list","colorScale_bySpecies","get","getUserDefinedColor","interpolateRdYlBu","colorScale_byLocation","interpolateSpectral","colorScale_bySourceType","colorScale_byProfile1","interpolateViridis","colorScale_byProfile2","colorScale_byProfile3","colorbySpecies_Map","formatHex","colorbyLocation_Map","colorbySourceType_Map","colorbyProfile1_Map","colorbyProfile2_Map","colorbyProfile3_Map","colorScale_init","colorType","byLocation","bySpecies","bySourceType","byProfile1","byProfile2","byProfile3","byLocation_ori","bySpecies_ori","bySourceType_ori","byProfile1_ori","byProfile2_ori","byProfile3_ori","locationRollup","hierarchyData","sum","sort","a","b","isolateData_Map","parseXML","dispatchDataToStore","parseTree","treeLayout","parseGraph","graph_promise","graph","parseDOTtoCytoscape","parseMovement","date_invalid","start_date","end_date","source_name","getMapLocationData","mapDataNode","serializedMapData","XMLSerializer","serializeToString","locationDataObj","xml2js","compact","spaces","locationData","mapdata","location","_attributes","x","y","locationData_Map","getRandomIntInclusive","min","max","Math","ceil","floor","random","getColorScale","colorScaleState","getColumnNameByColorType","getColorScaleByObject","obj","getColorScaleByObjectAndColType","colType","getIsolateCompositionByCategory","category","isolateData","cloneDeep","values","data","species_count","_id","id","label","categoryLength","source_count","location_count","profile1_count","profile2_count","profile3_count","downloadFileAsText","filename","element","document","createElement","setAttribute","encodeURIComponent","style","display","body","appendChild","click","removeChild","index","self","getDatafromChildren","childrenList","meta","tree_rightAngleDiagonal","projection","path","pathData","diagonal","diagonalPath","source","target","tree_scaleBranchLengths","nodes","w","visitPreOrder","root","callback","children","node","rootDist","parent","rootDists","n","yscale","scaleLinear","tree_pathGenerator","tree_path","el","sortNumber","parseDOTtoJSON","dot","_getNodeLabelAtt","attrList","nameAttObj","find","att","nameAtt","eq","String","_getLinkWeightAtt","weightAttObj","weightAtt","parseFloat","_getLinkColorAtt","colorAttObj","colorAtt","_getLinkStyleAtt","styleAttObj","validStyle","styleAtt","_getLinkDirAtt","dirAttObj","validDir","dirAtt","_createTransmissionDatafromDOT","graphDOT","links","type","node_id","attr_list","edge_list","weight","dir","e","graphdata","jsondata","isTreeHasLength","treeNodes","lengths","adjustNodesPosition","newPosition","currentNodeDepth","depth","treeBranchHasParrent","randomize","uniqArr","getRandomArbitrary","getIsolateDataForDev","brushResizePath","temporalbar_h","computeQuadraticCurve","p1x","p1y","p2x","p2y","offset","mpx","mpy","theta","atan2","PI","c1x","cos","c1y","sin","metadataTable","headerNameColor","rec","userCol","removeAllChildFromNode","elem","querySelector","first","firstElementChild","remove","capitalizeFirstLetter","string","charAt","toUpperCase","slice","downloadSVG","svg_node","XMLS","svgString","toFixed","graphType","data_cy","node_labels","nodeName","graphObj","nodeLabels","isIsolateOrHost","isolateNames","sourceNames","intersectIsolatesAndLabels","includes","intersectHostsAndLabels"],"mappings":"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","sourcesContent":["import { csv, text, xml } from \"d3-fetch\";\nimport { hierarchy } from \"d3-hierarchy\";\nimport dotparser from \"dotparser\";\nimport { scaleOrdinal, scaleSequential } from \"d3-scale\";\nimport * as d3Chroma from \"d3-scale-chromatic\";\nimport { rollup } from \"d3-array\";\nimport Moment from \"moment\";\nimport { extendMoment } from \"moment-range\";\nimport { color } from \"d3-color\";\n//import SVGSaver from \"svgsaver\";\n\nconst moment = extendMoment(Moment);\nconst _ = require(\"lodash\");\nconst xmlJSconvert = require(\"xml-js\");\n\nconst d3 = {\n  ...require(\"d3-scale\"),\n  ...require(\"d3-selection\"),\n  ...require(\"d3-time-format\"),\n  ...require(\"d3-time\"),\n  ...require(\"d3-array\"),\n};\n\n// ============================ TABLE DATA UTIL  =============================\nexport function getIsolateDataHeader(key) {\n  switch (key) {\n    case \"isolate_name\":\n      return \"Name\";\n    case \"isolate_species\":\n      return \"Species\";\n    case \"isolate_sourceName\":\n      return \"Source name\";\n    case \"isolate_sourceType\":\n      return \"Source type\";\n    case \"isolate_colLocation\":\n      return \"Collection location\";\n    case \"isolate_colDate\":\n      return \"Collection date\";\n    case \"profile_1\":\n      return \"Profile 1\";\n    case \"profile_2\":\n      return \"Profile 2\";\n    case \"profile_3\":\n      return \"Profile 3\";\n    default:\n      return null;\n  }\n}\n\nexport function getColorTypeTitle(key) {\n  switch (key) {\n    case \"species\":\n      return \"Species\";\n    case \"sourceType\":\n      return \"Source type\";\n    case \"location\":\n      return \"Location\";\n    case \"profile1\":\n      return \"Profile 1\";\n    case \"profile2\":\n      return \"Profile 2\";\n    case \"profile3\":\n      return \"Profile 3\";\n    default:\n      return null;\n  }\n}\n\nexport function colorOrdinalInterpolator(domainList, d3ChromaInterpolator) {\n  //domainList: [locA, locB, locC]\n  //d3ChromaInterpolator: d3.InterpolateSpectral\n  //return a function (interpolator) from a given domain and d3 interpolator\n  var domainInterpolator = scaleSequential()\n    .domain([0, domainList.length])\n    .interpolator(d3ChromaInterpolator);\n  var colorList = [];\n  for (var i = 0; i < domainList.length; i++) {\n    colorList.push(domainInterpolator(i));\n  }\n  var colorScale = scaleOrdinal()\n    .domain(domainList)\n    .range(colorList);\n  return colorScale;\n}\n\nexport function generateColor(domainList) {\n  //in: list;[patA, patB, ...]\n  //out: obj; {patA:#colIdx, patB:#colIdx, ...}\n  var res = {},\n    interpolator = colorOrdinalInterpolator(domainList);\n\n  domainList.forEach(function(d) {\n    res[d] = interpolator(d);\n  });\n\n  return res;\n}\n// ============================ TIME-RELATED UTIL  =============================\n// TODO: Change later to moment approach for consistancy\nexport const formatTime = d3.timeFormat(\"%d %b %Y\");\nexport const timeFormatting = d3.timeFormat(\"%d/%B/%Y\");\nexport const isoDateParser = d3.utcParse(\"%Y-%m-%d\");\nexport const dateToString_ddmmYYYY = d3.timeFormat(\"%d %b %Y\");\nexport const dateToStringIS08601 = d3.timeFormat(\"%Y-%m-%d\");\nexport const formatWeekOfYear = d3.timeFormat(\"%Y-%V\");\nexport const formatWeekISO8601 = d3.timeFormat(\"%V\");\n\n// =========================== INPUT-RELATED UTIL ==============================\nexport const childrenAccessorFn = ([, value]) => {\n  return value.size && Array.from(value);\n};\n\nexport async function getIsolateData(\n  fileURL,\n  loadIsolateData,\n  setColorScale,\n  loadSimulatedMap,\n  setisLoading\n) {\n  let data_promise_raw = await csv(fileURL).then(function(result) {\n    return result;\n  });\n  const validHeaders = [\n    \"isolate_name\",\n    \"isolate_species\",\n    \"isolate_colDate\",\n    \"isolate_colLocation\",\n    \"isolate_sourceType\",\n    \"isolate_sourceName\",\n    \"profile_1\",\n    \"profile_2\",\n    \"profile_3\",\n  ];\n  const inputHeaders = Object.keys(data_promise_raw[0]);\n  let header_is_valid = true;\n  validHeaders.forEach((item) => {\n    if (inputHeaders.indexOf(item) === -1) {\n      header_is_valid = false;\n    }\n  });\n\n  if (!header_is_valid) {\n    alert(\"Invalid headers\");\n    setisLoading(false);\n    return;\n  }\n\n  // no duplicate in isolate name\n  const isolate_name = _.countBy(data_promise_raw, \"isolate_name\");\n  const duplicatedRecords = Object.keys(isolate_name)\n    .map((key) => {\n      return { name: key, count: isolate_name[key] };\n    })\n    .filter((d) => d.count > 1);\n\n  if (duplicatedRecords.length > 0) {\n    alert(\n      \"Invalid data: duplicate record in column isolate name:\" +\n        `${JSON.stringify(duplicatedRecords)}`\n    );\n    setisLoading(false);\n    return;\n  }\n\n  // no empty record in isolate_name\n  const isolate_name_empty = isolate_name[\"\"] ? true : false;\n\n  if (isolate_name_empty) {\n    alert(\"Invalid data: column isolate_name contain empty record\");\n    setisLoading(false);\n    return;\n  }\n\n  //console.log(data_promise_raw);\n\n  // no empty record or invalid format in collection date\n  let isolate_date_invalid = false;\n  data_promise_raw.forEach(function(d) {\n    d.isolate_name = d.isolate_name.replace(/\\s*$/, \"\");\n    d.isolate_colDate = d.isolate_colDate.replace(/\\s*$/, \"\");\n    d.isolate_sourceType = d.isolate_sourceType.replace(/\\s*$/, \"\");\n    d.isolate_sourceName = d.isolate_sourceName.replace(/\\s*$/, \"\");\n    d.isolate_species = d.isolate_species.replace(/\\s*$/, \"\");\n    d.isolate_colLocation = d.isolate_colLocation.replace(/\\s*$/, \"\");\n    if (isoDateParser(d.isolate_colDate)) {\n      d[\"uid\"] = d.isolate_name;\n      d.isolate_colDate = isoDateParser(d.isolate_colDate);\n    } else {\n      isolate_date_invalid = true;\n    }\n  });\n\n  let data_promise = data_promise_raw.map((d) => {\n    return {\n      uid: d.uid,\n      isolate_name: d.isolate_name,\n      isolate_colDate: d.isolate_colDate,\n      isolate_sourceType: d.isolate_sourceType,\n      isolate_sourceName: d.isolate_sourceName,\n      isolate_species: d.isolate_species,\n      isolate_colLocation: d.isolate_colLocation,\n      profile_1: d.profile_1,\n      profile_2: d.profile_2,\n      profile_3: d.profile_3,\n    };\n  });\n\n  if (isolate_date_invalid) {\n    alert(\"Invalid data: wrong date format in column collection date\");\n    setisLoading(false);\n    return;\n  }\n  // Create initial color table =====================================\n  // check and extract user defined color in the metadata\n  let colHeaders = [];\n  inputHeaders.forEach((header) => {\n    if (header.split(\":\")[1] === \"color\") {\n      let headerColorObj = {\n        headerName: header,\n        isHeaderHasColor: true,\n      };\n      colHeaders.push(headerColorObj);\n    }\n  });\n  let colHeaders_Map = new Map();\n  colHeaders.forEach((d) => {\n    colHeaders_Map.set(d.headerName, d);\n  });\n\n  let species_list = data_promise\n    .map((d) => d.isolate_species)\n    .filter(filterUnique);\n  let location_list = data_promise\n    .map((d) => d.isolate_colLocation)\n    .filter(filterUnique);\n  let sourceType_list = data_promise\n    .map((d) => d.isolate_sourceType)\n    .filter(filterUnique);\n  let profile1_list = data_promise.map((d) => d.profile_1).filter(filterUnique);\n  let profile2_list = data_promise.map((d) => d.profile_2).filter(filterUnique);\n  let profile3_list = data_promise.map((d) => d.profile_3).filter(filterUnique);\n\n  // is predefined color for species true? if so extract the color (metadata, column name), if no generate initial color\n  const colorScale_bySpecies = colHeaders_Map.get(\"isolate_species:color\")\n    ? getUserDefinedColor(\n        data_promise_raw,\n        species_list,\n        \"isolate_species\",\n        \"isolate_species:color\"\n      )\n    : colorOrdinalInterpolator(species_list, d3Chroma.interpolateRdYlBu);\n\n  const colorScale_byLocation = colHeaders_Map.get(\"isolate_colLocation:color\")\n    ? getUserDefinedColor(\n        data_promise_raw,\n        location_list,\n        \"isolate_colLocation\",\n        \"isolate_colLocation:color\"\n      )\n    : colorOrdinalInterpolator(location_list, d3Chroma.interpolateSpectral);\n\n  const colorScale_bySourceType = colHeaders_Map.get(\"isolate_sourceType:color\")\n    ? getUserDefinedColor(\n        data_promise_raw,\n        sourceType_list,\n        \"isolate_sourceType\",\n        \"isolate_sourceType:color\"\n      )\n    : colorOrdinalInterpolator(sourceType_list, d3Chroma.interpolateSpectral);\n\n  const colorScale_byProfile1 = colHeaders_Map.get(\"profile_1:color\")\n    ? getUserDefinedColor(\n        data_promise_raw,\n        profile1_list,\n        \"profile_1\",\n        \"profile_1:color\"\n      )\n    : colorOrdinalInterpolator(profile1_list, d3Chroma.interpolateViridis);\n\n  const colorScale_byProfile2 = colHeaders_Map.get(\"profile_2:color\")\n    ? getUserDefinedColor(\n        data_promise_raw,\n        profile2_list,\n        \"profile_2\",\n        \"profile_2:color\"\n      )\n    : colorOrdinalInterpolator(profile2_list, d3Chroma.interpolateViridis);\n\n  const colorScale_byProfile3 = colHeaders_Map.get(\"profile_3:color\")\n    ? getUserDefinedColor(\n        data_promise_raw,\n        profile3_list,\n        \"profile_3\",\n        \"profile_3:color\"\n      )\n    : colorOrdinalInterpolator(profile3_list, d3Chroma.interpolateViridis);\n\n  let colorbySpecies_Map = new Map();\n  species_list.forEach((d) => {\n    colorbySpecies_Map.set(d, color(colorScale_bySpecies(d)).formatHex());\n  });\n  let colorbyLocation_Map = new Map();\n  location_list.forEach((d) => {\n    colorbyLocation_Map.set(d, color(colorScale_byLocation(d)).formatHex());\n  });\n  let colorbySourceType_Map = new Map();\n  sourceType_list.forEach((d) => {\n    colorbySourceType_Map.set(d, color(colorScale_bySourceType(d)).formatHex());\n  });\n  let colorbyProfile1_Map = new Map();\n  profile1_list.forEach((d) => {\n    colorbyProfile1_Map.set(d, color(colorScale_byProfile1(d)).formatHex());\n  });\n  let colorbyProfile2_Map = new Map();\n  profile2_list.forEach((d) => {\n    colorbyProfile2_Map.set(d, color(colorScale_byProfile2(d)).formatHex());\n  });\n  let colorbyProfile3_Map = new Map();\n  profile3_list.forEach((d) => {\n    colorbyProfile3_Map.set(d, color(colorScale_byProfile3(d)).formatHex());\n  });\n  const colorScale_init = {\n    colorType: \"location\",\n    byLocation: colorbyLocation_Map,\n    bySpecies: colorbySpecies_Map,\n    bySourceType: colorbySourceType_Map,\n    byProfile1: colorbyProfile1_Map,\n    byProfile2: colorbyProfile2_Map,\n    byProfile3: colorbyProfile3_Map,\n    byLocation_ori: colorbyLocation_Map,\n    bySpecies_ori: colorbySpecies_Map,\n    bySourceType_ori: colorbySourceType_Map,\n    byProfile1_ori: colorbyProfile1_Map,\n    byProfile2_ori: colorbyProfile2_Map,\n    byProfile3_ori: colorbyProfile3_Map,\n  };\n  // make simulated map ================================================#########\n  const locationRollup = rollup(\n    data_promise,\n    (d) => d.length,\n    (d) => d.isolate_colLocation\n  );\n  const hierarchyData = hierarchy([null, locationRollup], childrenAccessorFn)\n    .sum(([, value]) => value)\n    .sort((a, b) => b.value - a.value);\n  //console.log(hierarchyData);\n  //=========================================================================\n  //When all pass validation test, send to store\n  //Convert isolateDate into Map\n  let isolateData_Map = new Map();\n  data_promise.forEach((d) => {\n    isolateData_Map.set(d.uid, d);\n  });\n\n  //console.log(colorScale_byLocation.domain());\n  loadIsolateData(isolateData_Map);\n  loadSimulatedMap(hierarchyData);\n  setColorScale(colorScale_init);\n}\n\nexport async function parseXML(fileURL, dispatchDataToStore) {\n  let data_promise = await xml(fileURL).then(function(result) {\n    return result;\n  });\n  dispatchDataToStore(data_promise);\n}\nexport async function parseTree(fileURL, dispatchDataToStore) {\n  let data_promise = await text(fileURL).then(function(result) {\n    return result;\n  });\n  //const phylotree = newickParse(data_promise);\n  // const treeLayout = hierarchy(phylotree, d => d.branchset).sum(d =>\n  //   d.branchset ? 0 : 1\n  // );\n  const treeLayout = data_promise;\n  dispatchDataToStore(treeLayout);\n}\nexport async function parseGraph(fileURL, dispatchDataToStore) {\n  //TODO: Make sure graph has name attribute\n  let graph_promise = await text(fileURL).then(function(result) {\n    return result;\n  });\n  //const graph = parseDOTtoJSON(graph_promise);\n  const graph = parseDOTtoCytoscape(graph_promise);\n  if (graph) {\n    //add layout detection here\n    //console.log(graph);\n    dispatchDataToStore(graph);\n  }\n}\n//\nexport async function parseMovement(fileURL, dispatchDataToStore) {\n  let data_promise = await csv(fileURL).then(function(result) {\n    return result;\n  });\n  const validHeaders = [\n    \"source_name\",\n    \"location_name\",\n    \"start_date\",\n    \"end_date\",\n  ];\n  const inputHeaders = Object.keys(data_promise[0]);\n  let header_is_valid = true;\n  validHeaders.forEach((item) => {\n    if (inputHeaders.indexOf(item) === -1) {\n      header_is_valid = false;\n    }\n  });\n  if (!header_is_valid) {\n    alert(\"Invalid headers\");\n    return;\n  }\n  // no empty record or invalid format on start and end date\n  let date_invalid = false;\n  data_promise.forEach(function(d) {\n    if (moment(d.start_date) && moment(d.end_date)) {\n      d.start_date = moment(d.start_date);\n      d.end_date = moment(d.end_date);\n    } else {\n      date_invalid = true;\n    }\n  });\n  if (date_invalid) {\n    alert(\"Invalid data: wrong date format in column start or end date\");\n    return;\n  }\n  data_promise.sort((a, b) => a.source_name - b.source_name);\n  dispatchDataToStore(data_promise);\n}\n\nexport const getMapLocationData = (mapDataNode) => {\n  if (mapDataNode) {\n    const serializedMapData = new XMLSerializer().serializeToString(\n      mapDataNode\n    );\n    const locationDataObj = xmlJSconvert.xml2js(serializedMapData, {\n      compact: true,\n      spaces: 0,\n    });\n    const locationData = locationDataObj.mapdata.location.map((d) => {\n      return {\n        name: d._attributes.name,\n        x: +d._attributes.x,\n        y: +d._attributes.y,\n      };\n    });\n    const locationData_Map = new Map();\n    locationData.forEach((d) => {\n      locationData_Map.set(d.name, d);\n    });\n    return locationData_Map;\n  } else {\n    return null;\n  }\n};\n// ================================= OTHERS  ===================================\nexport const getRandomIntInclusive = (min, max) => {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min; //The maximum is inclusive and the minimum is inclusive\n};\n\nexport function getColorScale(colorScaleState) {\n  switch (colorScaleState.colorType) {\n    case \"species\":\n      return colorScaleState.bySpecies;\n    case \"location\":\n      return colorScaleState.byLocation;\n    case \"sourceType\":\n      return colorScaleState.bySourceType;\n    case \"profile1\":\n      return colorScaleState.byProfile1;\n    case \"profile2\":\n      return colorScaleState.byProfile2;\n    case \"profile3\":\n      return colorScaleState.byProfile3;\n\n    default:\n      return colorScaleState.byLocation;\n  }\n}\n\nexport function getColumnNameByColorType(d, colorType) {\n  switch (colorType) {\n    case \"species\":\n      return d.isolate_species;\n    case \"location\":\n      return d.isolate_colLocation;\n    case \"sourceType\":\n      return d.isolate_sourceType;\n    case \"profile1\":\n      return d.profile_1;\n    case \"profile2\":\n      return d.profile_2;\n    case \"profile3\":\n      return d.profile_3;\n\n    default:\n      return d.isolate_colLocation;\n  }\n}\n\nexport function getColorScaleByObject(obj, colorScaleState) {\n  if (obj) {\n    switch (colorScaleState.colorType) {\n      case \"species\":\n        return colorScaleState.bySpecies.get(obj.isolate_species);\n      case \"location\":\n        return colorScaleState.byLocation.get(obj.isolate_colLocation);\n      case \"sourceType\":\n        return colorScaleState.bySourceType.get(obj.isolate_sourceType);\n      case \"profile1\":\n        return colorScaleState.byProfile1.get(obj.profile_1);\n      case \"profile2\":\n        return colorScaleState.byProfile2.get(obj.profile_2);\n      case \"profile3\":\n        return colorScaleState.byProfile3.get(obj.profile_3);\n\n      default:\n        return colorScaleState.byLocation.get(obj.isolate_colLocation);\n    }\n  } else {\n    return \"black\";\n  }\n}\n\nexport function getColorScaleByObjectAndColType(obj, colorScaleState, colType) {\n  if (obj) {\n    switch (colType) {\n      case \"species\":\n        return colorScaleState.bySpecies.get(obj.isolate_species);\n      case \"location\":\n        return colorScaleState.byLocation.get(obj.isolate_colLocation);\n      case \"sourceType\":\n        return colorScaleState.bySourceType.get(obj.isolate_sourceType);\n      case \"profile1\":\n        return colorScaleState.byProfile1.get(obj.profile_1);\n      case \"profile2\":\n        return colorScaleState.byProfile2.get(obj.profile_2);\n      case \"profile3\":\n        return colorScaleState.byProfile3.get(obj.profile_3);\n\n      default:\n        return colorScaleState.byLocation.get(obj.isolate_colLocation);\n    }\n  } else {\n    return \"black\";\n  }\n}\n\nexport function getIsolateCompositionByCategory(category, isolateData_Map) {\n  let isolateData = _.cloneDeep(Array.from(isolateData_Map.values()));\n  let data;\n  switch (category) {\n    case \"species\":\n      let species_count = _.countBy(isolateData, (d) => {\n        return d.isolate_species;\n      });\n      data = Object.keys(species_count).map((key) => ({\n        _id: key,\n        id: key,\n        label: key,\n        value: species_count[key],\n      }));\n      return { categoryLength: Object.keys(species_count).length, data: data };\n    case \"sourceType\":\n      let source_count = _.countBy(isolateData, (d) => {\n        return d.isolate_sourceType;\n      });\n      data = Object.keys(source_count).map((key) => ({\n        _id: key,\n        id: key,\n        label: key,\n        value: source_count[key],\n      }));\n      return { categoryLength: Object.keys(source_count).length, data: data };\n    case \"location\":\n      let location_count = _.countBy(isolateData, (d) => {\n        return d.isolate_colLocation;\n      });\n      data = Object.keys(location_count).map((key) => ({\n        _id: key,\n        id: key,\n        label: key,\n        value: location_count[key],\n      }));\n      return { categoryLength: Object.keys(location_count).length, data: data };\n\n    case \"profile1\":\n      let profile1_count = _.countBy(isolateData, (d) => {\n        return d.profile_1;\n      });\n      data = Object.keys(profile1_count).map((key) => ({\n        _id: key,\n        id: key,\n        label: key,\n        value: profile1_count[key],\n      }));\n      return { categoryLength: Object.keys(profile1_count).length, data: data };\n\n    case \"profile2\":\n      let profile2_count = _.countBy(isolateData, (d) => {\n        return d.profile_2;\n      });\n      data = Object.keys(profile2_count).map((key) => ({\n        _id: key,\n        id: key,\n        label: key,\n        value: profile2_count[key],\n      }));\n      return { categoryLength: Object.keys(profile2_count).length, data: data };\n\n    case \"profile3\":\n      let profile3_count = _.countBy(isolateData, (d) => {\n        return d.profile_3;\n      });\n      data = Object.keys(profile3_count).map((key) => ({\n        _id: key,\n        id: key,\n        label: key,\n        value: profile3_count[key],\n      }));\n      return { categoryLength: Object.keys(profile3_count).length, data: data };\n\n    default:\n      return data;\n  }\n}\n\nexport function downloadFileAsText(filename, text) {\n  let element = document.createElement(\"a\");\n  element.setAttribute(\n    \"href\",\n    \"data:text/plain;charset=utf-8,\" + encodeURIComponent(text)\n  );\n  element.setAttribute(\"download\", filename);\n\n  element.style.display = \"none\";\n  document.body.appendChild(element);\n\n  element.click();\n\n  document.body.removeChild(element);\n}\n\nexport function filterUnique(value, index, self) {\n  // filter to only unique value from a given array\n  return self.indexOf(value) === index;\n}\n\nexport function getDatafromChildren(childrenList) {\n  var res = [];\n  for (var i = 0; i < childrenList.length; i++) {\n    if (childrenList[i].meta) {\n      res.push(childrenList[i].meta);\n    }\n  }\n  //sort result by date\n  return res;\n}\n\n// phyloTree auxilarry function ============================================\nexport function tree_rightAngleDiagonal() {\n  var projection = function(d) {\n    return [d.y, d.x];\n  };\n  var path = function(pathData) {\n    return \"M\" + pathData[0] + \" \" + pathData[1] + \" \" + pathData[2];\n  };\n\n  function diagonal(diagonalPath) {\n    var source = diagonalPath.source,\n      target = diagonalPath.target,\n      pathData = [source, { x: target.x, y: source.y }, target];\n    pathData = pathData.map(projection);\n    return path(pathData);\n  }\n  return diagonal;\n}\n\nexport function tree_scaleBranchLengths(nodes, w) {\n  // Visit all nodes and adjust y pos width distance metric\n  var visitPreOrder = function(root, callback) {\n    callback(root);\n    if (root.children) {\n      for (var i = root.children.length - 1; i >= 0; i--) {\n        visitPreOrder(root.children[i], callback);\n      }\n    }\n  };\n  visitPreOrder(nodes[0], function(node) {\n    node.rootDist =\n      (node.parent ? node.parent.rootDist : 0) + (node.data.length || 0);\n  });\n\n  var rootDists = nodes.map(function(n) {\n    return n.rootDist;\n  });\n  var yscale = d3\n    .scaleLinear()\n    .domain([0, d3.max(rootDists)])\n    .range([0, w]);\n\n  visitPreOrder(nodes[0], function(node) {\n    node.y = yscale(node.rootDist);\n  });\n\n  return yscale;\n}\n\nexport function tree_pathGenerator(d) {\n  function tree_path(pathData) {\n    return \"M\" + pathData[0] + \" \" + pathData[1] + \" \" + pathData[2];\n  }\n  var source = d.source;\n  var target = d.target;\n  var pathData = [source, { x: target.x, y: source.y }, target];\n  pathData = pathData.map(function(el) {\n    return [el.y, el.x];\n  });\n  return tree_path(pathData);\n}\n\nexport function sortNumber(a, b) {\n  return a - b;\n}\n\nexport function parseDOTtoJSON(dot) {\n  function _getNodeLabelAtt(attrList) {\n    let nameAttObj = attrList.find((att) => att.id === \"name\");\n    let nameAtt = nameAttObj && nameAttObj.eq ? String(nameAttObj.eq) : null;\n    return nameAtt;\n  }\n\n  function _getLinkWeightAtt(attrList) {\n    let weightAttObj = attrList.find((att) => att.id === \"weight\");\n    let weightAtt =\n      weightAttObj && weightAttObj.eq && weightAttObj.eq !== \"null\"\n        ? parseFloat(weightAttObj.eq)\n        : null;\n\n    return weightAtt;\n  }\n\n  function _getLinkColorAtt(attrList) {\n    let colorAttObj = attrList.find((att) => att.id === \"color\");\n    let colorAtt =\n      colorAttObj && color(colorAttObj.eq)\n        ? color(colorAttObj.eq).formatHex()\n        : color(\"black\").formatHex();\n    return colorAtt;\n  }\n\n  function _getLinkStyleAtt(attrList) {\n    let styleAttObj = attrList.find((att) => att.id === \"style\");\n    let validStyle = [\"solid\", \"dashed\"];\n    let styleAtt =\n      styleAttObj && validStyle.indexOf(styleAttObj.eq) !== -1\n        ? styleAttObj.eq\n        : \"solid\";\n    return styleAtt;\n  }\n\n  function _getLinkDirAtt(attrList) {\n    let dirAttObj = attrList.find((att) => att.id === \"dir\");\n    let validDir = [\"forward\", \"none\"];\n    let dirAtt =\n      dirAttObj && validDir.indexOf(dirAttObj.eq) !== -1\n        ? dirAttObj.eq\n        : \"forward\";\n    return dirAtt;\n  }\n\n  function _createTransmissionDatafromDOT(graphDOT) {\n    var data = { nodes: [], links: [] };\n    graphDOT[0].children.forEach(function(d) {\n      if (d.type === \"node_stmt\") {\n        //process nodes\n        // node (d)={'id':d}\n        var id = d.node_id.id,\n          name = _getNodeLabelAtt(d.attr_list);\n        data.nodes.push({ id: id, name: name });\n      } else {\n        //process edges\n        //link (d)={'source': 'P1', 'target': 'P2', 'weight': '0.5'}\n        var source = d.edge_list[0].id,\n          target = d.edge_list[1].id,\n          weight = _getLinkWeightAtt(d.attr_list),\n          color = _getLinkColorAtt(d.attr_list),\n          dir = _getLinkDirAtt(d.attr_list),\n          style = _getLinkStyleAtt(d.attr_list);\n\n        data.links.push({\n          source: source,\n          target: target,\n          weight: weight,\n          color: color,\n          dir: dir,\n          style: style,\n        });\n      }\n    });\n    return data;\n  }\n  try {\n    dotparser(dot);\n  } catch (e) {\n    alert((\"Invalid dot format. Error\": e));\n    return;\n  }\n  const graphdata = dotparser(dot);\n  //console.log(graphdata);\n  const jsondata = _createTransmissionDatafromDOT(graphdata);\n\n  return jsondata;\n}\n\nexport function isTreeHasLength(treeNodes) {\n  var lengths = treeNodes.map((d) => d.data.length).filter(filterUnique);\n  return lengths && lengths.length === 1 ? false : true;\n}\n\nexport function adjustNodesPosition(nodes) {\n  var newPosition,\n    currentNodeDepth = 0;\n\n  nodes.forEach(function(d) {\n    if (d.depth - currentNodeDepth === 1) {\n      currentNodeDepth = d.depth;\n      //totalTreeLength;\n    }\n  });\n\n  return newPosition;\n}\n\nexport function treeBranchHasParrent(node) {\n  if (!node.parent) {\n    return 0;\n  } else {\n    return node.data.length + treeBranchHasParrent(node.parent);\n  }\n}\n\nexport function randomize(uniqArr) {\n  //in locations list, for each make random index x and y\n  //x: randomly move 5px to left or right (max 10px)\n  //y: randomly move 5px to top or bottom (max 10px)\n  //out res = {di:{x:3, y:4}, dj:{x:3, y:4}}\n  function getRandomArbitrary(min, max) {\n    return Math.random() * (max - min) + min;\n  }\n\n  var res = {};\n  uniqArr.forEach(function(d) {\n    res[d] = {\n      x: getRandomArbitrary(0.45, 0.55),\n      y: getRandomArbitrary(0.45, 0.55),\n    };\n  });\n  return res;\n}\n\nexport async function getIsolateDataForDev(\n  fileURL,\n  loadIsolateData,\n  setColorScale,\n  loadSimulatedMap\n) {\n  let data_promise_raw = await csv(fileURL).then(function(result) {\n    return result;\n  });\n\n  const inputHeaders = Object.keys(data_promise_raw[0]);\n\n  // no empty record or invalid format in collection date\n  data_promise_raw.forEach(function(d) {\n    d.isolate_name = d.isolate_name.replace(/\\s*$/, \"\");\n    d.isolate_colDate = d.isolate_colDate.replace(/\\s*$/, \"\");\n    d.isolate_sourceType = d.isolate_sourceType.replace(/\\s*$/, \"\");\n    d.isolate_sourceName = d.isolate_sourceName.replace(/\\s*$/, \"\");\n    d.isolate_species = d.isolate_species.replace(/\\s*$/, \"\");\n    d.isolate_colLocation = d.isolate_colLocation.replace(/\\s*$/, \"\");\n    if (isoDateParser(d.isolate_colDate)) {\n      d[\"uid\"] = d.isolate_name;\n      d.isolate_colDate = isoDateParser(d.isolate_colDate);\n    } else {\n    }\n  });\n\n  let data_promise = data_promise_raw.map((d) => {\n    return {\n      uid: d.uid,\n      isolate_name: d.isolate_name,\n      isolate_colDate: d.isolate_colDate,\n      isolate_sourceType: d.isolate_sourceType,\n      isolate_sourceName: d.isolate_sourceName,\n      isolate_species: d.isolate_species,\n      isolate_colLocation: d.isolate_colLocation,\n      profile_1: d.profile_1,\n      profile_2: d.profile_2,\n      profile_3: d.profile_3,\n    };\n  });\n\n  // Create initial color table =====================================\n  // check and extract user defined color in the metadata\n  let colHeaders = [];\n  inputHeaders.forEach((header) => {\n    if (header.split(\":\")[1] === \"color\") {\n      let headerColorObj = {\n        headerName: header,\n        isHeaderHasColor: true,\n      };\n      colHeaders.push(headerColorObj);\n    }\n  });\n  let colHeaders_Map = new Map();\n  colHeaders.forEach((d) => {\n    colHeaders_Map.set(d.headerName, d);\n  });\n\n  let species_list = data_promise\n    .map((d) => {\n      return d.isolate_species;\n    })\n    .filter(filterUnique);\n  let location_list = data_promise\n    .map((d) => {\n      return d.isolate_colLocation;\n    })\n    .filter(filterUnique);\n  let sourceType_list = data_promise\n    .map((d) => {\n      return d.isolate_sourceType;\n    })\n    .filter(filterUnique);\n  let profile1_list = data_promise\n    .map((d) => {\n      return d.profile_1;\n    })\n    .filter(filterUnique);\n  let profile2_list = data_promise\n    .map((d) => {\n      return d.profile_2;\n    })\n    .filter(filterUnique);\n  let profile3_list = data_promise\n    .map((d) => {\n      return d.profile_3;\n    })\n    .filter(filterUnique);\n\n  // is predefined color for species true? if so extract the color (metadata, column name), if no generate initial color\n  const colorScale_bySpecies = colHeaders_Map.get(\"isolate_species:color\")\n    ? getUserDefinedColor(\n        data_promise_raw,\n        species_list,\n        \"isolate_species\",\n        \"isolate_species:color\"\n      )\n    : colorOrdinalInterpolator(species_list, d3Chroma.interpolateRdYlBu);\n\n  const colorScale_byLocation = colHeaders_Map.get(\"isolate_colLocation:color\")\n    ? getUserDefinedColor(\n        data_promise_raw,\n        location_list,\n        \"isolate_colLocation\",\n        \"isolate_colLocation:color\"\n      )\n    : colorOrdinalInterpolator(location_list, d3Chroma.interpolateSpectral);\n\n  const colorScale_bySourceType = colHeaders_Map.get(\"isolate_sourceType:color\")\n    ? getUserDefinedColor(\n        data_promise_raw,\n        sourceType_list,\n        \"isolate_sourceType\",\n        \"isolate_sourceType:color\"\n      )\n    : colorOrdinalInterpolator(sourceType_list, d3Chroma.interpolateSpectral);\n\n  const colorScale_byProfile1 = colHeaders_Map.get(\"profile_1:color\")\n    ? getUserDefinedColor(\n        data_promise_raw,\n        profile1_list,\n        \"profile_1\",\n        \"profile_1:color\"\n      )\n    : colorOrdinalInterpolator(profile1_list, d3Chroma.interpolateViridis);\n\n  const colorScale_byProfile2 = colHeaders_Map.get(\"profile_2:color\")\n    ? getUserDefinedColor(\n        data_promise_raw,\n        profile2_list,\n        \"profile_2\",\n        \"profile_2:color\"\n      )\n    : colorOrdinalInterpolator(profile2_list, d3Chroma.interpolateViridis);\n\n  const colorScale_byProfile3 = colHeaders_Map.get(\"profile_3:color\")\n    ? getUserDefinedColor(\n        data_promise_raw,\n        profile1_list,\n        \"profile_3\",\n        \"profile_3:color\"\n      )\n    : colorOrdinalInterpolator(profile3_list, d3Chroma.interpolateViridis);\n\n  let colorbySpecies_Map = new Map();\n  species_list.forEach((d) => {\n    colorbySpecies_Map.set(d, colorScale_bySpecies(d));\n  });\n  let colorbyLocation_Map = new Map();\n  location_list.forEach((d) => {\n    colorbyLocation_Map.set(d, colorScale_byLocation(d));\n  });\n  let colorbySourceType_Map = new Map();\n  sourceType_list.forEach((d) => {\n    colorbySourceType_Map.set(d, colorScale_bySourceType(d));\n  });\n  let colorbyProfile1_Map = new Map();\n  profile1_list.forEach((d) => {\n    colorbyProfile1_Map.set(d, colorScale_byProfile1(d));\n  });\n  let colorbyProfile2_Map = new Map();\n  profile2_list.forEach((d) => {\n    colorbyProfile2_Map.set(d, colorScale_byProfile2(d));\n  });\n  let colorbyProfile3_Map = new Map();\n  profile3_list.forEach((d) => {\n    colorbyProfile3_Map.set(d, colorScale_byProfile3(d));\n  });\n  const colorScale_init = {\n    colorType: \"location\",\n    byLocation: colorbyLocation_Map,\n    bySpecies: colorbySpecies_Map,\n    bySourceType: colorbySourceType_Map,\n    byProfile1: colorbyProfile1_Map,\n    byProfile2: colorbyProfile2_Map,\n    byProfile3: colorbyProfile3_Map,\n    byLocation_ori: colorbyLocation_Map,\n    bySpecies_ori: colorbySpecies_Map,\n    bySourceType_ori: colorbySourceType_Map,\n    byProfile1_ori: colorbyProfile1_Map,\n    byProfile2_ori: colorbyProfile2_Map,\n    byProfile3_ori: colorbyProfile3_Map,\n  };\n  // make simulated map ================================================#########\n  const locationRollup = rollup(\n    data_promise,\n    (d) => d.length,\n    (d) => d.isolate_colLocation\n  );\n  const childrenAccessorFn = ([, value]) => {\n    return value.size && Array.from(value);\n  };\n  const hierarchyData = hierarchy([null, locationRollup], childrenAccessorFn)\n    .sum(([, value]) => value)\n    .sort((a, b) => b.value - a.value);\n\n  //=========================================================================\n  //When all pass validation test, send to store\n  //Convert isolateDate into Map\n  let isolateData_Map = new Map();\n  data_promise.forEach((d) => {\n    isolateData_Map.set(d.uid, d);\n  });\n\n  //console.log(colorScale_byLocation.domain());\n  loadIsolateData(isolateData_Map);\n  loadSimulatedMap(hierarchyData);\n  setColorScale(colorScale_init);\n}\n\nexport const brushResizePath = function(d, temporalbar_h) {\n  let e = +(d.type === \"e\"),\n    x = e ? 1 : -1,\n    y = temporalbar_h / 6;\n  return (\n    \"M\" +\n    0.5 * x +\n    \",\" +\n    y +\n    \"A6,6 0 0 \" +\n    e +\n    \" \" +\n    6.5 * x +\n    \",\" +\n    (y + 6) +\n    \"V\" +\n    (2 * y - 6) +\n    \"A6,6 0 0 \" +\n    e +\n    \" \" +\n    0.5 * x +\n    \",\" +\n    2 * y +\n    \"Z\" +\n    \"M\" +\n    2.5 * x +\n    \",\" +\n    (y + 8) +\n    \"V\" +\n    (2 * y - 8) +\n    \"M\" +\n    4.5 * x +\n    \",\" +\n    (y + 8) +\n    \"V\" +\n    (2 * y - 8)\n  );\n};\n\nexport function computeQuadraticCurve(p1x, p1y, p2x, p2y, offset) {\n  // mid-point of line:\n  let mpx = (p2x + p1x) * 0.5;\n  let mpy = (p2y + p1y) * 0.5;\n\n  // angle of perpendicular to line:\n  let theta = Math.atan2(p2y - p1y, p2x - p1x) - Math.PI / 2;\n\n  // offset: distance of control point from mid-point of line:\n\n  // location of control point:\n  let c1x = mpx + offset * Math.cos(theta);\n  let c1y = mpy + offset * Math.sin(theta);\n\n  return [c1x, c1y];\n}\n\nexport function getUserDefinedColor(\n  metadataTable,\n  domainList,\n  headerName,\n  headerNameColor\n) {\n  let colorList = [];\n  domainList.forEach((d) => {\n    let rec = metadataTable.find((e) => e[headerName] === d);\n    //console.log(rec[headerNameColor]);\n    let userCol =\n      rec && color(rec[headerNameColor])\n        ? color(rec[headerNameColor])\n        : color(\"Black\");\n    colorList.push(userCol);\n  });\n\n  let colorScale = scaleOrdinal()\n    .domain(domainList)\n    .range(colorList);\n  return colorScale;\n}\n\nexport function removeAllChildFromNode(elem) {\n  var e = document.querySelector(elem);\n  var first = e.firstElementChild;\n  while (first) {\n    first.remove();\n    first = e.firstElementChild;\n  }\n}\nexport function capitalizeFirstLetter(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\nexport function downloadSVG(id) {\n  //const svgsaver = new SVGSaver();\n  let svg_node = document.querySelector(`#${id}`);\n  let XMLS = new XMLSerializer();\n  if (id === \"summary-piechart\") {\n    svg_node = document.querySelector(`#${id} svg`);\n  }\n  let svgString = XMLS.serializeToString(svg_node);\n  downloadFileAsText(`HAIviz-${id}.svg`, svgString);\n\n  // const svg_node = document.querySelector(\"#\" + id);\n\n  // let XMLS = new XMLSerializer();\n  // let svgString = XMLS.serializeToString(svg_node);\n  // downloadFileAsText(`HAIviz-${id}.svg`, svgString);\n  //svgsaver.asSvg(svg_node, `HAIviz-${id}.svg`);\n}\n\nexport function parseDOTtoCytoscape(dot) {\n  function _getNodeLabelAtt(attrList) {\n    let nameAttObj = attrList.find((att) => att.id === \"name\");\n    let nameAtt = nameAttObj && nameAttObj.eq ? String(nameAttObj.eq) : null;\n    return nameAtt;\n  }\n\n  function _getLinkWeightAtt(attrList) {\n    let weightAttObj = attrList.find((att) => att.id === \"weight\");\n    let weightAtt =\n      weightAttObj && weightAttObj.eq && weightAttObj.eq !== \"null\"\n        ? parseFloat(weightAttObj.eq).toFixed(2)\n        : null;\n\n    return weightAtt;\n  }\n\n  function _getLinkColorAtt(attrList) {\n    let colorAttObj = attrList.find((att) => att.id === \"color\");\n    let colorAtt =\n      colorAttObj && color(colorAttObj.eq)\n        ? color(colorAttObj.eq).formatHex()\n        : color(\"black\").formatHex();\n    return colorAtt;\n  }\n\n  function _getLinkStyleAtt(attrList) {\n    let styleAttObj = attrList.find((att) => att.id === \"style\");\n    let validStyle = [\"solid\", \"dashed\"];\n    let styleAtt =\n      styleAttObj && validStyle.indexOf(styleAttObj.eq) !== -1\n        ? styleAttObj.eq\n        : \"solid\";\n    return styleAtt;\n  }\n\n  function _getLinkDirAtt(attrList) {\n    let dirAttObj = attrList.find((att) => att.id === \"dir\");\n    let validDir = [\"forward\", \"none\"];\n    let dirAtt =\n      dirAttObj && validDir.indexOf(dirAttObj.eq) !== -1\n        ? dirAttObj.eq\n        : \"forward\";\n    return dirAtt;\n  }\n\n  function _createTransmissionDatafromDOT(graphDOT) {\n    //get directed or undirected\n    let graphType = graphDOT[0].type;\n    //var data = { nodes: [], links: [] };\n    let data_cy = [];\n    let node_labels = [];\n    graphDOT[0].children.forEach(function(d) {\n      if (d.type === \"node_stmt\") {\n        let id = d.node_id.id;\n        let nodeName = _getNodeLabelAtt(d.attr_list);\n        let name = nodeName ? nodeName : id;\n        node_labels.push(name);\n        data_cy.push({ data: { id: id, label: name } });\n      } else {\n        //process edges\n        //link (d)={'source': 'P1', 'target': 'P2', 'weight': '0.5'}\n        let source = d.edge_list[0].id;\n        let target = d.edge_list[1].id;\n        let weight = _getLinkWeightAtt(d.attr_list);\n        let color = _getLinkColorAtt(d.attr_list);\n        let dir = graphType === \"graph\" ? \"none\" : _getLinkDirAtt(d.attr_list);\n        let style = _getLinkStyleAtt(d.attr_list);\n        data_cy.push({\n          data: {\n            source: source,\n            target: target,\n            weight: weight,\n            color: color,\n            dir: dir,\n            style: style,\n          },\n        });\n      }\n    });\n    let graphObj = { nodeLabels: node_labels, data: data_cy };\n    return graphObj;\n  }\n  try {\n    dotparser(dot);\n    const graphdata = dotparser(dot);\n    const jsondata = _createTransmissionDatafromDOT(graphdata);\n\n    return jsondata;\n  } catch (e) {\n    alert((\"Invalid dot format. Error\": e));\n    return;\n  }\n}\n\nexport function isIsolateOrHost(nodeLabels, isolateNames, sourceNames) {\n  let res = null;\n  let intersectIsolatesAndLabels = isolateNames.filter((x) =>\n    nodeLabels.includes(x)\n  );\n  let intersectHostsAndLabels = sourceNames.filter((x) =>\n    nodeLabels.includes(x)\n  );\n  if ((intersectIsolatesAndLabels.length / isolateNames.length) * 100 >= 5) {\n    res = \"isolate\";\n  } else {\n    if ((intersectHostsAndLabels.length / sourceNames.length) * 100 >= 5) {\n      res = \"host\";\n    } else {\n      res = null;\n    }\n  }\n  return res;\n}\n/* SAVE IT FOR LATER\n================================================================================\n\n*/\n"]},"metadata":{},"sourceType":"module"}