{"ast":null,"code":"import _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Volumes/DATA/BUDI/APP_DEV/haiviz-v04/src/viz_Localmap/comp_Localmap.js\";\n\n/* ============================================================================\n\n============================================================================ */\nimport React, { useEffect, useState } from \"react\";\nimport LocalmapChart from \"./chart_Localmap_svg\";\nimport LocalmapSettings from \"./comp_LocalMap_Settings.js\";\nimport { Row, Col, Card, Button, Skeleton } from \"antd\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport withMeasure from \"../hocs/withMeasure\";\nimport { DragOutlined, CloseOutlined, RetweetOutlined, SettingOutlined } from \"@ant-design/icons\";\nimport { deactivateChart, setSelectedData } from \"../action/index\";\nimport { changeLocalmapResizeSignal, changeLocalmapNodeSize, changeLocalmapTextSize, changeLocalmapTextOffset, changeLocalmapLayout, changeLocalmapIsLocTextShown } from \"../action/localMap_actions\";\nvar dimensions = [\"width\", \"height\"];\n\nvar xmlJSconvert = require(\"xml-js\");\n\nvar Localmap = function Localmap(props) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isUserRedraw = _useState2[0],\n      setisUserRedraw = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isDrawerVisible = _useState4[0],\n      setisDrawerVisible = _useState4[1];\n\n  var _useState5 = useState(null),\n      _useState6 = _slicedToArray(_useState5, 2),\n      localmapData = _useState6[0],\n      setlocalmapData = _useState6[1]; // USEEFFECTS\n\n\n  useEffect(function () {\n    if (isUserRedraw) {\n      setisUserRedraw(false);\n    }\n  }, [isUserRedraw]);\n  useEffect(function () {\n    if (props.xmlMap && props.isolateData && !localmapData) {\n      // get svg node here\n      var xmlNodeClone = props.xmlMap.cloneNode(true);\n      var svgNodeClone = xmlNodeClone.getElementsByTagName(\"svg\")[0].cloneNode(true); // get mapdata, serialize it, convert to object\n\n      var mapDataNode = xmlNodeClone.getElementsByTagName(\"mapdata\")[0].cloneNode(true);\n      var serializedMapData = new XMLSerializer().serializeToString(mapDataNode);\n      var locationDataObj = xmlJSconvert.xml2js(serializedMapData, {\n        compact: true,\n        spaces: 0\n      });\n      var locationData = Array.isArray(locationDataObj.mapdata.location) ? locationDataObj.mapdata.location.map(function (d) {\n        return {\n          name: d._attributes.name,\n          x: +d._attributes.x,\n          y: +d._attributes.y\n        };\n      }) : locationDataObj && _typeof(locationDataObj.mapdata.location) === \"object\" ? [{\n        name: locationDataObj.mapdata.location._attributes.name,\n        x: +locationDataObj.mapdata.location._attributes.x,\n        y: +locationDataObj.mapdata.location._attributes.y\n      }] : null;\n      var locationData_Map = new Map();\n\n      if (locationData_Map) {\n        locationData.forEach(function (d) {\n          locationData_Map.set(d.name, d);\n        });\n      }\n\n      var _localmapData = {\n        xmlSVG: svgNodeClone,\n        locationTable: locationData_Map\n      };\n\n      if (svgNodeClone, locationData_Map) {\n        setlocalmapData(_localmapData);\n      } else {\n        alert(\"Unable to read the map, refresh the page and re-load a valid HAIviz XML map\");\n      }\n    }\n  }, [props.xmlMap, props.isolateData, localmapData]); //HANDLERS\n\n  var closeCardHandler = function closeCardHandler() {\n    props.deactivateChart(props.id);\n    props.changeLocalmapResizeSignal(false);\n  };\n\n  var openDrawerHandler = function openDrawerHandler() {\n    setisDrawerVisible(true);\n  };\n\n  var closeDrawerHandler = function closeDrawerHandler() {\n    setisDrawerVisible(false);\n  };\n\n  var userRedrawHandler = function userRedrawHandler(val) {\n    if (!isUserRedraw) {\n      setisUserRedraw(true);\n      props.changeLocalmapResizeSignal(false);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      height: \"100%\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    title: \"Local map\",\n    bordered: true,\n    headStyle: {\n      height: \"50px\",\n      padding: \"0 20px\"\n    },\n    style: {\n      height: \"100%\"\n    },\n    bodyStyle: {\n      margin: \"0px\",\n      padding: \"5px\"\n    },\n    extra: /*#__PURE__*/React.createElement(Row, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      span: 6,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      className: \"panelHeader\",\n      size: \"small\",\n      style: {\n        margin: \"0 5px\",\n        border: \"none\"\n      },\n      icon: /*#__PURE__*/React.createElement(DragOutlined, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 25\n        }\n      }),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      span: 6,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      size: \"small\",\n      style: {\n        margin: \"0 5px\",\n        border: \"none\"\n      },\n      icon: /*#__PURE__*/React.createElement(RetweetOutlined, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 25\n        }\n      }),\n      onClick: userRedrawHandler,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      span: 6,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      size: \"small\",\n      style: {\n        margin: \"0 5px\",\n        border: \"none\"\n      },\n      icon: /*#__PURE__*/React.createElement(SettingOutlined, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 25\n        }\n      }),\n      onClick: openDrawerHandler,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      span: 6,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      size: \"small\",\n      style: {\n        margin: \"0 5px\",\n        border: \"none\"\n      },\n      icon: /*#__PURE__*/React.createElement(CloseOutlined, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 25\n        }\n      }),\n      onClick: closeCardHandler,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 17\n      }\n    }))),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"localmap-drawer-settings\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(LocalmapSettings, {\n    isDrawerVisible: isDrawerVisible,\n    closeDrawerHandler: closeDrawerHandler,\n    localmapSettings: props.localmapSettings,\n    changeLocalmapTextSize: props.changeLocalmapTextSize,\n    changeLocalmapTextOffset: props.changeLocalmapTextOffset,\n    changeLocalmapNodeSize: props.changeLocalmapNodeSize,\n    changeLocalmapLayout: props.changeLocalmapLayout,\n    changeLocalmapIsLocTextShown: props.changeLocalmapIsLocTextShown,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 13\n    }\n  })), !localmapData && /*#__PURE__*/React.createElement(Row, {\n    style: {\n      padding: \"20px\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Skeleton, {\n    active: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 15\n    }\n  })), localmapData && /*#__PURE__*/React.createElement(Row, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(LocalmapChart, {\n    width: props.width,\n    height: props.height,\n    data: localmapData,\n    isolateData: props.isolateData,\n    localmapSettings: props.localmapSettings,\n    isUserRedraw: isUserRedraw,\n    selectedData: props.selectedData,\n    setSelectedData: props.setSelectedData,\n    colorScale: props.colorScale,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 15\n    }\n  })))));\n};\n\nfunction mapStateToProps(state, ownProps) {\n  return {\n    isolateData: state.isolateData,\n    xmlMap: state.floorplan,\n    selectedData: state.selectedData,\n    localmapSettings: state.localmapSettings,\n    colorScale: state.colorScale\n  };\n}\n\nfunction mapDispatchToProps(dispatch, ownProps) {\n  return bindActionCreators({\n    deactivateChart: deactivateChart,\n    changeLocalmapResizeSignal: changeLocalmapResizeSignal,\n    changeLocalmapNodeSize: changeLocalmapNodeSize,\n    changeLocalmapTextSize: changeLocalmapTextSize,\n    changeLocalmapTextOffset: changeLocalmapTextOffset,\n    changeLocalmapLayout: changeLocalmapLayout,\n    changeLocalmapIsLocTextShown: changeLocalmapIsLocTextShown,\n    setSelectedData: setSelectedData\n  }, dispatch);\n}\n\nvar MeasuredLocalmap = withMeasure(dimensions)(Localmap);\nexport default connect(mapStateToProps, mapDispatchToProps)(MeasuredLocalmap); ///////////////////////////////////////////////////////////////////////////////\n\n/*\n<Button\n  size={\"small\"}\n  style={{ margin: \"0 5px\", border: \"none\" }}\n  icon={<DownloadOutlined />}\n></Button>\n*/","map":{"version":3,"sources":["/Volumes/DATA/BUDI/APP_DEV/haiviz-v04/src/viz_Localmap/comp_Localmap.js"],"names":["React","useEffect","useState","LocalmapChart","LocalmapSettings","Row","Col","Card","Button","Skeleton","connect","bindActionCreators","withMeasure","DragOutlined","CloseOutlined","RetweetOutlined","SettingOutlined","deactivateChart","setSelectedData","changeLocalmapResizeSignal","changeLocalmapNodeSize","changeLocalmapTextSize","changeLocalmapTextOffset","changeLocalmapLayout","changeLocalmapIsLocTextShown","dimensions","xmlJSconvert","require","Localmap","props","isUserRedraw","setisUserRedraw","isDrawerVisible","setisDrawerVisible","localmapData","setlocalmapData","xmlMap","isolateData","xmlNodeClone","cloneNode","svgNodeClone","getElementsByTagName","mapDataNode","serializedMapData","XMLSerializer","serializeToString","locationDataObj","xml2js","compact","spaces","locationData","Array","isArray","mapdata","location","map","d","name","_attributes","x","y","locationData_Map","Map","forEach","set","xmlSVG","locationTable","alert","closeCardHandler","id","openDrawerHandler","closeDrawerHandler","userRedrawHandler","val","height","padding","margin","border","localmapSettings","width","selectedData","colorScale","mapStateToProps","state","ownProps","floorplan","mapDispatchToProps","dispatch","MeasuredLocalmap"],"mappings":"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","sourcesContent":["/* ============================================================================\n\n============================================================================ */\nimport React, { useEffect, useState } from \"react\";\nimport LocalmapChart from \"./chart_Localmap_svg\";\nimport LocalmapSettings from \"./comp_LocalMap_Settings.js\";\nimport { Row, Col, Card, Button, Skeleton } from \"antd\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport withMeasure from \"../hocs/withMeasure\";\nimport {\n  DragOutlined,\n  CloseOutlined,\n  RetweetOutlined,\n  SettingOutlined,\n} from \"@ant-design/icons\";\nimport { deactivateChart, setSelectedData } from \"../action/index\";\nimport {\n  changeLocalmapResizeSignal,\n  changeLocalmapNodeSize,\n  changeLocalmapTextSize,\n  changeLocalmapTextOffset,\n  changeLocalmapLayout,\n  changeLocalmapIsLocTextShown,\n} from \"../action/localMap_actions\";\n\nconst dimensions = [\"width\", \"height\"];\nconst xmlJSconvert = require(\"xml-js\");\n\nconst Localmap = (props) => {\n  const [isUserRedraw, setisUserRedraw] = useState(false);\n  const [isDrawerVisible, setisDrawerVisible] = useState(false);\n  const [localmapData, setlocalmapData] = useState(null);\n\n  // USEEFFECTS\n  useEffect(() => {\n    if (isUserRedraw) {\n      setisUserRedraw(false);\n    }\n  }, [isUserRedraw]);\n\n  useEffect(() => {\n    if (props.xmlMap && props.isolateData && !localmapData) {\n      // get svg node here\n      const xmlNodeClone = props.xmlMap.cloneNode(true);\n      const svgNodeClone = xmlNodeClone\n        .getElementsByTagName(\"svg\")[0]\n        .cloneNode(true);\n      // get mapdata, serialize it, convert to object\n      const mapDataNode = xmlNodeClone\n        .getElementsByTagName(\"mapdata\")[0]\n        .cloneNode(true);\n      const serializedMapData = new XMLSerializer().serializeToString(\n        mapDataNode\n      );\n      const locationDataObj = xmlJSconvert.xml2js(serializedMapData, {\n        compact: true,\n        spaces: 0,\n      });\n\n      const locationData = Array.isArray(locationDataObj.mapdata.location)\n        ? locationDataObj.mapdata.location.map((d) => {\n            return {\n              name: d._attributes.name,\n              x: +d._attributes.x,\n              y: +d._attributes.y,\n            };\n          })\n        : locationDataObj &&\n          typeof locationDataObj.mapdata.location === \"object\"\n        ? [\n            {\n              name: locationDataObj.mapdata.location._attributes.name,\n              x: +locationDataObj.mapdata.location._attributes.x,\n              y: +locationDataObj.mapdata.location._attributes.y,\n            },\n          ]\n        : null;\n\n      const locationData_Map = new Map();\n\n      if (locationData_Map) {\n        locationData.forEach((d) => {\n          locationData_Map.set(d.name, d);\n        });\n      }\n\n      let localmapData = {\n        xmlSVG: svgNodeClone,\n        locationTable: locationData_Map,\n      };\n\n      if ((svgNodeClone, locationData_Map)) {\n        setlocalmapData(localmapData);\n      } else {\n        alert(\n          \"Unable to read the map, refresh the page and re-load a valid HAIviz XML map\"\n        );\n      }\n    }\n  }, [props.xmlMap, props.isolateData, localmapData]);\n\n  //HANDLERS\n  const closeCardHandler = () => {\n    props.deactivateChart(props.id);\n    props.changeLocalmapResizeSignal(false);\n  };\n  const openDrawerHandler = () => {\n    setisDrawerVisible(true);\n  };\n  const closeDrawerHandler = () => {\n    setisDrawerVisible(false);\n  };\n  const userRedrawHandler = (val) => {\n    if (!isUserRedraw) {\n      setisUserRedraw(true);\n      props.changeLocalmapResizeSignal(false);\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <div style={{ height: \"100%\" }}>\n        <Card\n          title={\"Local map\"}\n          bordered={true}\n          headStyle={{ height: \"50px\", padding: \"0 20px\" }}\n          style={{ height: \"100%\" }}\n          bodyStyle={{ margin: \"0px\", padding: \"5px\" }}\n          extra={\n            <Row>\n              <Col span={6}>\n                <Button\n                  className=\"panelHeader\"\n                  size={\"small\"}\n                  style={{ margin: \"0 5px\", border: \"none\" }}\n                  icon={<DragOutlined />}\n                ></Button>\n              </Col>\n              <Col span={6}>\n                <Button\n                  size={\"small\"}\n                  style={{ margin: \"0 5px\", border: \"none\" }}\n                  icon={<RetweetOutlined />}\n                  onClick={userRedrawHandler}\n                ></Button>\n              </Col>\n              <Col span={6}>\n                <Button\n                  size={\"small\"}\n                  style={{ margin: \"0 5px\", border: \"none\" }}\n                  icon={<SettingOutlined />}\n                  onClick={openDrawerHandler}\n                ></Button>\n              </Col>\n              <Col span={6}>\n                <Button\n                  size={\"small\"}\n                  style={{ margin: \"0 5px\", border: \"none\" }}\n                  icon={<CloseOutlined />}\n                  onClick={closeCardHandler}\n                ></Button>\n              </Col>\n            </Row>\n          }\n        >\n          <div id=\"localmap-drawer-settings\">\n            <LocalmapSettings\n              isDrawerVisible={isDrawerVisible}\n              closeDrawerHandler={closeDrawerHandler}\n              localmapSettings={props.localmapSettings}\n              changeLocalmapTextSize={props.changeLocalmapTextSize}\n              changeLocalmapTextOffset={props.changeLocalmapTextOffset}\n              changeLocalmapNodeSize={props.changeLocalmapNodeSize}\n              changeLocalmapLayout={props.changeLocalmapLayout}\n              changeLocalmapIsLocTextShown={props.changeLocalmapIsLocTextShown}\n            />\n          </div>\n          {!localmapData && (\n            <Row style={{ padding: \"20px\" }}>\n              <Skeleton active={true} />\n            </Row>\n          )}\n          {localmapData && (\n            <Row>\n              <LocalmapChart\n                width={props.width}\n                height={props.height}\n                data={localmapData}\n                isolateData={props.isolateData}\n                localmapSettings={props.localmapSettings}\n                isUserRedraw={isUserRedraw}\n                selectedData={props.selectedData}\n                setSelectedData={props.setSelectedData}\n                colorScale={props.colorScale}\n              />\n            </Row>\n          )}\n        </Card>\n      </div>\n    </React.Fragment>\n  );\n};\n\nfunction mapStateToProps(state, ownProps) {\n  return {\n    isolateData: state.isolateData,\n    xmlMap: state.floorplan,\n    selectedData: state.selectedData,\n    localmapSettings: state.localmapSettings,\n    colorScale: state.colorScale,\n  };\n}\n\nfunction mapDispatchToProps(dispatch, ownProps) {\n  return bindActionCreators(\n    {\n      deactivateChart: deactivateChart,\n      changeLocalmapResizeSignal: changeLocalmapResizeSignal,\n      changeLocalmapNodeSize: changeLocalmapNodeSize,\n      changeLocalmapTextSize: changeLocalmapTextSize,\n      changeLocalmapTextOffset: changeLocalmapTextOffset,\n      changeLocalmapLayout: changeLocalmapLayout,\n      changeLocalmapIsLocTextShown: changeLocalmapIsLocTextShown,\n      setSelectedData: setSelectedData,\n    },\n    dispatch\n  );\n}\n\nconst MeasuredLocalmap = withMeasure(dimensions)(Localmap);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MeasuredLocalmap);\n\n///////////////////////////////////////////////////////////////////////////////\n/*\n<Button\n  size={\"small\"}\n  style={{ margin: \"0 5px\", border: \"none\" }}\n  icon={<DownloadOutlined />}\n></Button>\n*/\n"]},"metadata":{},"sourceType":"module"}