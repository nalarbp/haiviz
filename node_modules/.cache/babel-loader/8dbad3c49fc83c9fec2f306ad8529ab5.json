{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Volumes/DATA/BUDI/APP_DEV/haiviz-v04/src/page_createMap/btn_MapXMLInput.js\";\n\nimport React, { useEffect, useState } from \"react\";\nimport { xml } from \"d3-fetch\";\nimport { Card, Spin, Upload } from \"antd\";\nimport { SVGIcon } from \"../utils/customIcons\";\nimport { getMapLocationData } from \"../utils/utils\";\nimport { v1 as uuidv1 } from \"uuid\";\nvar Dragger = Upload.Dragger; //props.xmlFile, props.setXMLFile\n\nvar MapXMLInput = function MapXMLInput(props) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLoading = _useState2[0],\n      setisLoading = _useState2[1]; //functions\n\n\n  function parseXMl(_x) {\n    return _parseXMl.apply(this, arguments);\n  }\n\n  function _parseXMl() {\n    _parseXMl = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(fileURL) {\n      var xml_promise, xmlNodeClone, svgNodeClone, svg_w_att, svg_h_att, svgNodes_w, svgNodes_h, viewBox, mapDataNode, locationData;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return xml(fileURL);\n\n            case 2:\n              xml_promise = _context.sent;\n              xmlNodeClone = xml_promise.cloneNode(true);\n              svgNodeClone = xmlNodeClone.getElementsByTagName(\"svg\")[0] ? xmlNodeClone.getElementsByTagName(\"svg\")[0].cloneNode(true) : null;\n\n              if (!svgNodeClone) {\n                _context.next = 22;\n                break;\n              }\n\n              svgNodeClone.setAttribute(\"id\", \"haiviz-localmap-svg\");\n              svg_w_att = svgNodeClone.getAttribute(\"width\");\n              svg_h_att = svgNodeClone.getAttribute(\"height\"); //check if string px is detected in svg_w_att and svg_h_att\n\n              svgNodes_w = svg_w_att.includes(\"px\") ? +svgNodeClone.getAttribute(\"width\").split(\"px\")[0] : null;\n              svgNodes_h = svg_h_att.includes(\"px\") ? +svgNodeClone.getAttribute(\"height\").split(\"px\")[0] : null; //if w and h not pixel, check if it is percentage\n\n              if (!svgNodes_w || !svgNodes_h) {\n                viewBox = svgNodeClone.getAttribute(\"viewBox\").split(\" \");\n                svgNodes_w = svg_w_att.includes(\"%\") && +viewBox[2] ? +viewBox[2] : null;\n                svgNodes_h = svg_h_att.includes(\"%\") && +viewBox[3] ? +viewBox[3] : null;\n              }\n\n              if (!(!svgNodes_w || !svgNodes_h)) {\n                _context.next = 16;\n                break;\n              }\n\n              alert(\"Invalid input. Requirement of width/height or viewbox atrributes for the SVG input file was not met. Please use the SVG example/template file in page Doccumentation. \");\n              setisLoading(false);\n              return _context.abrupt(\"return\");\n\n            case 16:\n              // // get mapdata, serialize it, convert to object\n              mapDataNode = xmlNodeClone.getElementsByTagName(\"mapdata\")[0] ? xmlNodeClone.getElementsByTagName(\"mapdata\")[0].cloneNode(true) : null;\n              locationData = mapDataNode ? Array.from(getMapLocationData(mapDataNode).entries()).map(function (d) {\n                return {\n                  id: uuidv1(),\n                  x: d[1].x,\n                  y: d[1].y,\n                  active: false,\n                  name: d[1].name\n                };\n              }) : null;\n              props.loadSvgData(svgNodeClone);\n              props.loadLocationData(locationData);\n              _context.next = 24;\n              break;\n\n            case 22:\n              alert(\"Invalid input. Please check your input file.\");\n              setisLoading(false);\n\n            case 24:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _parseXMl.apply(this, arguments);\n  }\n\n  var beforeUploadHandler = function beforeUploadHandler(file, fileList) {\n    setisLoading(true);\n\n    if (file) {\n      var reader = new FileReader();\n      reader.readAsDataURL(file);\n\n      reader.onloadend = function (evt) {\n        var dataUrl = evt.target.result;\n        parseXMl(dataUrl);\n      };\n    }\n  };\n\n  useEffect(function () {\n    if (props.locationData && props.svgData) {\n      setisLoading(false);\n    }\n  }, [props.locationData, props.svgData]);\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    title: \"Load SVG or XML file here\",\n    headStyle: {\n      textAlign: \"center\"\n    },\n    bodyStyle: {\n      margin: \"0px\",\n      padding: \"5px\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }\n  }, !isLoading && !props.svgData && /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Dragger, {\n    style: {\n      width: \"100%\",\n      padding: \"10px\"\n    },\n    name: \"file\",\n    accept: \".svg, .xml\",\n    multiple: false,\n    action: \"dummy-post\",\n    beforeUpload: beforeUploadHandler,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(SVGIcon, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 17\n    }\n  })))), isLoading && !props.svgData && !props.locationData && /*#__PURE__*/React.createElement(Spin, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 64\n    }\n  })));\n};\n\nexport default MapXMLInput;","map":{"version":3,"sources":["/Volumes/DATA/BUDI/APP_DEV/haiviz-v04/src/page_createMap/btn_MapXMLInput.js"],"names":["React","useEffect","useState","xml","Card","Spin","Upload","SVGIcon","getMapLocationData","v1","uuidv1","Dragger","MapXMLInput","props","isLoading","setisLoading","parseXMl","fileURL","xml_promise","xmlNodeClone","cloneNode","svgNodeClone","getElementsByTagName","setAttribute","svg_w_att","getAttribute","svg_h_att","svgNodes_w","includes","split","svgNodes_h","viewBox","alert","mapDataNode","locationData","Array","from","entries","map","d","id","x","y","active","name","loadSvgData","loadLocationData","beforeUploadHandler","file","fileList","reader","FileReader","readAsDataURL","onloadend","evt","dataUrl","target","result","svgData","textAlign","margin","padding","width"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,GAAT,QAAoB,UAApB;AACA,SAASC,IAAT,EAAeC,IAAf,EAAqBC,MAArB,QAAmC,MAAnC;AACA,SAASC,OAAT,QAAwB,sBAAxB;AACA,SAASC,kBAAT,QAAmC,gBAAnC;AACA,SAASC,EAAE,IAAIC,MAAf,QAA6B,MAA7B;IAEQC,O,GAAYL,M,CAAZK,O,EAER;;AAEA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAAAC,KAAK,EAAI;AAAA,kBACOX,QAAQ,CAAC,KAAD,CADf;AAAA;AAAA,MACpBY,SADoB;AAAA,MACTC,YADS,kBAG3B;;;AAH2B,WAIZC,QAJY;AAAA;AAAA;;AAAA;AAAA,yEAI3B,iBAAwBC,OAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAC4Bd,GAAG,CAACc,OAAD,CAD/B;;AAAA;AACQC,cAAAA,WADR;AAEQC,cAAAA,YAFR,GAEuBD,WAAW,CAACE,SAAZ,CAAsB,IAAtB,CAFvB;AAGQC,cAAAA,YAHR,GAGuBF,YAAY,CAACG,oBAAb,CAAkC,KAAlC,EAAyC,CAAzC,IACjBH,YAAY,CAACG,oBAAb,CAAkC,KAAlC,EAAyC,CAAzC,EAA4CF,SAA5C,CAAsD,IAAtD,CADiB,GAEjB,IALN;;AAAA,mBAOMC,YAPN;AAAA;AAAA;AAAA;;AAQIA,cAAAA,YAAY,CAACE,YAAb,CAA0B,IAA1B,EAAgC,qBAAhC;AACIC,cAAAA,SATR,GASoBH,YAAY,CAACI,YAAb,CAA0B,OAA1B,CATpB;AAUQC,cAAAA,SAVR,GAUoBL,YAAY,CAACI,YAAb,CAA0B,QAA1B,CAVpB,EAWI;;AACIE,cAAAA,UAZR,GAYqBH,SAAS,CAACI,QAAV,CAAmB,IAAnB,IAA2B,CAACP,YAAY,CAACI,YAAb,CAA0B,OAA1B,EAAmCI,KAAnC,CAAyC,IAAzC,EAA+C,CAA/C,CAA5B,GAAgF,IAZrG;AAaQC,cAAAA,UAbR,GAaqBJ,SAAS,CAACE,QAAV,CAAmB,IAAnB,IAA2B,CAACP,YAAY,CAACI,YAAb,CAA0B,QAA1B,EAAoCI,KAApC,CAA0C,IAA1C,EAAgD,CAAhD,CAA5B,GAAiF,IAbtG,EAcI;;AACA,kBAAI,CAACF,UAAD,IAAe,CAACG,UAApB,EAAgC;AAC1BC,gBAAAA,OAD0B,GAChBV,YAAY,CAACI,YAAb,CAA0B,SAA1B,EAAqCI,KAArC,CAA2C,GAA3C,CADgB;AAE9BF,gBAAAA,UAAU,GAAGH,SAAS,CAACI,QAAV,CAAmB,GAAnB,KAA2B,CAACG,OAAO,CAAC,CAAD,CAAnC,GAAyC,CAACA,OAAO,CAAC,CAAD,CAAjD,GAAuD,IAApE;AACAD,gBAAAA,UAAU,GAAGJ,SAAS,CAACE,QAAV,CAAmB,GAAnB,KAA2B,CAACG,OAAO,CAAC,CAAD,CAAnC,GAAyC,CAACA,OAAO,CAAC,CAAD,CAAjD,GAAuD,IAApE;AACD;;AAnBL,oBAoBQ,CAACJ,UAAD,IAAe,CAACG,UApBxB;AAAA;AAAA;AAAA;;AAqBME,cAAAA,KAAK,CAAC,wKAAD,CAAL;AACAjB,cAAAA,YAAY,CAAC,KAAD,CAAZ;AAtBN;;AAAA;AAyBI;AACMkB,cAAAA,WA1BV,GA0BwBd,YAAY,CAACG,oBAAb,CAAkC,SAAlC,EAA6C,CAA7C,IAChBH,YAAY,CAACG,oBAAb,CAAkC,SAAlC,EAA6C,CAA7C,EAAgDF,SAAhD,CAA0D,IAA1D,CADgB,GAEhB,IA5BR;AA6BUc,cAAAA,YA7BV,GA6ByBD,WAAW,GAC5BE,KAAK,CAACC,IAAN,CAAW5B,kBAAkB,CAACyB,WAAD,CAAlB,CAAgCI,OAAhC,EAAX,EAAsDC,GAAtD,CAA0D,UAAAC,CAAC,EAAI;AAC7D,uBAAO;AACLC,kBAAAA,EAAE,EAAE9B,MAAM,EADL;AAEL+B,kBAAAA,CAAC,EAAEF,CAAC,CAAC,CAAD,CAAD,CAAKE,CAFH;AAGLC,kBAAAA,CAAC,EAAEH,CAAC,CAAC,CAAD,CAAD,CAAKG,CAHH;AAILC,kBAAAA,MAAM,EAAE,KAJH;AAKLC,kBAAAA,IAAI,EAAEL,CAAC,CAAC,CAAD,CAAD,CAAKK;AALN,iBAAP;AAOD,eARD,CAD4B,GAU5B,IAvCR;AAwCI/B,cAAAA,KAAK,CAACgC,WAAN,CAAkBxB,YAAlB;AACAR,cAAAA,KAAK,CAACiC,gBAAN,CAAuBZ,YAAvB;AAzCJ;AAAA;;AAAA;AA2CIF,cAAAA,KAAK,CAAC,8CAAD,CAAL;AACAjB,cAAAA,YAAY,CAAC,KAAD,CAAZ;;AA5CJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAJ2B;AAAA;AAAA;;AAsD3B,MAAMgC,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,IAAD,EAAOC,QAAP,EAAoB;AAC9ClC,IAAAA,YAAY,CAAC,IAAD,CAAZ;;AACA,QAAIiC,IAAJ,EAAU;AACR,UAAME,MAAM,GAAG,IAAIC,UAAJ,EAAf;AACAD,MAAAA,MAAM,CAACE,aAAP,CAAqBJ,IAArB;;AACAE,MAAAA,MAAM,CAACG,SAAP,GAAmB,UAASC,GAAT,EAAc;AAC/B,YAAMC,OAAO,GAAGD,GAAG,CAACE,MAAJ,CAAWC,MAA3B;AACAzC,QAAAA,QAAQ,CAACuC,OAAD,CAAR;AACD,OAHD;AAID;AACF,GAVD;;AAYAtD,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIY,KAAK,CAACqB,YAAN,IAAsBrB,KAAK,CAAC6C,OAAhC,EAAyC;AACvC3C,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD;AACF,GAJQ,EAIN,CAACF,KAAK,CAACqB,YAAP,EAAqBrB,KAAK,CAAC6C,OAA3B,CAJM,CAAT;AAKA,sBACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD;AACE,IAAA,KAAK,EAAE,2BADT;AAEE,IAAA,SAAS,EAAE;AAAEC,MAAAA,SAAS,EAAE;AAAb,KAFb;AAGE,IAAA,SAAS,EAAE;AAAEC,MAAAA,MAAM,EAAE,KAAV;AAAiBC,MAAAA,OAAO,EAAE;AAA1B,KAHb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKG,CAAC/C,SAAD,IAAc,CAACD,KAAK,CAAC6C,OAArB,iBACC,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,OAAD;AACE,IAAA,KAAK,EAAE;AAAEI,MAAAA,KAAK,EAAE,MAAT;AAAiBD,MAAAA,OAAO,EAAE;AAA1B,KADT;AAEE,IAAA,IAAI,EAAC,MAFP;AAGE,IAAA,MAAM,EAAC,YAHT;AAIE,IAAA,QAAQ,EAAE,KAJZ;AAKE,IAAA,MAAM,EAAC,YALT;AAME,IAAA,YAAY,EAAEd,mBANhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CARF,CADF,CANJ,EAqBGjC,SAAS,IAAI,CAACD,KAAK,CAAC6C,OAApB,IAA+B,CAAC7C,KAAK,CAACqB,YAAtC,iBAAsD,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IArBzD,CADF,CADF;AA2BD,CAlGD;;AAmGA,eAAetB,WAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { xml } from \"d3-fetch\";\nimport { Card, Spin, Upload } from \"antd\";\nimport { SVGIcon } from \"../utils/customIcons\";\nimport { getMapLocationData } from \"../utils/utils\";\nimport { v1 as uuidv1 } from \"uuid\";\n\nconst { Dragger } = Upload;\n\n//props.xmlFile, props.setXMLFile\n\nconst MapXMLInput = props => {\n  const [isLoading, setisLoading] = useState(false);\n\n  //functions\n  async function parseXMl(fileURL) {\n    const xml_promise = await xml(fileURL);\n    const xmlNodeClone = xml_promise.cloneNode(true);\n    const svgNodeClone = xmlNodeClone.getElementsByTagName(\"svg\")[0]\n      ? xmlNodeClone.getElementsByTagName(\"svg\")[0].cloneNode(true)\n      : null;\n\n    if (svgNodeClone) {\n      svgNodeClone.setAttribute(\"id\", \"haiviz-localmap-svg\");\n      let svg_w_att = svgNodeClone.getAttribute(\"width\");\n      let svg_h_att = svgNodeClone.getAttribute(\"height\");\n      //check if string px is detected in svg_w_att and svg_h_att\n      let svgNodes_w = svg_w_att.includes(\"px\") ? +svgNodeClone.getAttribute(\"width\").split(\"px\")[0] : null\n      let svgNodes_h = svg_h_att.includes(\"px\") ? +svgNodeClone.getAttribute(\"height\").split(\"px\")[0] : null\n      //if w and h not pixel, check if it is percentage\n      if (!svgNodes_w || !svgNodes_h) {\n        let viewBox = svgNodeClone.getAttribute(\"viewBox\").split(\" \");\n        svgNodes_w = svg_w_att.includes(\"%\") && +viewBox[2] ? +viewBox[2] : null\n        svgNodes_h = svg_h_att.includes(\"%\") && +viewBox[3] ? +viewBox[3] : null\n      }\n      if (!svgNodes_w || !svgNodes_h) {\n        alert(\"Invalid input. Requirement of width/height or viewbox atrributes for the SVG input file was not met. Please use the SVG example/template file in page Doccumentation. \");\n        setisLoading(false);\n        return;\n      }\n      // // get mapdata, serialize it, convert to object\n      const mapDataNode = xmlNodeClone.getElementsByTagName(\"mapdata\")[0]\n        ? xmlNodeClone.getElementsByTagName(\"mapdata\")[0].cloneNode(true)\n        : null;\n      const locationData = mapDataNode\n        ? Array.from(getMapLocationData(mapDataNode).entries()).map(d => {\n            return {\n              id: uuidv1(),\n              x: d[1].x,\n              y: d[1].y,\n              active: false,\n              name: d[1].name\n            };\n          })\n        : null;\n      props.loadSvgData(svgNodeClone);\n      props.loadLocationData(locationData);\n    } else {\n      alert(\"Invalid input. Please check your input file.\");\n      setisLoading(false);\n    }\n\n    //props.setXMLFile(xml_promise);\n  }\n\n  const beforeUploadHandler = (file, fileList) => {\n    setisLoading(true);\n    if (file) {\n      const reader = new FileReader();\n      reader.readAsDataURL(file);\n      reader.onloadend = function(evt) {\n        const dataUrl = evt.target.result;\n        parseXMl(dataUrl);\n      };\n    }\n  };\n\n  useEffect(() => {\n    if (props.locationData && props.svgData) {\n      setisLoading(false);\n    }\n  }, [props.locationData, props.svgData]);\n  return (\n    <React.Fragment>\n      <Card\n        title={\"Load SVG or XML file here\"}\n        headStyle={{ textAlign: \"center\" }}\n        bodyStyle={{ margin: \"0px\", padding: \"5px\" }}\n      >\n        {!isLoading && !props.svgData && (\n          <React.Fragment>\n            <Dragger\n              style={{ width: \"100%\", padding: \"10px\" }}\n              name=\"file\"\n              accept=\".svg, .xml\"\n              multiple={false}\n              action=\"dummy-post\"\n              beforeUpload={beforeUploadHandler}\n            >\n              <h1>\n                <SVGIcon />\n              </h1>\n            </Dragger>\n          </React.Fragment>\n        )}\n        {isLoading && !props.svgData && !props.locationData && <Spin />}\n      </Card>\n    </React.Fragment>\n  );\n};\nexport default MapXMLInput;\n"]},"metadata":{},"sourceType":"module"}