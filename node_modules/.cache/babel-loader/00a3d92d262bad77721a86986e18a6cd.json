{"ast":null,"code":"import * as constant from \"../utils/constants\";\nimport { initialState } from \"../reducers\";\n\nvar colorscaleSettingsReducer = function colorscaleSettingsReducer(prevState, action) {\n  switch (action.type) {\n    case constant.NEW_NODE_SIZE_COLOR:\n      var newState_nodeSize = Object.assign({}, prevState);\n\n      if (action.payload && action.payload !== prevState.nodeSize) {\n        newState_nodeSize.nodeSize = action.payload;\n      }\n\n      return newState_nodeSize;\n    // if no change return same state with before\n\n    case constant.NEW_TEXT_SIZE_COLOR:\n      var newState_textSize = Object.assign({}, prevState);\n\n      if (action.payload && action.payload !== prevState.textSize) {\n        newState_textSize.textSize = action.payload;\n      }\n\n      return newState_textSize;\n\n    case constant.NEW_TEXT_OFFSET_COLOR:\n      var newState_textOffset = Object.assign({}, prevState);\n\n      if (action.payload && action.payload !== prevState.textOffset) {\n        newState_textOffset.textOffset = action.payload;\n      }\n\n      return newState_textOffset;\n\n    case constant.COLOR_IS_DOWNLOADING:\n      var newState_isDownloading = Object.assign({}, prevState);\n\n      if (action.payload !== prevState.isDownloading) {\n        newState_isDownloading.isDownloading = action.payload;\n      }\n\n      return newState_isDownloading;\n\n    case constant.NEW_RESIZE_SIGNAL_COLOR:\n      var newState_resizeSignal = Object.assign({}, prevState);\n\n      if (action.payload !== prevState.isUserStartResize) {\n        newState_resizeSignal.isUserStartResize = action.payload;\n      }\n\n      return newState_resizeSignal;\n\n    default:\n      if (prevState) {\n        return prevState;\n      } else {\n        return initialState.colorscaleSettings;\n      }\n\n  }\n};\n\nexport default colorscaleSettingsReducer;","map":{"version":3,"sources":["/Volumes/DATA/BUDI/APP_DEV/haiviz-v04/src/reducers/reducer-colorscaleSettings.js"],"names":["constant","initialState","colorscaleSettingsReducer","prevState","action","type","NEW_NODE_SIZE_COLOR","newState_nodeSize","Object","assign","payload","nodeSize","NEW_TEXT_SIZE_COLOR","newState_textSize","textSize","NEW_TEXT_OFFSET_COLOR","newState_textOffset","textOffset","COLOR_IS_DOWNLOADING","newState_isDownloading","isDownloading","NEW_RESIZE_SIGNAL_COLOR","newState_resizeSignal","isUserStartResize","colorscaleSettings"],"mappings":"AAAA,OAAO,KAAKA,QAAZ,MAA0B,oBAA1B;AACA,SAASC,YAAT,QAA6B,aAA7B;;AAEA,IAAMC,yBAAyB,GAAG,SAA5BA,yBAA4B,CAACC,SAAD,EAAYC,MAAZ,EAAuB;AACvD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKL,QAAQ,CAACM,mBAAd;AACE,UAAIC,iBAAiB,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBN,SAAlB,CAAxB;;AACA,UAAIC,MAAM,CAACM,OAAP,IAAkBN,MAAM,CAACM,OAAP,KAAmBP,SAAS,CAACQ,QAAnD,EAA6D;AAC3DJ,QAAAA,iBAAiB,CAACI,QAAlB,GAA6BP,MAAM,CAACM,OAApC;AACD;;AACD,aAAOH,iBAAP;AAA0B;;AAE5B,SAAKP,QAAQ,CAACY,mBAAd;AACE,UAAIC,iBAAiB,GAAGL,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBN,SAAlB,CAAxB;;AACA,UAAIC,MAAM,CAACM,OAAP,IAAkBN,MAAM,CAACM,OAAP,KAAmBP,SAAS,CAACW,QAAnD,EAA6D;AAC3DD,QAAAA,iBAAiB,CAACC,QAAlB,GAA6BV,MAAM,CAACM,OAApC;AACD;;AACD,aAAOG,iBAAP;;AAEF,SAAKb,QAAQ,CAACe,qBAAd;AACE,UAAIC,mBAAmB,GAAGR,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBN,SAAlB,CAA1B;;AACA,UAAIC,MAAM,CAACM,OAAP,IAAkBN,MAAM,CAACM,OAAP,KAAmBP,SAAS,CAACc,UAAnD,EAA+D;AAC7DD,QAAAA,mBAAmB,CAACC,UAApB,GAAiCb,MAAM,CAACM,OAAxC;AACD;;AACD,aAAOM,mBAAP;;AAEF,SAAKhB,QAAQ,CAACkB,oBAAd;AACE,UAAIC,sBAAsB,GAAGX,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBN,SAAlB,CAA7B;;AACA,UAAIC,MAAM,CAACM,OAAP,KAAmBP,SAAS,CAACiB,aAAjC,EAAgD;AAC9CD,QAAAA,sBAAsB,CAACC,aAAvB,GAAuChB,MAAM,CAACM,OAA9C;AACD;;AACD,aAAOS,sBAAP;;AAEF,SAAKnB,QAAQ,CAACqB,uBAAd;AACE,UAAIC,qBAAqB,GAAGd,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBN,SAAlB,CAA5B;;AACA,UAAIC,MAAM,CAACM,OAAP,KAAmBP,SAAS,CAACoB,iBAAjC,EAAoD;AAClDD,QAAAA,qBAAqB,CAACC,iBAAtB,GAA0CnB,MAAM,CAACM,OAAjD;AACD;;AACD,aAAOY,qBAAP;;AAEF;AACE,UAAInB,SAAJ,EAAe;AACb,eAAOA,SAAP;AACD,OAFD,MAEO;AACL,eAAOF,YAAY,CAACuB,kBAApB;AACD;;AAzCL;AA2CD,CA5CD;;AA8CA,eAAetB,yBAAf","sourcesContent":["import * as constant from \"../utils/constants\";\nimport { initialState } from \"../reducers\";\n\nconst colorscaleSettingsReducer = (prevState, action) => {\n  switch (action.type) {\n    case constant.NEW_NODE_SIZE_COLOR:\n      let newState_nodeSize = Object.assign({}, prevState);\n      if (action.payload && action.payload !== prevState.nodeSize) {\n        newState_nodeSize.nodeSize = action.payload;\n      }\n      return newState_nodeSize; // if no change return same state with before\n\n    case constant.NEW_TEXT_SIZE_COLOR:\n      let newState_textSize = Object.assign({}, prevState);\n      if (action.payload && action.payload !== prevState.textSize) {\n        newState_textSize.textSize = action.payload;\n      }\n      return newState_textSize;\n\n    case constant.NEW_TEXT_OFFSET_COLOR:\n      let newState_textOffset = Object.assign({}, prevState);\n      if (action.payload && action.payload !== prevState.textOffset) {\n        newState_textOffset.textOffset = action.payload;\n      }\n      return newState_textOffset;\n\n    case constant.COLOR_IS_DOWNLOADING:\n      let newState_isDownloading = Object.assign({}, prevState);\n      if (action.payload !== prevState.isDownloading) {\n        newState_isDownloading.isDownloading = action.payload;\n      }\n      return newState_isDownloading;\n\n    case constant.NEW_RESIZE_SIGNAL_COLOR:\n      let newState_resizeSignal = Object.assign({}, prevState);\n      if (action.payload !== prevState.isUserStartResize) {\n        newState_resizeSignal.isUserStartResize = action.payload;\n      }\n      return newState_resizeSignal;\n\n    default:\n      if (prevState) {\n        return prevState;\n      } else {\n        return initialState.colorscaleSettings;\n      }\n  }\n};\n\nexport default colorscaleSettingsReducer;\n"]},"metadata":{},"sourceType":"module"}