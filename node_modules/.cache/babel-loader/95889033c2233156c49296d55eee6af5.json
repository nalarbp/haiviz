{"ast":null,"code":"import { useRef, useEffect } from \"react\";\n\nvar usePrevious = function usePrevious(value) {\n  // The ref object is a generic container whose current property is mutable ...\n  // ... and can hold any value, similar to an instance property on a class\n  var ref = useRef(); // Store current value in ref\n\n  useEffect(function () {\n    ref.current = value;\n  }, [value]); // Only re-run if value changes\n  // Return previous value (happens before update in useEffect above)\n\n  return ref.current;\n};\n\nexport default usePrevious;","map":{"version":3,"sources":["/Volumes/DATA/BUDI/APP_DEV/haiviz-v04/src/react_hooks/usePrevious-hook.js"],"names":["useRef","useEffect","usePrevious","value","ref","current"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,SAAjB,QAAkC,OAAlC;;AAEA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,KAAD,EAAW;AAC7B;AACA;AACA,MAAMC,GAAG,GAAGJ,MAAM,EAAlB,CAH6B,CAI7B;;AACAC,EAAAA,SAAS,CAAC,YAAM;AACdG,IAAAA,GAAG,CAACC,OAAJ,GAAcF,KAAd;AACD,GAFQ,EAEN,CAACA,KAAD,CAFM,CAAT,CAL6B,CAOhB;AACb;;AACA,SAAOC,GAAG,CAACC,OAAX;AACD,CAVD;;AAYA,eAAeH,WAAf","sourcesContent":["import { useRef, useEffect } from \"react\";\n\nconst usePrevious = (value) => {\n  // The ref object is a generic container whose current property is mutable ...\n  // ... and can hold any value, similar to an instance property on a class\n  const ref = useRef();\n  // Store current value in ref\n  useEffect(() => {\n    ref.current = value;\n  }, [value]); // Only re-run if value changes\n  // Return previous value (happens before update in useEffect above)\n  return ref.current;\n};\n\nexport default usePrevious;\n"]},"metadata":{},"sourceType":"module"}