{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Volumes/DATA/BUDI/APP_DEV/haiviz-v04/src/page_haiviz/comp_Dashboard.js\";\n\n/* ============================================================================\n\n============================================================================ */\nimport React from \"react\";\nimport ReactGridLayout, { WidthProvider } from \"react-grid-layout\";\nimport \"react-grid-layout/css/styles.css\";\nimport \"react-resizable/css/styles.css\";\nimport PatientMovement from \"../viz_Movement/comp_Movement\";\nimport InputFIles from \"../viz_InputFiles/comp_InputFiles\";\nimport DataTable from \"../viz_DataTable/comp_DataTable\";\nimport TransGraph from \"../viz_TransGraph/comp_TransGraph\";\nimport PhyloTree from \"../viz_PhyloTree/comp_PhyloTree\";\nimport PhyloTreeGantt from \"../viz_PhyloTreeGantt/comp_PhyloTreeGantt\";\nimport TemporalBar from \"../viz_TemporalBar/comp_TemporalBar\";\nimport Localmap from \"../viz_Localmap/comp_Localmap\";\nimport SummaryCard from \"../viz_Summary/comp_Summary\";\nimport SimulatedMap from \"../viz_SimulatedMap/comp_SimulatedMap\";\nimport ColorScale from \"../viz_ColorScale/comp_ColorScale\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { changeColorResizeSignal } from \"../action/index\";\nimport { changeTransResizeSignal } from \"../action/transGraph_actions\";\nimport { changeMovementResizeSignal } from \"../action/movementChart_actions\";\nimport { changeSimapResizeSignal } from \"../action/simulatedMap_actions\";\nimport { changeTreeResizeSignal } from \"../action/phyloTree_actions\";\nimport { changeTempResizeSignal } from \"../action/temporalBar_actions\";\nimport { changeLocalmapResizeSignal } from \"../action/localMap_actions\";\nimport { changeTreeGanttResizeSignal } from \"../action/phyloTreeGantt_actions\";\nvar GridLayout = WidthProvider(ReactGridLayout); //const dimensions = [\"width\", \"height\"];\n//const Mea = withMeasure(dimensions)(PatientMovement);\n\nvar Dashboard = function Dashboard(props) {\n  var layout = props.layout;\n  var activeCharts = Object.keys(props.activeChart).map(function (key) {\n    return {\n      key: key,\n      status: props.activeChart[key].show\n    };\n  }).filter(function (d) {\n    return d.status;\n  }); //Functions\n\n  function createChart(id) {\n    var newID = id.split(\"_\");\n\n    switch (newID[0]) {\n      case \"summary\":\n        return /*#__PURE__*/React.createElement(SummaryCard, {\n          id: id,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 16\n          }\n        });\n\n      case \"gantt\":\n        return /*#__PURE__*/React.createElement(PatientMovement, {\n          id: id,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 16\n          }\n        });\n\n      case \"idxCol\":\n        return /*#__PURE__*/React.createElement(ColorScale, {\n          id: id,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 16\n          }\n        });\n\n      case \"floorplan\":\n        return /*#__PURE__*/React.createElement(Localmap, {\n          id: id,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 16\n          }\n        });\n\n      case \"tree\":\n        return /*#__PURE__*/React.createElement(PhyloTree, {\n          id: id,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 16\n          }\n        });\n\n      case \"transmission\":\n        return /*#__PURE__*/React.createElement(TransGraph, {\n          id: id,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 16\n          }\n        });\n\n      case \"info\":\n        return /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 16\n          }\n        }, \"Info\");\n\n      case \"table\":\n        return /*#__PURE__*/React.createElement(DataTable, {\n          id: id,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 16\n          }\n        });\n\n      case \"bar\":\n        return /*#__PURE__*/React.createElement(TemporalBar, {\n          id: id,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 16\n          }\n        });\n\n      case \"simulatedMap\":\n        return /*#__PURE__*/React.createElement(SimulatedMap, {\n          id: id,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 16\n          }\n        });\n\n      case \"overlappingTable\":\n        return /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 16\n          }\n        }, \"OverlappingTable\");\n\n      case \"ukulele\":\n        return /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 16\n          }\n        }, \"Ukulele\");\n\n      case \"treeGantt\":\n        return /*#__PURE__*/React.createElement(PhyloTreeGantt, {\n          id: id,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 16\n          }\n        });\n\n      default:\n        return /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 16\n          }\n        });\n    }\n  }\n\n  function getDataGrid(layout, id) {\n    var dataGrid; //check viewport browser\n\n    var vw = Math.max(document.documentElement.clientWidth || 0, window.innerWidth || 0);\n    var layout_mode = vw < 768 ? \"sm\" : \"md\";\n\n    switch (layout_mode) {\n      case \"sm\":\n        layout.sm.forEach(function (d) {\n          if (d.i === id) {\n            dataGrid = d;\n          }\n        });\n        return dataGrid;\n\n      case \"md\":\n        layout.md.forEach(function (d) {\n          if (d.i === id) {\n            dataGrid = d;\n          }\n        });\n        return dataGrid;\n\n      default:\n        layout.md.forEach(function (d) {\n          if (d.i === id) {\n            dataGrid = d;\n          }\n        });\n        return dataGrid;\n    }\n  }\n\n  function onResizeStartHandler(layout, oldLayoutItem, layoutItem, placeholder) {\n    var chartIdx = layoutItem.i;\n\n    switch (chartIdx) {\n      case \"tree\":\n        props.changeTreeResizeSignal(true);\n        break;\n\n      case \"simulatedMap\":\n        props.changeSimapResizeSignal(true);\n        break;\n\n      case \"transmission\":\n        props.changeTransResizeSignal(true);\n        break;\n\n      case \"idxCol\":\n        props.changeColorResizeSignal(true);\n        break;\n\n      case \"floorplan\":\n        props.changeLocalmapResizeSignal(true);\n        break;\n\n      case \"gantt\":\n        props.changeMovementResizeSignal(true);\n        break;\n\n      case \"bar\":\n        props.changeTempResizeSignal(true);\n        break;\n\n      case \"treeGantt\":\n        props.changeTreeGanttResizeSignal(true);\n        break;\n\n      default:\n        return;\n    }\n  } //inside GridLayout you need multiple div with data-grid and inside the div you put your chart\n\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 5\n    }\n  }, activeCharts.length === 0 && /*#__PURE__*/React.createElement(InputFIles, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 37\n    }\n  }), activeCharts.length > 0 && /*#__PURE__*/React.createElement(\"div\", {\n    id: \"dashboard\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(GridLayout, {\n    cols: 12,\n    rowHeight: 30,\n    margin: [3, 3],\n    onResizeStart: onResizeStartHandler,\n    draggableHandle: \".panelHeader\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 11\n    }\n  }, activeCharts.map(function (d, idx) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: d.key,\n      \"data-grid\": getDataGrid(layout, d.key),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 17\n      }\n    }, createChart(d.key));\n  }))));\n};\n\nfunction mapStateToProps(state, ownProps) {\n  return {\n    activeChart: state.activeChart,\n    layout: state.layout\n  };\n}\n\nfunction mapDispatchToProps(dispatch, ownProps) {\n  return bindActionCreators({\n    changeTreeResizeSignal: changeTreeResizeSignal,\n    changeSimapResizeSignal: changeSimapResizeSignal,\n    changeTransResizeSignal: changeTransResizeSignal,\n    changeColorResizeSignal: changeColorResizeSignal,\n    changeLocalmapResizeSignal: changeLocalmapResizeSignal,\n    changeMovementResizeSignal: changeMovementResizeSignal,\n    changeTempResizeSignal: changeTempResizeSignal,\n    changeTreeGanttResizeSignal: changeTreeGanttResizeSignal\n  }, dispatch);\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Dashboard);","map":{"version":3,"sources":["/Volumes/DATA/BUDI/APP_DEV/haiviz-v04/src/page_haiviz/comp_Dashboard.js"],"names":["React","ReactGridLayout","WidthProvider","PatientMovement","InputFIles","DataTable","TransGraph","PhyloTree","PhyloTreeGantt","TemporalBar","Localmap","SummaryCard","SimulatedMap","ColorScale","connect","bindActionCreators","changeColorResizeSignal","changeTransResizeSignal","changeMovementResizeSignal","changeSimapResizeSignal","changeTreeResizeSignal","changeTempResizeSignal","changeLocalmapResizeSignal","changeTreeGanttResizeSignal","GridLayout","Dashboard","props","layout","activeCharts","Object","keys","activeChart","map","key","status","show","filter","d","createChart","id","newID","split","getDataGrid","dataGrid","vw","Math","max","document","documentElement","clientWidth","window","innerWidth","layout_mode","sm","forEach","i","md","onResizeStartHandler","oldLayoutItem","layoutItem","placeholder","chartIdx","length","idx","mapStateToProps","state","ownProps","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["/* ============================================================================\n\n============================================================================ */\nimport React from \"react\";\nimport ReactGridLayout, { WidthProvider } from \"react-grid-layout\";\nimport \"react-grid-layout/css/styles.css\";\nimport \"react-resizable/css/styles.css\";\nimport PatientMovement from \"../viz_Movement/comp_Movement\";\nimport InputFIles from \"../viz_InputFiles/comp_InputFiles\";\nimport DataTable from \"../viz_DataTable/comp_DataTable\";\nimport TransGraph from \"../viz_TransGraph/comp_TransGraph\";\nimport PhyloTree from \"../viz_PhyloTree/comp_PhyloTree\";\nimport PhyloTreeGantt from \"../viz_PhyloTreeGantt/comp_PhyloTreeGantt\";\nimport TemporalBar from \"../viz_TemporalBar/comp_TemporalBar\";\nimport Localmap from \"../viz_Localmap/comp_Localmap\";\nimport SummaryCard from \"../viz_Summary/comp_Summary\";\nimport SimulatedMap from \"../viz_SimulatedMap/comp_SimulatedMap\";\nimport ColorScale from \"../viz_ColorScale/comp_ColorScale\";\n\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { changeColorResizeSignal } from \"../action/index\";\nimport { changeTransResizeSignal } from \"../action/transGraph_actions\";\nimport { changeMovementResizeSignal } from \"../action/movementChart_actions\";\nimport { changeSimapResizeSignal } from \"../action/simulatedMap_actions\";\nimport { changeTreeResizeSignal } from \"../action/phyloTree_actions\";\nimport { changeTempResizeSignal } from \"../action/temporalBar_actions\";\nimport { changeLocalmapResizeSignal } from \"../action/localMap_actions\";\nimport { changeTreeGanttResizeSignal } from \"../action/phyloTreeGantt_actions\";\nconst GridLayout = WidthProvider(ReactGridLayout);\n//const dimensions = [\"width\", \"height\"];\n//const Mea = withMeasure(dimensions)(PatientMovement);\n\nconst Dashboard = props => {\n  const layout = props.layout;\n  const activeCharts = Object.keys(props.activeChart)\n    .map(key => {\n      return { key: key, status: props.activeChart[key].show };\n    })\n    .filter(d => {\n      return d.status;\n    });\n\n  //Functions\n  function createChart(id) {\n    let newID = id.split(\"_\");\n    switch (newID[0]) {\n      case \"summary\":\n        return <SummaryCard id={id} />;\n      case \"gantt\":\n        return <PatientMovement id={id} />;\n      case \"idxCol\":\n        return <ColorScale id={id} />;\n      case \"floorplan\":\n        return <Localmap id={id} />;\n      case \"tree\":\n        return <PhyloTree id={id} />;\n      case \"transmission\":\n        return <TransGraph id={id} />;\n      case \"info\":\n        return <div>Info</div>;\n      case \"table\":\n        return <DataTable id={id} />;\n      case \"bar\":\n        return <TemporalBar id={id} />;\n      case \"simulatedMap\":\n        return <SimulatedMap id={id} />;\n      case \"overlappingTable\":\n        return <div>OverlappingTable</div>;\n      case \"ukulele\":\n        return <div>Ukulele</div>;\n      case \"treeGantt\":\n        return <PhyloTreeGantt id={id} />;\n      default:\n        return <div></div>;\n    }\n  }\n  function getDataGrid(layout, id) {\n    let dataGrid;\n    //check viewport browser\n    const vw = Math.max(\n      document.documentElement.clientWidth || 0,\n      window.innerWidth || 0\n    );\n    const layout_mode = vw < 768 ? \"sm\" : \"md\";\n    switch (layout_mode) {\n      case \"sm\":\n        layout.sm.forEach(function(d) {\n          if (d.i === id) {\n            dataGrid = d;\n          }\n        });\n        return dataGrid;\n      case \"md\":\n        layout.md.forEach(function(d) {\n          if (d.i === id) {\n            dataGrid = d;\n          }\n        });\n        return dataGrid;\n      default:\n        layout.md.forEach(function(d) {\n          if (d.i === id) {\n            dataGrid = d;\n          }\n        });\n        return dataGrid;\n    }\n  }\n\n  function onResizeStartHandler(\n    layout,\n    oldLayoutItem,\n    layoutItem,\n    placeholder\n  ) {\n    let chartIdx = layoutItem.i;\n    switch (chartIdx) {\n      case \"tree\":\n        props.changeTreeResizeSignal(true);\n        break;\n      case \"simulatedMap\":\n        props.changeSimapResizeSignal(true);\n        break;\n      case \"transmission\":\n        props.changeTransResizeSignal(true);\n        break;\n      case \"idxCol\":\n        props.changeColorResizeSignal(true);\n        break;\n      case \"floorplan\":\n        props.changeLocalmapResizeSignal(true);\n        break;\n      case \"gantt\":\n        props.changeMovementResizeSignal(true);\n        break;\n      case \"bar\":\n        props.changeTempResizeSignal(true);\n        break;\n      case \"treeGantt\":\n        props.changeTreeGanttResizeSignal(true);\n        break;\n      default:\n        return;\n    }\n  }\n\n  //inside GridLayout you need multiple div with data-grid and inside the div you put your chart\n\n  return (\n    <React.Fragment>\n      {activeCharts.length === 0 && <InputFIles />}\n      {activeCharts.length > 0 && (\n        <div id=\"dashboard\">\n          <GridLayout\n            cols={12}\n            rowHeight={30}\n            margin={[3, 3]}\n            onResizeStart={onResizeStartHandler}\n            draggableHandle=\".panelHeader\"\n          >\n            {activeCharts.map(function(d, idx) {\n              return (\n                <div key={d.key} data-grid={getDataGrid(layout, d.key)}>\n                  {createChart(d.key)}\n                </div>\n              );\n            })}\n          </GridLayout>\n        </div>\n      )}\n    </React.Fragment>\n  );\n};\n\nfunction mapStateToProps(state, ownProps) {\n  return {\n    activeChart: state.activeChart,\n    layout: state.layout\n  };\n}\n\nfunction mapDispatchToProps(dispatch, ownProps) {\n  return bindActionCreators(\n    {\n      changeTreeResizeSignal: changeTreeResizeSignal,\n      changeSimapResizeSignal: changeSimapResizeSignal,\n      changeTransResizeSignal: changeTransResizeSignal,\n      changeColorResizeSignal: changeColorResizeSignal,\n      changeLocalmapResizeSignal: changeLocalmapResizeSignal,\n      changeMovementResizeSignal: changeMovementResizeSignal,\n      changeTempResizeSignal: changeTempResizeSignal,\n      changeTreeGanttResizeSignal: changeTreeGanttResizeSignal\n    },\n    dispatch\n  );\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Dashboard);\n"]},"metadata":{},"sourceType":"module"}