{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Volumes/DATA/BUDI/APP_DEV/haiviz-v04/src/viz_TransGraph/chart_TransGraph_cytoscape.js\";\n\n/* ============================================================================\nTransmission graph card:\n- when dataset for chart is available, render transmission graph viewer\n- what you need: zoom by button, drag by mouse, select area using polybrush,\n-  change link distance, filter by link's weight, change force charge strength\n// at initial process (dimensions is null) skip drawing, wait until dimensions is available\n// run drawing when only: change in width, props.data\n// when zoom, select the root cytoscapeGraph_contGroup, translate using zoomTransform not re-render/set new state (this approach is faster!)\n// iterate draw function when only page refreshed\n//\n============================================================================ */\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { select } from \"d3-selection\";\nimport { getColorScaleByObject, removeAllChildFromNode, downloadFileAsText } from \"../utils/utils\";\nimport { Button, Empty, Spin } from \"antd\";\nimport \"./style_TransGraph.css\";\nimport cytoscape from \"cytoscape\";\nimport svg from \"cytoscape-svg\";\nimport { ClearOutlined } from \"@ant-design/icons\";\nimport usePrevious from \"../react_hooks/usePrevious-hook\";\n\nvar spread = require(\"cytoscape-spread\");\n\ncytoscape.use(spread); // register extension\n\ncytoscape.use(svg);\n\nvar _ = require(\"lodash\");\n\nvar TransGraph = function TransGraph(props) {\n  //DRAWING CONSTRUCTOR\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      isDrawCompleted = _useState2[0],\n      setisDrawCompleted = _useState2[1];\n\n  var transmission = _.cloneDeep(props.data);\n\n  var transmissionCytoscapeRef = useRef();\n  var transmissionContainerRef = useRef();\n  var cytoscapeRef = useRef(null);\n  var observedWidth = props.width - 10;\n  var observedHeight = props.height - 80;\n  var prevDimension = usePrevious(observedWidth + observedHeight);\n  var isInitialDraw = prevDimension && prevDimension < 0 ? true : false; //SETTINGS\n\n  var isUserStartResize = props.transgraphSettings.isUserStartResize;\n  var isUserStyleApplied = props.transgraphSettings.isUserStyleApplied;\n  var isLinkLabelShown = props.transgraphSettings.isLinkLabelShown;\n  var isLinkWeightApplied = props.transgraphSettings.isLinkWeightApplied;\n  var layoutKey = props.transgraphSettings.layoutKey;\n  var linkFactor = props.transgraphSettings.linkFactor;\n  var transgraphIsDownloading = props.transgraphSettings.transgraphIsDownloading; //HANDLERS\n\n  var clearSelectedDataHandler = function clearSelectedDataHandler() {\n    props.setSelectedData([]);\n  }; // const boxSelectionHandler = () => {\n  //   if (cytoscapeRef.current) {\n  //     let cy = cytoscapeRef.current;\n  //     let selectedNodes = [];\n  //     cy.nodes().forEach(function(n) {\n  //       console.log(n.selected());\n  //       if (n.active()) {\n  //         selectedNodes.push(n.data(\"label\"));\n  //       }\n  //     });\n  //     //console.log(selectedNodes);\n  //     //props.setSelectedData(selectedNodes);\n  //   }\n  // };\n  //USE-EFFECTS\n  //downloading\n\n\n  useEffect(function () {\n    if (transgraphIsDownloading) {\n      var cy = cytoscapeRef.current;\n      var svgContent = cy.svg({\n        scale: 1,\n        full: true\n      });\n      downloadFileAsText(\"HAIviz-cytoscape-svg.svg\", svgContent);\n      props.changeTransIsDownloading(false);\n    }\n  }, [transgraphIsDownloading]);\n  useEffect(function () {\n    if (isUserStartResize) {\n      select(\"#transgraph-zoomButton-container\").style(\"display\", \"none\");\n      select(\"#transgraph-no-drawing\").style(\"display\", \"block\");\n      removeAllChildFromNode(\"#transmission-cy\");\n    } else {\n      if (isInitialDraw) {\n        draw();\n      } else {\n        if (props.isUserRedraw) {\n          draw();\n        }\n      }\n    }\n  }, [isInitialDraw, isUserStartResize, props.isUserRedraw]); //changing layout\n\n  useEffect(function () {\n    if (cytoscapeRef.current) {\n      var cy = cytoscapeRef.current;\n      var graph_layout = {\n        name: layoutKey,\n        animate: false,\n        fit: true,\n        prelayout: false\n      };\n      cy.layout(graph_layout).run();\n      cytoscapeRef.current = cy;\n    }\n  }, [layoutKey]);\n  useEffect(function () {\n    selectUnselect();\n  }, [props.selectedData]);\n  useEffect(function () {\n    if (isDrawCompleted) {\n      select(\"#transgraph-loading\").style(\"display\", \"none\");\n    } else {\n      select(\"#transgraph-loading\").style(\"display\", \"block\");\n    }\n  }, [isDrawCompleted]);\n  useEffect(function () {\n    if (cytoscapeRef.current && props.colorScale.colorType) {\n      var cy = cytoscapeRef.current;\n      cy.style().selector(\"node\").style({\n        \"background-color\": function backgroundColor(d) {\n          var isolate_name = d.data(\"label\");\n          var obj = props.isolateData.get(isolate_name);\n          var col = getColorScaleByObject(obj, props.colorScale);\n          return col;\n        }\n      }).update();\n      cytoscapeRef.current = cy;\n    }\n  }, [props.colorScale]);\n  useEffect(function () {\n    if (cytoscapeRef.current) {\n      var cy = cytoscapeRef.current;\n      cy.style().selector(\"edge\").style({\n        \"line-style\": function lineStyle(d) {\n          return isUserStyleApplied ? d.data(\"style\") : \"solid\";\n        },\n        \"line-color\": function lineColor(d) {\n          return isUserStyleApplied ? d.data(\"color\") : \"black\";\n        },\n        \"target-arrow-color\": function targetArrowColor(d) {\n          return isUserStyleApplied ? d.data(\"color\") : \"black\";\n        }\n      }).update();\n      cytoscapeRef.current = cy;\n    }\n  }, [isUserStyleApplied]);\n  useEffect(function () {\n    if (cytoscapeRef.current) {\n      var cy = cytoscapeRef.current;\n\n      if (isLinkLabelShown) {\n        cy.style().selector(\"edge\").style({\n          \"text-background-opacity\": 1,\n          \"text-opacity\": 1\n        }).update();\n        cytoscapeRef.current = cy;\n      } else {\n        cy.style().selector(\"edge\").style({\n          \"text-background-opacity\": 0,\n          \"text-opacity\": 0\n        }).update();\n        cytoscapeRef.current = cy;\n      }\n    }\n  }, [isLinkLabelShown]);\n  useEffect(function () {\n    if (cytoscapeRef.current) {\n      var cy = cytoscapeRef.current;\n\n      if (isLinkWeightApplied) {\n        cy.style().selector(\"edge\").style({\n          width: function width(e) {\n            return getEdgeArrowWidth(isLinkWeightApplied, e.data(\"weight\"), linkFactor, \"edge\");\n          },\n          \"arrow-scale\": function arrowScale(e) {\n            return getEdgeArrowWidth(isLinkWeightApplied, e.data(\"weight\"), linkFactor, \"arrow\");\n          }\n        }).update();\n        cytoscapeRef.current = cy;\n      } else {\n        cy.style().selector(\"edge\").style({\n          width: 3,\n          \"arrow-scale\": 1\n        }).update();\n        cytoscapeRef.current = cy;\n      }\n    }\n  }, [isLinkWeightApplied, linkFactor]); //Util\n\n  var getEdgeArrowWidth = function getEdgeArrowWidth(isEdgeWeightApplied, edgeWeight, weightFactor, option) {\n    if (isEdgeWeightApplied) {\n      var width = edgeWeight ? edgeWeight * weightFactor : 3;\n\n      if (option === \"edge\") {\n        return width;\n      } else {\n        var arrow_w = width < 1 ? width : 1;\n        return arrow_w;\n      }\n    } else {\n      if (option === \"edge\") {\n        return 3;\n      } else {\n        return 1;\n      }\n    }\n  }; //DRAW\n\n\n  function draw() {\n    //clean previous drawing artifacts\n    select(\"#transgraph-no-drawing\").style(\"display\", \"none\");\n    select(\"#transgraph-zoomButton-container\").style(\"display\", \"block\");\n    var graph_layout = {\n      name: layoutKey,\n      animate: false,\n      fit: true\n    };\n    var cy = cytoscape({\n      elements: transmission,\n      container: document.getElementById(\"transmission-cy\"),\n      pannable: true,\n      selected: true,\n      boxSelectionEnabled: false,\n      style: [{\n        selector: \"node\",\n        style: {\n          label: \"data(label)\",\n          \"border-width\": 3,\n          \"border-style\": \"solid\",\n          \"border-color\": \"black\"\n        }\n      }, {\n        selector: \"edge\",\n        style: {\n          label: \"data(weight)\",\n          \"font-size\": \"8px\",\n          \"text-background-color\": \"yellow\",\n          \"text-background-opacity\": 0,\n          \"text-opacity\": 0,\n          color: \"black\",\n          width: function width(e) {\n            return getEdgeArrowWidth(isLinkWeightApplied, e.data(\"weight\"), linkFactor, \"edge\");\n          },\n          \"line-style\": function lineStyle(d) {\n            return isUserStyleApplied ? d.data(\"style\") : \"solid\";\n          },\n          \"line-color\": function lineColor(d) {\n            return isUserStyleApplied ? d.data(\"color\") : \"black\";\n          },\n          \"target-arrow-color\": function targetArrowColor(d) {\n            return isUserStyleApplied ? d.data(\"color\") : \"black\";\n          },\n          \"target-arrow-shape\": function targetArrowShape(e) {\n            var arrowShape = e.data(\"dir\") === \"forward\" ? \"triangle\" : \"none\";\n            return arrowShape;\n          },\n          \"arrow-scale\": function arrowScale(e) {\n            return getEdgeArrowWidth(isLinkWeightApplied, e.data(\"weight\"), linkFactor, \"arrow\");\n          },\n          \"curve-style\": \"bezier\"\n        }\n      }, {\n        selector: \":selected\",\n        style: {\n          \"border-width\": \"5\",\n          \"border-color\": \"red\",\n          \"border-style\": \"dashed\",\n          padding: \"8px\"\n        }\n      }]\n    });\n    cy.selectionType(\"single\");\n    cy.layout(graph_layout).run(); //node event click listener\n\n    cy.nodes().bind(\"click\", function (evt) {\n      var clickedNode = [evt.target.data(\"label\")]; // let prevSelectedNodes = [];\n      // cy.nodes().forEach(function(n) {\n      //   if (n.selected()) {\n      //     prevSelectedNodes.push(n.data(\"label\"));\n      //   }\n      // });\n      // console.log(prevSelectedNodes);\n      // prevSelectedNodes.push(clickedNode);\n\n      props.setSelectedData(clickedNode);\n    }); //click on background listener\n\n    cy.on(\"click\", function (evt) {\n      if (evt.target === cy) {\n        props.setSelectedData([]);\n      }\n    }); // cy.on(\"box\", function(evt) {\n    //   props.setSelectedData([evt.target.data(\"label\")]);\n    // });\n    //color the nodes\n\n    cy.style().selector(\"node\").style({\n      \"background-color\": function backgroundColor(d) {\n        var isolate_name = d.data(\"label\");\n        var obj = props.isolateData.get(isolate_name);\n        var col = getColorScaleByObject(obj, props.colorScale);\n        return col;\n      }\n    }).update(); //save current Ref\n\n    cytoscapeRef.current = cy;\n    setisDrawCompleted(true);\n  } //SELECT & UNSELECT\n\n\n  function selectUnselect() {\n    if (cytoscapeRef.current) {\n      var cy = cytoscapeRef.current;\n\n      if (props.selectedData && props.selectedData.length > 0) {\n        cy.nodes().forEach(function (n) {\n          var node = n.data(\"label\");\n          var isNodeInSelectedData = props.selectedData.indexOf(node) === -1 ? false : true;\n\n          if (isNodeInSelectedData) {\n            n.select();\n          } else {\n            n.unselect();\n          }\n        });\n        cy.style().update();\n        cytoscapeRef.current = cy;\n      } else if (props.selectedData && props.selectedData.length === 0) {\n        cy.nodes().unselect();\n        cy.style().update();\n        cytoscapeRef.current = cy;\n      }\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 391,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"transmissionContainer\",\n    ref: transmissionContainerRef,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 392,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"transgraph-loading\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 393,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Spin, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 394,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"transgraph-no-drawing\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 396,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Empty, {\n    description: \"No chart: please click redraw button\",\n    image: Empty.PRESENTED_IMAGE_SIMPLE,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 397,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"transgraph-zoomButton-container\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 402,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    title: \"Clear selection\",\n    shape: \"circle\",\n    id: \"transgraph-clearSelection\",\n    size: \"medium\",\n    icon: /*#__PURE__*/React.createElement(ClearOutlined, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 408,\n        columnNumber: 19\n      }\n    }),\n    onClick: clearSelectedDataHandler,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 403,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"transmission-cy\",\n    style: {\n      width: props.width - 10,\n      height: props.height - 80\n    },\n    ref: transmissionCytoscapeRef,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 412,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default TransGraph;","map":{"version":3,"sources":["/Volumes/DATA/BUDI/APP_DEV/haiviz-v04/src/viz_TransGraph/chart_TransGraph_cytoscape.js"],"names":["React","useEffect","useRef","useState","select","getColorScaleByObject","removeAllChildFromNode","downloadFileAsText","Button","Empty","Spin","cytoscape","svg","ClearOutlined","usePrevious","spread","require","use","_","TransGraph","props","isDrawCompleted","setisDrawCompleted","transmission","cloneDeep","data","transmissionCytoscapeRef","transmissionContainerRef","cytoscapeRef","observedWidth","width","observedHeight","height","prevDimension","isInitialDraw","isUserStartResize","transgraphSettings","isUserStyleApplied","isLinkLabelShown","isLinkWeightApplied","layoutKey","linkFactor","transgraphIsDownloading","clearSelectedDataHandler","setSelectedData","cy","current","svgContent","scale","full","changeTransIsDownloading","style","draw","isUserRedraw","graph_layout","name","animate","fit","prelayout","layout","run","selectUnselect","selectedData","colorScale","colorType","selector","d","isolate_name","obj","isolateData","get","col","update","e","getEdgeArrowWidth","isEdgeWeightApplied","edgeWeight","weightFactor","option","arrow_w","elements","container","document","getElementById","pannable","selected","boxSelectionEnabled","label","color","arrowShape","padding","selectionType","nodes","bind","evt","clickedNode","target","on","length","forEach","n","node","isNodeInSelectedData","indexOf","unselect","PRESENTED_IMAGE_SIMPLE"],"mappings":";;;;;AAAA;;;;;;;;;;;AAWA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,SAASC,MAAT,QAAuB,cAAvB;AACA,SACEC,qBADF,EAEEC,sBAFF,EAGEC,kBAHF,QAIO,gBAJP;AAKA,SAASC,MAAT,EAAiBC,KAAjB,EAAwBC,IAAxB,QAAoC,MAApC;AACA,OAAO,wBAAP;AACA,OAAOC,SAAP,MAAsB,WAAtB;AAEA,OAAOC,GAAP,MAAgB,eAAhB;AACA,SAASC,aAAT,QAA8B,mBAA9B;AACA,OAAOC,WAAP,MAAwB,iCAAxB;;AAEA,IAAMC,MAAM,GAAGC,OAAO,CAAC,kBAAD,CAAtB;;AACAL,SAAS,CAACM,GAAV,CAAcF,MAAd,E,CAAuB;;AACvBJ,SAAS,CAACM,GAAV,CAAcL,GAAd;;AAEA,IAAMM,CAAC,GAAGF,OAAO,CAAC,QAAD,CAAjB;;AAEA,IAAMG,UAAU,GAAG,SAAbA,UAAa,CAACC,KAAD,EAAW;AAC5B;AAD4B,kBAEkBjB,QAAQ,CAAC,IAAD,CAF1B;AAAA;AAAA,MAErBkB,eAFqB;AAAA,MAEJC,kBAFI;;AAG5B,MAAMC,YAAY,GAAGL,CAAC,CAACM,SAAF,CAAYJ,KAAK,CAACK,IAAlB,CAArB;;AACA,MAAMC,wBAAwB,GAAGxB,MAAM,EAAvC;AACA,MAAMyB,wBAAwB,GAAGzB,MAAM,EAAvC;AACA,MAAM0B,YAAY,GAAG1B,MAAM,CAAC,IAAD,CAA3B;AACA,MAAM2B,aAAa,GAAGT,KAAK,CAACU,KAAN,GAAc,EAApC;AACA,MAAMC,cAAc,GAAGX,KAAK,CAACY,MAAN,GAAe,EAAtC;AACA,MAAMC,aAAa,GAAGnB,WAAW,CAACe,aAAa,GAAGE,cAAjB,CAAjC;AACA,MAAMG,aAAa,GAAGD,aAAa,IAAIA,aAAa,GAAG,CAAjC,GAAqC,IAArC,GAA4C,KAAlE,CAV4B,CAY5B;;AACA,MAAME,iBAAiB,GAAGf,KAAK,CAACgB,kBAAN,CAAyBD,iBAAnD;AACA,MAAME,kBAAkB,GAAGjB,KAAK,CAACgB,kBAAN,CAAyBC,kBAApD;AACA,MAAMC,gBAAgB,GAAGlB,KAAK,CAACgB,kBAAN,CAAyBE,gBAAlD;AACA,MAAMC,mBAAmB,GAAGnB,KAAK,CAACgB,kBAAN,CAAyBG,mBAArD;AACA,MAAMC,SAAS,GAAGpB,KAAK,CAACgB,kBAAN,CAAyBI,SAA3C;AACA,MAAMC,UAAU,GAAGrB,KAAK,CAACgB,kBAAN,CAAyBK,UAA5C;AACA,MAAMC,uBAAuB,GAC3BtB,KAAK,CAACgB,kBAAN,CAAyBM,uBAD3B,CAnB4B,CAqB5B;;AACA,MAAMC,wBAAwB,GAAG,SAA3BA,wBAA2B,GAAM;AACrCvB,IAAAA,KAAK,CAACwB,eAAN,CAAsB,EAAtB;AACD,GAFD,CAtB4B,CA0B5B;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;AACA3C,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIyC,uBAAJ,EAA6B;AAC3B,UAAIG,EAAE,GAAGjB,YAAY,CAACkB,OAAtB;AACA,UAAIC,UAAU,GAAGF,EAAE,CAACjC,GAAH,CAAO;AAAEoC,QAAAA,KAAK,EAAE,CAAT;AAAYC,QAAAA,IAAI,EAAE;AAAlB,OAAP,CAAjB;AACA1C,MAAAA,kBAAkB,CAAC,0BAAD,EAA6BwC,UAA7B,CAAlB;AACA3B,MAAAA,KAAK,CAAC8B,wBAAN,CAA+B,KAA/B;AACD;AACF,GAPQ,EAON,CAACR,uBAAD,CAPM,CAAT;AAQAzC,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIkC,iBAAJ,EAAuB;AACrB/B,MAAAA,MAAM,CAAC,kCAAD,CAAN,CAA2C+C,KAA3C,CAAiD,SAAjD,EAA4D,MAA5D;AACA/C,MAAAA,MAAM,CAAC,wBAAD,CAAN,CAAiC+C,KAAjC,CAAuC,SAAvC,EAAkD,OAAlD;AACA7C,MAAAA,sBAAsB,CAAC,kBAAD,CAAtB;AACD,KAJD,MAIO;AACL,UAAI4B,aAAJ,EAAmB;AACjBkB,QAAAA,IAAI;AACL,OAFD,MAEO;AACL,YAAIhC,KAAK,CAACiC,YAAV,EAAwB;AACtBD,UAAAA,IAAI;AACL;AACF;AACF;AACF,GAdQ,EAcN,CAAClB,aAAD,EAAgBC,iBAAhB,EAAmCf,KAAK,CAACiC,YAAzC,CAdM,CAAT,CApD4B,CAmE5B;;AACApD,EAAAA,SAAS,CAAC,YAAM;AACd,QAAI2B,YAAY,CAACkB,OAAjB,EAA0B;AACxB,UAAID,EAAE,GAAGjB,YAAY,CAACkB,OAAtB;AACA,UAAIQ,YAAY,GAAG;AACjBC,QAAAA,IAAI,EAAEf,SADW;AAEjBgB,QAAAA,OAAO,EAAE,KAFQ;AAGjBC,QAAAA,GAAG,EAAE,IAHY;AAIjBC,QAAAA,SAAS,EAAE;AAJM,OAAnB;AAMAb,MAAAA,EAAE,CAACc,MAAH,CAAUL,YAAV,EAAwBM,GAAxB;AACAhC,MAAAA,YAAY,CAACkB,OAAb,GAAuBD,EAAvB;AACD;AACF,GAZQ,EAYN,CAACL,SAAD,CAZM,CAAT;AAcAvC,EAAAA,SAAS,CAAC,YAAM;AACd4D,IAAAA,cAAc;AACf,GAFQ,EAEN,CAACzC,KAAK,CAAC0C,YAAP,CAFM,CAAT;AAIA7D,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIoB,eAAJ,EAAqB;AACnBjB,MAAAA,MAAM,CAAC,qBAAD,CAAN,CAA8B+C,KAA9B,CAAoC,SAApC,EAA+C,MAA/C;AACD,KAFD,MAEO;AACL/C,MAAAA,MAAM,CAAC,qBAAD,CAAN,CAA8B+C,KAA9B,CAAoC,SAApC,EAA+C,OAA/C;AACD;AACF,GANQ,EAMN,CAAC9B,eAAD,CANM,CAAT;AAQApB,EAAAA,SAAS,CAAC,YAAM;AACd,QAAI2B,YAAY,CAACkB,OAAb,IAAwB1B,KAAK,CAAC2C,UAAN,CAAiBC,SAA7C,EAAwD;AACtD,UAAInB,EAAE,GAAGjB,YAAY,CAACkB,OAAtB;AACAD,MAAAA,EAAE,CAACM,KAAH,GACGc,QADH,CACY,MADZ,EAEGd,KAFH,CAES;AACL,4BAAoB,yBAASe,CAAT,EAAY;AAC9B,cAAIC,YAAY,GAAGD,CAAC,CAACzC,IAAF,CAAO,OAAP,CAAnB;AACA,cAAI2C,GAAG,GAAGhD,KAAK,CAACiD,WAAN,CAAkBC,GAAlB,CAAsBH,YAAtB,CAAV;AACA,cAAII,GAAG,GAAGlE,qBAAqB,CAAC+D,GAAD,EAAMhD,KAAK,CAAC2C,UAAZ,CAA/B;AACA,iBAAOQ,GAAP;AACD;AANI,OAFT,EAUGC,MAVH;AAWA5C,MAAAA,YAAY,CAACkB,OAAb,GAAuBD,EAAvB;AACD;AACF,GAhBQ,EAgBN,CAACzB,KAAK,CAAC2C,UAAP,CAhBM,CAAT;AAkBA9D,EAAAA,SAAS,CAAC,YAAM;AACd,QAAI2B,YAAY,CAACkB,OAAjB,EAA0B;AACxB,UAAID,EAAE,GAAGjB,YAAY,CAACkB,OAAtB;AACAD,MAAAA,EAAE,CAACM,KAAH,GACGc,QADH,CACY,MADZ,EAEGd,KAFH,CAES;AACL,sBAAc,mBAACe,CAAD;AAAA,iBAAQ7B,kBAAkB,GAAG6B,CAAC,CAACzC,IAAF,CAAO,OAAP,CAAH,GAAqB,OAA/C;AAAA,SADT;AAEL,sBAAc,mBAACyC,CAAD;AAAA,iBAAQ7B,kBAAkB,GAAG6B,CAAC,CAACzC,IAAF,CAAO,OAAP,CAAH,GAAqB,OAA/C;AAAA,SAFT;AAGL,8BAAsB,0BAACyC,CAAD;AAAA,iBACpB7B,kBAAkB,GAAG6B,CAAC,CAACzC,IAAF,CAAO,OAAP,CAAH,GAAqB,OADnB;AAAA;AAHjB,OAFT,EAQG+C,MARH;AASA5C,MAAAA,YAAY,CAACkB,OAAb,GAAuBD,EAAvB;AACD;AACF,GAdQ,EAcN,CAACR,kBAAD,CAdM,CAAT;AAgBApC,EAAAA,SAAS,CAAC,YAAM;AACd,QAAI2B,YAAY,CAACkB,OAAjB,EAA0B;AACxB,UAAID,EAAE,GAAGjB,YAAY,CAACkB,OAAtB;;AACA,UAAIR,gBAAJ,EAAsB;AACpBO,QAAAA,EAAE,CAACM,KAAH,GACGc,QADH,CACY,MADZ,EAEGd,KAFH,CAES;AACL,qCAA2B,CADtB;AAEL,0BAAgB;AAFX,SAFT,EAMGqB,MANH;AAOA5C,QAAAA,YAAY,CAACkB,OAAb,GAAuBD,EAAvB;AACD,OATD,MASO;AACLA,QAAAA,EAAE,CAACM,KAAH,GACGc,QADH,CACY,MADZ,EAEGd,KAFH,CAES;AACL,qCAA2B,CADtB;AAEL,0BAAgB;AAFX,SAFT,EAMGqB,MANH;AAOA5C,QAAAA,YAAY,CAACkB,OAAb,GAAuBD,EAAvB;AACD;AACF;AACF,GAvBQ,EAuBN,CAACP,gBAAD,CAvBM,CAAT;AAyBArC,EAAAA,SAAS,CAAC,YAAM;AACd,QAAI2B,YAAY,CAACkB,OAAjB,EAA0B;AACxB,UAAID,EAAE,GAAGjB,YAAY,CAACkB,OAAtB;;AACA,UAAIP,mBAAJ,EAAyB;AACvBM,QAAAA,EAAE,CAACM,KAAH,GACGc,QADH,CACY,MADZ,EAEGd,KAFH,CAES;AACLrB,UAAAA,KAAK,EAAE,eAAS2C,CAAT,EAAY;AACjB,mBAAOC,iBAAiB,CACtBnC,mBADsB,EAEtBkC,CAAC,CAAChD,IAAF,CAAO,QAAP,CAFsB,EAGtBgB,UAHsB,EAItB,MAJsB,CAAxB;AAMD,WARI;AASL,yBAAe,oBAASgC,CAAT,EAAY;AACzB,mBAAOC,iBAAiB,CACtBnC,mBADsB,EAEtBkC,CAAC,CAAChD,IAAF,CAAO,QAAP,CAFsB,EAGtBgB,UAHsB,EAItB,OAJsB,CAAxB;AAMD;AAhBI,SAFT,EAoBG+B,MApBH;AAqBA5C,QAAAA,YAAY,CAACkB,OAAb,GAAuBD,EAAvB;AACD,OAvBD,MAuBO;AACLA,QAAAA,EAAE,CAACM,KAAH,GACGc,QADH,CACY,MADZ,EAEGd,KAFH,CAES;AACLrB,UAAAA,KAAK,EAAE,CADF;AAEL,yBAAe;AAFV,SAFT,EAMG0C,MANH;AAOA5C,QAAAA,YAAY,CAACkB,OAAb,GAAuBD,EAAvB;AACD;AACF;AACF,GArCQ,EAqCN,CAACN,mBAAD,EAAsBE,UAAtB,CArCM,CAAT,CAzJ4B,CAgM5B;;AACA,MAAMiC,iBAAiB,GAAG,SAApBA,iBAAoB,CACxBC,mBADwB,EAExBC,UAFwB,EAGxBC,YAHwB,EAIxBC,MAJwB,EAKxB;AACA,QAAIH,mBAAJ,EAAyB;AACvB,UAAI7C,KAAK,GAAG8C,UAAU,GAAGA,UAAU,GAAGC,YAAhB,GAA+B,CAArD;;AACA,UAAIC,MAAM,KAAK,MAAf,EAAuB;AACrB,eAAOhD,KAAP;AACD,OAFD,MAEO;AACL,YAAIiD,OAAO,GAAGjD,KAAK,GAAG,CAAR,GAAYA,KAAZ,GAAoB,CAAlC;AACA,eAAOiD,OAAP;AACD;AACF,KARD,MAQO;AACL,UAAID,MAAM,KAAK,MAAf,EAAuB;AACrB,eAAO,CAAP;AACD,OAFD,MAEO;AACL,eAAO,CAAP;AACD;AACF;AACF,GArBD,CAjM4B,CAwN5B;;;AACA,WAAS1B,IAAT,GAAgB;AACd;AACAhD,IAAAA,MAAM,CAAC,wBAAD,CAAN,CAAiC+C,KAAjC,CAAuC,SAAvC,EAAkD,MAAlD;AACA/C,IAAAA,MAAM,CAAC,kCAAD,CAAN,CAA2C+C,KAA3C,CAAiD,SAAjD,EAA4D,OAA5D;AACA,QAAMG,YAAY,GAAG;AAAEC,MAAAA,IAAI,EAAEf,SAAR;AAAmBgB,MAAAA,OAAO,EAAE,KAA5B;AAAmCC,MAAAA,GAAG,EAAE;AAAxC,KAArB;AAEA,QAAMZ,EAAE,GAAGlC,SAAS,CAAC;AACnBqE,MAAAA,QAAQ,EAAEzD,YADS;AAEnB0D,MAAAA,SAAS,EAAEC,QAAQ,CAACC,cAAT,CAAwB,iBAAxB,CAFQ;AAGnBC,MAAAA,QAAQ,EAAE,IAHS;AAInBC,MAAAA,QAAQ,EAAE,IAJS;AAKnBC,MAAAA,mBAAmB,EAAE,KALF;AAMnBnC,MAAAA,KAAK,EAAE,CACL;AACEc,QAAAA,QAAQ,EAAE,MADZ;AAEEd,QAAAA,KAAK,EAAE;AACLoC,UAAAA,KAAK,EAAE,aADF;AAEL,0BAAgB,CAFX;AAGL,0BAAgB,OAHX;AAIL,0BAAgB;AAJX;AAFT,OADK,EAUL;AACEtB,QAAAA,QAAQ,EAAE,MADZ;AAEEd,QAAAA,KAAK,EAAE;AACLoC,UAAAA,KAAK,EAAE,cADF;AAEL,uBAAa,KAFR;AAGL,mCAAyB,QAHpB;AAIL,qCAA2B,CAJtB;AAKL,0BAAgB,CALX;AAMLC,UAAAA,KAAK,EAAE,OANF;AAOL1D,UAAAA,KAAK,EAAE,eAAS2C,CAAT,EAAY;AACjB,mBAAOC,iBAAiB,CACtBnC,mBADsB,EAEtBkC,CAAC,CAAChD,IAAF,CAAO,QAAP,CAFsB,EAGtBgB,UAHsB,EAItB,MAJsB,CAAxB;AAMD,WAdI;AAeL,wBAAc,mBAACyB,CAAD;AAAA,mBACZ7B,kBAAkB,GAAG6B,CAAC,CAACzC,IAAF,CAAO,OAAP,CAAH,GAAqB,OAD3B;AAAA,WAfT;AAiBL,wBAAc,mBAACyC,CAAD;AAAA,mBACZ7B,kBAAkB,GAAG6B,CAAC,CAACzC,IAAF,CAAO,OAAP,CAAH,GAAqB,OAD3B;AAAA,WAjBT;AAmBL,gCAAsB,0BAACyC,CAAD;AAAA,mBACpB7B,kBAAkB,GAAG6B,CAAC,CAACzC,IAAF,CAAO,OAAP,CAAH,GAAqB,OADnB;AAAA,WAnBjB;AAqBL,gCAAsB,0BAASgD,CAAT,EAAY;AAChC,gBAAIgB,UAAU,GACZhB,CAAC,CAAChD,IAAF,CAAO,KAAP,MAAkB,SAAlB,GAA8B,UAA9B,GAA2C,MAD7C;AAEA,mBAAOgE,UAAP;AACD,WAzBI;AA0BL,yBAAe,oBAAShB,CAAT,EAAY;AACzB,mBAAOC,iBAAiB,CACtBnC,mBADsB,EAEtBkC,CAAC,CAAChD,IAAF,CAAO,QAAP,CAFsB,EAGtBgB,UAHsB,EAItB,OAJsB,CAAxB;AAMD,WAjCI;AAkCL,yBAAe;AAlCV;AAFT,OAVK,EAiDL;AACEwB,QAAAA,QAAQ,EAAE,WADZ;AAEEd,QAAAA,KAAK,EAAE;AACL,0BAAgB,GADX;AAEL,0BAAgB,KAFX;AAGL,0BAAgB,QAHX;AAILuC,UAAAA,OAAO,EAAE;AAJJ;AAFT,OAjDK;AANY,KAAD,CAApB;AAkEA7C,IAAAA,EAAE,CAAC8C,aAAH,CAAiB,QAAjB;AACA9C,IAAAA,EAAE,CAACc,MAAH,CAAUL,YAAV,EAAwBM,GAAxB,GAzEc,CA2Ed;;AACAf,IAAAA,EAAE,CAAC+C,KAAH,GAAWC,IAAX,CAAgB,OAAhB,EAAyB,UAASC,GAAT,EAAc;AACrC,UAAIC,WAAW,GAAG,CAACD,GAAG,CAACE,MAAJ,CAAWvE,IAAX,CAAgB,OAAhB,CAAD,CAAlB,CADqC,CAErC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAL,MAAAA,KAAK,CAACwB,eAAN,CAAsBmD,WAAtB;AACD,KAXD,EA5Ec,CAwFd;;AACAlD,IAAAA,EAAE,CAACoD,EAAH,CAAM,OAAN,EAAe,UAASH,GAAT,EAAc;AAC3B,UAAIA,GAAG,CAACE,MAAJ,KAAenD,EAAnB,EAAuB;AACrBzB,QAAAA,KAAK,CAACwB,eAAN,CAAsB,EAAtB;AACD;AACF,KAJD,EAzFc,CA8Fd;AACA;AACA;AAEA;;AACAC,IAAAA,EAAE,CAACM,KAAH,GACGc,QADH,CACY,MADZ,EAEGd,KAFH,CAES;AACL,0BAAoB,yBAASe,CAAT,EAAY;AAC9B,YAAIC,YAAY,GAAGD,CAAC,CAACzC,IAAF,CAAO,OAAP,CAAnB;AACA,YAAI2C,GAAG,GAAGhD,KAAK,CAACiD,WAAN,CAAkBC,GAAlB,CAAsBH,YAAtB,CAAV;AACA,YAAII,GAAG,GAAGlE,qBAAqB,CAAC+D,GAAD,EAAMhD,KAAK,CAAC2C,UAAZ,CAA/B;AACA,eAAOQ,GAAP;AACD;AANI,KAFT,EAUGC,MAVH,GAnGc,CA+Gd;;AACA5C,IAAAA,YAAY,CAACkB,OAAb,GAAuBD,EAAvB;AACAvB,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACD,GA3U2B,CA4U5B;;;AACA,WAASuC,cAAT,GAA0B;AACxB,QAAIjC,YAAY,CAACkB,OAAjB,EAA0B;AACxB,UAAID,EAAE,GAAGjB,YAAY,CAACkB,OAAtB;;AACA,UAAI1B,KAAK,CAAC0C,YAAN,IAAsB1C,KAAK,CAAC0C,YAAN,CAAmBoC,MAAnB,GAA4B,CAAtD,EAAyD;AACvDrD,QAAAA,EAAE,CAAC+C,KAAH,GAAWO,OAAX,CAAmB,UAASC,CAAT,EAAY;AAC7B,cAAIC,IAAI,GAAGD,CAAC,CAAC3E,IAAF,CAAO,OAAP,CAAX;AACA,cAAI6E,oBAAoB,GACtBlF,KAAK,CAAC0C,YAAN,CAAmByC,OAAnB,CAA2BF,IAA3B,MAAqC,CAAC,CAAtC,GAA0C,KAA1C,GAAkD,IADpD;;AAEA,cAAIC,oBAAJ,EAA0B;AACxBF,YAAAA,CAAC,CAAChG,MAAF;AACD,WAFD,MAEO;AACLgG,YAAAA,CAAC,CAACI,QAAF;AACD;AACF,SATD;AAUA3D,QAAAA,EAAE,CAACM,KAAH,GAAWqB,MAAX;AACA5C,QAAAA,YAAY,CAACkB,OAAb,GAAuBD,EAAvB;AACD,OAbD,MAaO,IAAIzB,KAAK,CAAC0C,YAAN,IAAsB1C,KAAK,CAAC0C,YAAN,CAAmBoC,MAAnB,KAA8B,CAAxD,EAA2D;AAChErD,QAAAA,EAAE,CAAC+C,KAAH,GAAWY,QAAX;AACA3D,QAAAA,EAAE,CAACM,KAAH,GAAWqB,MAAX;AACA5C,QAAAA,YAAY,CAACkB,OAAb,GAAuBD,EAAvB;AACD;AACF;AACF;;AAED,sBACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,EAAE,EAAC,uBAAR;AAAgC,IAAA,GAAG,EAAElB,wBAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,EAAE,EAAC,oBAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,eAIE;AAAK,IAAA,EAAE,EAAC,uBAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,KAAD;AACE,IAAA,WAAW,EAAE,sCADf;AAEE,IAAA,KAAK,EAAElB,KAAK,CAACgG,sBAFf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAJF,eAUE;AAAK,IAAA,EAAE,EAAC,iCAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AACE,IAAA,KAAK,EAAE,iBADT;AAEE,IAAA,KAAK,EAAE,QAFT;AAGE,IAAA,EAAE,EAAE,2BAHN;AAIE,IAAA,IAAI,EAAE,QAJR;AAKE,IAAA,IAAI,eAAE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALR;AAME,IAAA,OAAO,EAAE9D,wBANX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAVF,eAoBE;AACE,IAAA,EAAE,EAAC,iBADL;AAEE,IAAA,KAAK,EAAE;AAAEb,MAAAA,KAAK,EAAEV,KAAK,CAACU,KAAN,GAAc,EAAvB;AAA2BE,MAAAA,MAAM,EAAEZ,KAAK,CAACY,MAAN,GAAe;AAAlD,KAFT;AAGE,IAAA,GAAG,EAAEN,wBAHP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IApBF,CADF,CADF;AA8BD,CAnYD;;AAqYA,eAAeP,UAAf","sourcesContent":["/* ============================================================================\nTransmission graph card:\n- when dataset for chart is available, render transmission graph viewer\n- what you need: zoom by button, drag by mouse, select area using polybrush,\n-  change link distance, filter by link's weight, change force charge strength\n// at initial process (dimensions is null) skip drawing, wait until dimensions is available\n// run drawing when only: change in width, props.data\n// when zoom, select the root cytoscapeGraph_contGroup, translate using zoomTransform not re-render/set new state (this approach is faster!)\n// iterate draw function when only page refreshed\n//\n============================================================================ */\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { select } from \"d3-selection\";\nimport {\n  getColorScaleByObject,\n  removeAllChildFromNode,\n  downloadFileAsText,\n} from \"../utils/utils\";\nimport { Button, Empty, Spin } from \"antd\";\nimport \"./style_TransGraph.css\";\nimport cytoscape from \"cytoscape\";\n\nimport svg from \"cytoscape-svg\";\nimport { ClearOutlined } from \"@ant-design/icons\";\nimport usePrevious from \"../react_hooks/usePrevious-hook\";\n\nconst spread = require(\"cytoscape-spread\");\ncytoscape.use(spread); // register extension\ncytoscape.use(svg);\n\nconst _ = require(\"lodash\");\n\nconst TransGraph = (props) => {\n  //DRAWING CONSTRUCTOR\n  const [isDrawCompleted, setisDrawCompleted] = useState(null);\n  const transmission = _.cloneDeep(props.data);\n  const transmissionCytoscapeRef = useRef();\n  const transmissionContainerRef = useRef();\n  const cytoscapeRef = useRef(null);\n  const observedWidth = props.width - 10;\n  const observedHeight = props.height - 80;\n  const prevDimension = usePrevious(observedWidth + observedHeight);\n  const isInitialDraw = prevDimension && prevDimension < 0 ? true : false;\n\n  //SETTINGS\n  const isUserStartResize = props.transgraphSettings.isUserStartResize;\n  const isUserStyleApplied = props.transgraphSettings.isUserStyleApplied;\n  const isLinkLabelShown = props.transgraphSettings.isLinkLabelShown;\n  const isLinkWeightApplied = props.transgraphSettings.isLinkWeightApplied;\n  const layoutKey = props.transgraphSettings.layoutKey;\n  const linkFactor = props.transgraphSettings.linkFactor;\n  const transgraphIsDownloading =\n    props.transgraphSettings.transgraphIsDownloading;\n  //HANDLERS\n  const clearSelectedDataHandler = () => {\n    props.setSelectedData([]);\n  };\n\n  // const boxSelectionHandler = () => {\n  //   if (cytoscapeRef.current) {\n  //     let cy = cytoscapeRef.current;\n\n  //     let selectedNodes = [];\n  //     cy.nodes().forEach(function(n) {\n  //       console.log(n.selected());\n  //       if (n.active()) {\n  //         selectedNodes.push(n.data(\"label\"));\n  //       }\n  //     });\n  //     //console.log(selectedNodes);\n  //     //props.setSelectedData(selectedNodes);\n  //   }\n  // };\n\n  //USE-EFFECTS\n  //downloading\n  useEffect(() => {\n    if (transgraphIsDownloading) {\n      let cy = cytoscapeRef.current;\n      let svgContent = cy.svg({ scale: 1, full: true });\n      downloadFileAsText(\"HAIviz-cytoscape-svg.svg\", svgContent);\n      props.changeTransIsDownloading(false);\n    }\n  }, [transgraphIsDownloading]);\n  useEffect(() => {\n    if (isUserStartResize) {\n      select(\"#transgraph-zoomButton-container\").style(\"display\", \"none\");\n      select(\"#transgraph-no-drawing\").style(\"display\", \"block\");\n      removeAllChildFromNode(\"#transmission-cy\");\n    } else {\n      if (isInitialDraw) {\n        draw();\n      } else {\n        if (props.isUserRedraw) {\n          draw();\n        }\n      }\n    }\n  }, [isInitialDraw, isUserStartResize, props.isUserRedraw]);\n  //changing layout\n  useEffect(() => {\n    if (cytoscapeRef.current) {\n      let cy = cytoscapeRef.current;\n      let graph_layout = {\n        name: layoutKey,\n        animate: false,\n        fit: true,\n        prelayout: false,\n      };\n      cy.layout(graph_layout).run();\n      cytoscapeRef.current = cy;\n    }\n  }, [layoutKey]);\n\n  useEffect(() => {\n    selectUnselect();\n  }, [props.selectedData]);\n\n  useEffect(() => {\n    if (isDrawCompleted) {\n      select(\"#transgraph-loading\").style(\"display\", \"none\");\n    } else {\n      select(\"#transgraph-loading\").style(\"display\", \"block\");\n    }\n  }, [isDrawCompleted]);\n\n  useEffect(() => {\n    if (cytoscapeRef.current && props.colorScale.colorType) {\n      let cy = cytoscapeRef.current;\n      cy.style()\n        .selector(\"node\")\n        .style({\n          \"background-color\": function(d) {\n            let isolate_name = d.data(\"label\");\n            let obj = props.isolateData.get(isolate_name);\n            let col = getColorScaleByObject(obj, props.colorScale);\n            return col;\n          },\n        })\n        .update();\n      cytoscapeRef.current = cy;\n    }\n  }, [props.colorScale]);\n\n  useEffect(() => {\n    if (cytoscapeRef.current) {\n      let cy = cytoscapeRef.current;\n      cy.style()\n        .selector(\"edge\")\n        .style({\n          \"line-style\": (d) => (isUserStyleApplied ? d.data(\"style\") : \"solid\"),\n          \"line-color\": (d) => (isUserStyleApplied ? d.data(\"color\") : \"black\"),\n          \"target-arrow-color\": (d) =>\n            isUserStyleApplied ? d.data(\"color\") : \"black\",\n        })\n        .update();\n      cytoscapeRef.current = cy;\n    }\n  }, [isUserStyleApplied]);\n\n  useEffect(() => {\n    if (cytoscapeRef.current) {\n      let cy = cytoscapeRef.current;\n      if (isLinkLabelShown) {\n        cy.style()\n          .selector(\"edge\")\n          .style({\n            \"text-background-opacity\": 1,\n            \"text-opacity\": 1,\n          })\n          .update();\n        cytoscapeRef.current = cy;\n      } else {\n        cy.style()\n          .selector(\"edge\")\n          .style({\n            \"text-background-opacity\": 0,\n            \"text-opacity\": 0,\n          })\n          .update();\n        cytoscapeRef.current = cy;\n      }\n    }\n  }, [isLinkLabelShown]);\n\n  useEffect(() => {\n    if (cytoscapeRef.current) {\n      let cy = cytoscapeRef.current;\n      if (isLinkWeightApplied) {\n        cy.style()\n          .selector(\"edge\")\n          .style({\n            width: function(e) {\n              return getEdgeArrowWidth(\n                isLinkWeightApplied,\n                e.data(\"weight\"),\n                linkFactor,\n                \"edge\"\n              );\n            },\n            \"arrow-scale\": function(e) {\n              return getEdgeArrowWidth(\n                isLinkWeightApplied,\n                e.data(\"weight\"),\n                linkFactor,\n                \"arrow\"\n              );\n            },\n          })\n          .update();\n        cytoscapeRef.current = cy;\n      } else {\n        cy.style()\n          .selector(\"edge\")\n          .style({\n            width: 3,\n            \"arrow-scale\": 1,\n          })\n          .update();\n        cytoscapeRef.current = cy;\n      }\n    }\n  }, [isLinkWeightApplied, linkFactor]);\n\n  //Util\n  const getEdgeArrowWidth = function(\n    isEdgeWeightApplied,\n    edgeWeight,\n    weightFactor,\n    option\n  ) {\n    if (isEdgeWeightApplied) {\n      let width = edgeWeight ? edgeWeight * weightFactor : 3;\n      if (option === \"edge\") {\n        return width;\n      } else {\n        let arrow_w = width < 1 ? width : 1;\n        return arrow_w;\n      }\n    } else {\n      if (option === \"edge\") {\n        return 3;\n      } else {\n        return 1;\n      }\n    }\n  };\n\n  //DRAW\n  function draw() {\n    //clean previous drawing artifacts\n    select(\"#transgraph-no-drawing\").style(\"display\", \"none\");\n    select(\"#transgraph-zoomButton-container\").style(\"display\", \"block\");\n    const graph_layout = { name: layoutKey, animate: false, fit: true };\n\n    const cy = cytoscape({\n      elements: transmission,\n      container: document.getElementById(\"transmission-cy\"),\n      pannable: true,\n      selected: true,\n      boxSelectionEnabled: false,\n      style: [\n        {\n          selector: \"node\",\n          style: {\n            label: \"data(label)\",\n            \"border-width\": 3,\n            \"border-style\": \"solid\",\n            \"border-color\": \"black\",\n          },\n        },\n        {\n          selector: \"edge\",\n          style: {\n            label: \"data(weight)\",\n            \"font-size\": \"8px\",\n            \"text-background-color\": \"yellow\",\n            \"text-background-opacity\": 0,\n            \"text-opacity\": 0,\n            color: \"black\",\n            width: function(e) {\n              return getEdgeArrowWidth(\n                isLinkWeightApplied,\n                e.data(\"weight\"),\n                linkFactor,\n                \"edge\"\n              );\n            },\n            \"line-style\": (d) =>\n              isUserStyleApplied ? d.data(\"style\") : \"solid\",\n            \"line-color\": (d) =>\n              isUserStyleApplied ? d.data(\"color\") : \"black\",\n            \"target-arrow-color\": (d) =>\n              isUserStyleApplied ? d.data(\"color\") : \"black\",\n            \"target-arrow-shape\": function(e) {\n              let arrowShape =\n                e.data(\"dir\") === \"forward\" ? \"triangle\" : \"none\";\n              return arrowShape;\n            },\n            \"arrow-scale\": function(e) {\n              return getEdgeArrowWidth(\n                isLinkWeightApplied,\n                e.data(\"weight\"),\n                linkFactor,\n                \"arrow\"\n              );\n            },\n            \"curve-style\": \"bezier\",\n          },\n        },\n        {\n          selector: \":selected\",\n          style: {\n            \"border-width\": \"5\",\n            \"border-color\": \"red\",\n            \"border-style\": \"dashed\",\n            padding: \"8px\",\n          },\n        },\n      ],\n    });\n    cy.selectionType(\"single\");\n    cy.layout(graph_layout).run();\n\n    //node event click listener\n    cy.nodes().bind(\"click\", function(evt) {\n      let clickedNode = [evt.target.data(\"label\")];\n      // let prevSelectedNodes = [];\n      // cy.nodes().forEach(function(n) {\n      //   if (n.selected()) {\n      //     prevSelectedNodes.push(n.data(\"label\"));\n      //   }\n      // });\n      // console.log(prevSelectedNodes);\n      // prevSelectedNodes.push(clickedNode);\n      props.setSelectedData(clickedNode);\n    });\n    //click on background listener\n    cy.on(\"click\", function(evt) {\n      if (evt.target === cy) {\n        props.setSelectedData([]);\n      }\n    });\n    // cy.on(\"box\", function(evt) {\n    //   props.setSelectedData([evt.target.data(\"label\")]);\n    // });\n\n    //color the nodes\n    cy.style()\n      .selector(\"node\")\n      .style({\n        \"background-color\": function(d) {\n          let isolate_name = d.data(\"label\");\n          let obj = props.isolateData.get(isolate_name);\n          let col = getColorScaleByObject(obj, props.colorScale);\n          return col;\n        },\n      })\n      .update();\n\n    //save current Ref\n    cytoscapeRef.current = cy;\n    setisDrawCompleted(true);\n  }\n  //SELECT & UNSELECT\n  function selectUnselect() {\n    if (cytoscapeRef.current) {\n      let cy = cytoscapeRef.current;\n      if (props.selectedData && props.selectedData.length > 0) {\n        cy.nodes().forEach(function(n) {\n          let node = n.data(\"label\");\n          let isNodeInSelectedData =\n            props.selectedData.indexOf(node) === -1 ? false : true;\n          if (isNodeInSelectedData) {\n            n.select();\n          } else {\n            n.unselect();\n          }\n        });\n        cy.style().update();\n        cytoscapeRef.current = cy;\n      } else if (props.selectedData && props.selectedData.length === 0) {\n        cy.nodes().unselect();\n        cy.style().update();\n        cytoscapeRef.current = cy;\n      }\n    }\n  }\n\n  return (\n    <React.Fragment>\n      <div id=\"transmissionContainer\" ref={transmissionContainerRef}>\n        <div id=\"transgraph-loading\">\n          <Spin />\n        </div>\n        <div id=\"transgraph-no-drawing\">\n          <Empty\n            description={\"No chart: please click redraw button\"}\n            image={Empty.PRESENTED_IMAGE_SIMPLE}\n          />\n        </div>\n        <div id=\"transgraph-zoomButton-container\">\n          <Button\n            title={\"Clear selection\"}\n            shape={\"circle\"}\n            id={\"transgraph-clearSelection\"}\n            size={\"medium\"}\n            icon={<ClearOutlined />}\n            onClick={clearSelectedDataHandler}\n          ></Button>\n        </div>\n        <div\n          id=\"transmission-cy\"\n          style={{ width: props.width - 10, height: props.height - 80 }}\n          ref={transmissionCytoscapeRef}\n        ></div>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default TransGraph;\n"]},"metadata":{},"sourceType":"module"}