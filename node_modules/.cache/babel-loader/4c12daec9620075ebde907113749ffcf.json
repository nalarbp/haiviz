{"ast":null,"code":"var _typeof = require(\"@babel/runtime/helpers/typeof\");\n\nvar sax = require('sax');\n\nvar expat\n/*= require('node-expat');*/\n= {\n  on: function on() {},\n  parse: function parse() {}\n};\n\nvar helper = require('./options-helper');\n\nvar isArray = require('./array-helper').isArray;\n\nvar options;\nvar pureJsParser = true;\nvar currentElement;\n\nfunction validateOptions(userOptions) {\n  options = helper.copyOptions(userOptions);\n  helper.ensureFlagExists('ignoreDeclaration', options);\n  helper.ensureFlagExists('ignoreInstruction', options);\n  helper.ensureFlagExists('ignoreAttributes', options);\n  helper.ensureFlagExists('ignoreText', options);\n  helper.ensureFlagExists('ignoreComment', options);\n  helper.ensureFlagExists('ignoreCdata', options);\n  helper.ensureFlagExists('ignoreDoctype', options);\n  helper.ensureFlagExists('compact', options);\n  helper.ensureFlagExists('alwaysChildren', options);\n  helper.ensureFlagExists('addParent', options);\n  helper.ensureFlagExists('trim', options);\n  helper.ensureFlagExists('nativeType', options);\n  helper.ensureFlagExists('nativeTypeAttributes', options);\n  helper.ensureFlagExists('sanitize', options);\n  helper.ensureFlagExists('instructionHasAttributes', options);\n  helper.ensureFlagExists('captureSpacesBetweenElements', options);\n  helper.ensureAlwaysArrayExists(options);\n  helper.ensureKeyExists('declaration', options);\n  helper.ensureKeyExists('instruction', options);\n  helper.ensureKeyExists('attributes', options);\n  helper.ensureKeyExists('text', options);\n  helper.ensureKeyExists('comment', options);\n  helper.ensureKeyExists('cdata', options);\n  helper.ensureKeyExists('doctype', options);\n  helper.ensureKeyExists('type', options);\n  helper.ensureKeyExists('name', options);\n  helper.ensureKeyExists('elements', options);\n  helper.ensureKeyExists('parent', options);\n  helper.checkFnExists('doctype', options);\n  helper.checkFnExists('instruction', options);\n  helper.checkFnExists('cdata', options);\n  helper.checkFnExists('comment', options);\n  helper.checkFnExists('text', options);\n  helper.checkFnExists('instructionName', options);\n  helper.checkFnExists('elementName', options);\n  helper.checkFnExists('attributeName', options);\n  helper.checkFnExists('attributeValue', options);\n  helper.checkFnExists('attributes', options);\n  return options;\n}\n\nfunction nativeType(value) {\n  var nValue = Number(value);\n\n  if (!isNaN(nValue)) {\n    return nValue;\n  }\n\n  var bValue = value.toLowerCase();\n\n  if (bValue === 'true') {\n    return true;\n  } else if (bValue === 'false') {\n    return false;\n  }\n\n  return value;\n}\n\nfunction addField(type, value) {\n  var key;\n\n  if (options.compact) {\n    if (!currentElement[options[type + 'Key']] && (isArray(options.alwaysArray) ? options.alwaysArray.indexOf(options[type + 'Key']) !== -1 : options.alwaysArray)) {\n      currentElement[options[type + 'Key']] = [];\n    }\n\n    if (currentElement[options[type + 'Key']] && !isArray(currentElement[options[type + 'Key']])) {\n      currentElement[options[type + 'Key']] = [currentElement[options[type + 'Key']]];\n    }\n\n    if (type + 'Fn' in options && typeof value === 'string') {\n      value = options[type + 'Fn'](value, currentElement);\n    }\n\n    if (type === 'instruction' && ('instructionFn' in options || 'instructionNameFn' in options)) {\n      for (key in value) {\n        if (value.hasOwnProperty(key)) {\n          if ('instructionFn' in options) {\n            value[key] = options.instructionFn(value[key], key, currentElement);\n          } else {\n            var temp = value[key];\n            delete value[key];\n            value[options.instructionNameFn(key, temp, currentElement)] = temp;\n          }\n        }\n      }\n    }\n\n    if (isArray(currentElement[options[type + 'Key']])) {\n      currentElement[options[type + 'Key']].push(value);\n    } else {\n      currentElement[options[type + 'Key']] = value;\n    }\n  } else {\n    if (!currentElement[options.elementsKey]) {\n      currentElement[options.elementsKey] = [];\n    }\n\n    var element = {};\n    element[options.typeKey] = type;\n\n    if (type === 'instruction') {\n      for (key in value) {\n        if (value.hasOwnProperty(key)) {\n          break;\n        }\n      }\n\n      element[options.nameKey] = 'instructionNameFn' in options ? options.instructionNameFn(key, value, currentElement) : key;\n\n      if (options.instructionHasAttributes) {\n        element[options.attributesKey] = value[key][options.attributesKey];\n\n        if ('instructionFn' in options) {\n          element[options.attributesKey] = options.instructionFn(element[options.attributesKey], key, currentElement);\n        }\n      } else {\n        if ('instructionFn' in options) {\n          value[key] = options.instructionFn(value[key], key, currentElement);\n        }\n\n        element[options.instructionKey] = value[key];\n      }\n    } else {\n      if (type + 'Fn' in options) {\n        value = options[type + 'Fn'](value, currentElement);\n      }\n\n      element[options[type + 'Key']] = value;\n    }\n\n    if (options.addParent) {\n      element[options.parentKey] = currentElement;\n    }\n\n    currentElement[options.elementsKey].push(element);\n  }\n}\n\nfunction manipulateAttributes(attributes) {\n  if ('attributesFn' in options && attributes) {\n    attributes = options.attributesFn(attributes, currentElement);\n  }\n\n  if ((options.trim || 'attributeValueFn' in options || 'attributeNameFn' in options || options.nativeTypeAttributes) && attributes) {\n    var key;\n\n    for (key in attributes) {\n      if (attributes.hasOwnProperty(key)) {\n        if (options.trim) attributes[key] = attributes[key].trim();\n\n        if (options.nativeTypeAttributes) {\n          attributes[key] = nativeType(attributes[key]);\n        }\n\n        if ('attributeValueFn' in options) attributes[key] = options.attributeValueFn(attributes[key], key, currentElement);\n\n        if ('attributeNameFn' in options) {\n          var temp = attributes[key];\n          delete attributes[key];\n          attributes[options.attributeNameFn(key, attributes[key], currentElement)] = temp;\n        }\n      }\n    }\n  }\n\n  return attributes;\n}\n\nfunction onInstruction(instruction) {\n  var attributes = {};\n\n  if (instruction.body && (instruction.name.toLowerCase() === 'xml' || options.instructionHasAttributes)) {\n    var attrsRegExp = /([\\w:-]+)\\s*=\\s*(?:\"([^\"]*)\"|'([^']*)'|(\\w+))\\s*/g;\n    var match;\n\n    while ((match = attrsRegExp.exec(instruction.body)) !== null) {\n      attributes[match[1]] = match[2] || match[3] || match[4];\n    }\n\n    attributes = manipulateAttributes(attributes);\n  }\n\n  if (instruction.name.toLowerCase() === 'xml') {\n    if (options.ignoreDeclaration) {\n      return;\n    }\n\n    currentElement[options.declarationKey] = {};\n\n    if (Object.keys(attributes).length) {\n      currentElement[options.declarationKey][options.attributesKey] = attributes;\n    }\n\n    if (options.addParent) {\n      currentElement[options.declarationKey][options.parentKey] = currentElement;\n    }\n  } else {\n    if (options.ignoreInstruction) {\n      return;\n    }\n\n    if (options.trim) {\n      instruction.body = instruction.body.trim();\n    }\n\n    var value = {};\n\n    if (options.instructionHasAttributes && Object.keys(attributes).length) {\n      value[instruction.name] = {};\n      value[instruction.name][options.attributesKey] = attributes;\n    } else {\n      value[instruction.name] = instruction.body;\n    }\n\n    addField('instruction', value);\n  }\n}\n\nfunction onStartElement(name, attributes) {\n  var element;\n\n  if (_typeof(name) === 'object') {\n    attributes = name.attributes;\n    name = name.name;\n  }\n\n  attributes = manipulateAttributes(attributes);\n\n  if ('elementNameFn' in options) {\n    name = options.elementNameFn(name, currentElement);\n  }\n\n  if (options.compact) {\n    element = {};\n\n    if (!options.ignoreAttributes && attributes && Object.keys(attributes).length) {\n      element[options.attributesKey] = {};\n      var key;\n\n      for (key in attributes) {\n        if (attributes.hasOwnProperty(key)) {\n          element[options.attributesKey][key] = attributes[key];\n        }\n      }\n    }\n\n    if (!(name in currentElement) && (isArray(options.alwaysArray) ? options.alwaysArray.indexOf(name) !== -1 : options.alwaysArray)) {\n      currentElement[name] = [];\n    }\n\n    if (currentElement[name] && !isArray(currentElement[name])) {\n      currentElement[name] = [currentElement[name]];\n    }\n\n    if (isArray(currentElement[name])) {\n      currentElement[name].push(element);\n    } else {\n      currentElement[name] = element;\n    }\n  } else {\n    if (!currentElement[options.elementsKey]) {\n      currentElement[options.elementsKey] = [];\n    }\n\n    element = {};\n    element[options.typeKey] = 'element';\n    element[options.nameKey] = name;\n\n    if (!options.ignoreAttributes && attributes && Object.keys(attributes).length) {\n      element[options.attributesKey] = attributes;\n    }\n\n    if (options.alwaysChildren) {\n      element[options.elementsKey] = [];\n    }\n\n    currentElement[options.elementsKey].push(element);\n  }\n\n  element[options.parentKey] = currentElement; // will be deleted in onEndElement() if !options.addParent\n\n  currentElement = element;\n}\n\nfunction onText(text) {\n  if (options.ignoreText) {\n    return;\n  }\n\n  if (!text.trim() && !options.captureSpacesBetweenElements) {\n    return;\n  }\n\n  if (options.trim) {\n    text = text.trim();\n  }\n\n  if (options.nativeType) {\n    text = nativeType(text);\n  }\n\n  if (options.sanitize) {\n    text = text.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\n  }\n\n  addField('text', text);\n}\n\nfunction onComment(comment) {\n  if (options.ignoreComment) {\n    return;\n  }\n\n  if (options.trim) {\n    comment = comment.trim();\n  }\n\n  addField('comment', comment);\n}\n\nfunction onEndElement(name) {\n  var parentElement = currentElement[options.parentKey];\n\n  if (!options.addParent) {\n    delete currentElement[options.parentKey];\n  }\n\n  currentElement = parentElement;\n}\n\nfunction onCdata(cdata) {\n  if (options.ignoreCdata) {\n    return;\n  }\n\n  if (options.trim) {\n    cdata = cdata.trim();\n  }\n\n  addField('cdata', cdata);\n}\n\nfunction onDoctype(doctype) {\n  if (options.ignoreDoctype) {\n    return;\n  }\n\n  doctype = doctype.replace(/^ /, '');\n\n  if (options.trim) {\n    doctype = doctype.trim();\n  }\n\n  addField('doctype', doctype);\n}\n\nfunction onError(error) {\n  error.note = error; //console.error(error);\n}\n\nmodule.exports = function (xml, userOptions) {\n  var parser = pureJsParser ? sax.parser(true, {}) : parser = new expat.Parser('UTF-8');\n  var result = {};\n  currentElement = result;\n  options = validateOptions(userOptions);\n\n  if (pureJsParser) {\n    parser.opt = {\n      strictEntities: true\n    };\n    parser.onopentag = onStartElement;\n    parser.ontext = onText;\n    parser.oncomment = onComment;\n    parser.onclosetag = onEndElement;\n    parser.onerror = onError;\n    parser.oncdata = onCdata;\n    parser.ondoctype = onDoctype;\n    parser.onprocessinginstruction = onInstruction;\n  } else {\n    parser.on('startElement', onStartElement);\n    parser.on('text', onText);\n    parser.on('comment', onComment);\n    parser.on('endElement', onEndElement);\n    parser.on('error', onError); //parser.on('startCdata', onStartCdata);\n    //parser.on('endCdata', onEndCdata);\n    //parser.on('entityDecl', onEntityDecl);\n  }\n\n  if (pureJsParser) {\n    parser.write(xml).close();\n  } else {\n    if (!parser.parse(xml)) {\n      throw new Error('XML parsing error: ' + parser.getError());\n    }\n  }\n\n  if (result[options.elementsKey]) {\n    var temp = result[options.elementsKey];\n    delete result[options.elementsKey];\n    result[options.elementsKey] = temp;\n    delete result.text;\n  }\n\n  return result;\n};","map":null,"metadata":{},"sourceType":"script"}