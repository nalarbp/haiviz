{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Volumes/DATA/BUDI/APP_DEV/haiviz-v04/src/viz_InputFiles/btn_LocalmapInput.js\";\n\nimport React, { useEffect, useState } from \"react\";\nimport { xml } from \"d3-fetch\";\nimport { Card, Empty, Spin, Upload } from \"antd\";\nimport { CheckCircleTwoTone } from \"@ant-design/icons\";\nimport { LocalmapInputSVG } from \"../utils/customIcons\";\nvar Dragger = Upload.Dragger; //props.svgMap, props.loadSVG\n\nvar LocalmapInput = function LocalmapInput(props) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLoading = _useState2[0],\n      setisLoading = _useState2[1]; //functions\n\n\n  function parseXML(_x) {\n    return _parseXML.apply(this, arguments);\n  }\n\n  function _parseXML() {\n    _parseXML = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(fileURL) {\n      var xml_promise;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return xml(fileURL);\n\n            case 2:\n              xml_promise = _context.sent;\n              props.loadXML(xml_promise);\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _parseXML.apply(this, arguments);\n  }\n\n  var beforeUploadHandler = function beforeUploadHandler(file) {\n    setisLoading(true);\n\n    if (file) {\n      var reader = new FileReader();\n      reader.readAsDataURL(file);\n\n      reader.onloadend = function (evt) {\n        var dataUrl = evt.target.result;\n        parseXML(dataUrl);\n      };\n    }\n  };\n\n  useEffect(function () {\n    if (props.svgMap) {\n      setisLoading(false);\n    }\n  }, [props.svgMap]);\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    title: \"Local map\",\n    headStyle: {\n      textAlign: \"left\"\n    },\n    bodyStyle: {\n      margin: \"0px\",\n      padding: \"5px\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }\n  }, !props.isolateData && /*#__PURE__*/React.createElement(Empty, {\n    image: Empty.PRESENTED_IMAGE_SIMPLE,\n    description: \"Please load the metadata first\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 11\n    }\n  }), props.isolateData && !isLoading && !props.svgMap && /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Dragger, {\n    accept: \".xml\",\n    style: {\n      padding: \"10px\"\n    },\n    name: \"file\",\n    multiple: false,\n    action: \"dummy-post\",\n    beforeUpload: beforeUploadHandler,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(LocalmapInputSVG, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 17\n    }\n  })))), props.isolateData && isLoading && !props.svgMap && /*#__PURE__*/React.createElement(Spin, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 61\n    }\n  }), props.isolateData && !isLoading && props.svgMap && /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      padding: \"10px\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(CheckCircleTwoTone, {\n    twoToneColor: \"#52c41a\",\n    style: {\n      fontSize: \"20pt\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 15\n    }\n  }, \"Loaded!\")))));\n};\n\nexport default LocalmapInput;","map":{"version":3,"sources":["/Volumes/DATA/BUDI/APP_DEV/haiviz-v04/src/viz_InputFiles/btn_LocalmapInput.js"],"names":["React","useEffect","useState","xml","Card","Empty","Spin","Upload","CheckCircleTwoTone","LocalmapInputSVG","Dragger","LocalmapInput","props","isLoading","setisLoading","parseXML","fileURL","xml_promise","loadXML","beforeUploadHandler","file","reader","FileReader","readAsDataURL","onloadend","evt","dataUrl","target","result","svgMap","textAlign","margin","padding","isolateData","PRESENTED_IMAGE_SIMPLE","fontSize"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,GAAT,QAAoB,UAApB;AACA,SAASC,IAAT,EAAeC,KAAf,EAAsBC,IAAtB,EAA4BC,MAA5B,QAA0C,MAA1C;AACA,SAASC,kBAAT,QAAmC,mBAAnC;AACA,SAASC,gBAAT,QAAiC,sBAAjC;IAEQC,O,GAAYH,M,CAAZG,O,EAER;;AAEA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,KAAD,EAAW;AAAA,kBACGV,QAAQ,CAAC,KAAD,CADX;AAAA;AAAA,MACxBW,SADwB;AAAA,MACbC,YADa,kBAG/B;;;AAH+B,WAIhBC,QAJgB;AAAA;AAAA;;AAAA;AAAA,yEAI/B,iBAAwBC,OAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAC0Bb,GAAG,CAACa,OAAD,CAD7B;;AAAA;AACMC,cAAAA,WADN;AAEEL,cAAAA,KAAK,CAACM,OAAN,CAAcD,WAAd;;AAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAJ+B;AAAA;AAAA;;AAS/B,MAAME,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,IAAD,EAAU;AACpCN,IAAAA,YAAY,CAAC,IAAD,CAAZ;;AACA,QAAIM,IAAJ,EAAU;AACR,UAAMC,MAAM,GAAG,IAAIC,UAAJ,EAAf;AACAD,MAAAA,MAAM,CAACE,aAAP,CAAqBH,IAArB;;AACAC,MAAAA,MAAM,CAACG,SAAP,GAAmB,UAASC,GAAT,EAAc;AAC/B,YAAMC,OAAO,GAAGD,GAAG,CAACE,MAAJ,CAAWC,MAA3B;AACAb,QAAAA,QAAQ,CAACW,OAAD,CAAR;AACD,OAHD;AAID;AACF,GAVD;;AAYAzB,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIW,KAAK,CAACiB,MAAV,EAAkB;AAChBf,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD;AACF,GAJQ,EAIN,CAACF,KAAK,CAACiB,MAAP,CAJM,CAAT;AAMA,sBACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD;AACE,IAAA,KAAK,EAAE,WADT;AAEE,IAAA,SAAS,EAAE;AAAEC,MAAAA,SAAS,EAAE;AAAb,KAFb;AAGE,IAAA,SAAS,EAAE;AAAEC,MAAAA,MAAM,EAAE,KAAV;AAAiBC,MAAAA,OAAO,EAAE;AAA1B,KAHb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKG,CAACpB,KAAK,CAACqB,WAAP,iBACC,oBAAC,KAAD;AACE,IAAA,KAAK,EAAE5B,KAAK,CAAC6B,sBADf;AAEE,IAAA,WAAW,EAAE,gCAFf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANJ,EAWGtB,KAAK,CAACqB,WAAN,IAAqB,CAACpB,SAAtB,IAAmC,CAACD,KAAK,CAACiB,MAA1C,iBACC,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,OAAD;AACE,IAAA,MAAM,EAAE,MADV;AAEE,IAAA,KAAK,EAAE;AAAEG,MAAAA,OAAO,EAAE;AAAX,KAFT;AAGE,IAAA,IAAI,EAAC,MAHP;AAIE,IAAA,QAAQ,EAAE,KAJZ;AAKE,IAAA,MAAM,EAAC,YALT;AAME,IAAA,YAAY,EAAEb,mBANhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CARF,CADF,CAZJ,EA2BGP,KAAK,CAACqB,WAAN,IAAqBpB,SAArB,IAAkC,CAACD,KAAK,CAACiB,MAAzC,iBAAmD,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA3BtD,EA4BGjB,KAAK,CAACqB,WAAN,IAAqB,CAACpB,SAAtB,IAAmCD,KAAK,CAACiB,MAAzC,iBACC,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,KAAK,EAAE;AAAEG,MAAAA,OAAO,EAAE;AAAX,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,kBAAD;AACE,IAAA,YAAY,EAAC,SADf;AAEE,IAAA,KAAK,EAAE;AAAEG,MAAAA,QAAQ,EAAE;AAAZ,KAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eALF,CADF,CA7BJ,CADF,CADF;AA4CD,CAvED;;AAwEA,eAAexB,aAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { xml } from \"d3-fetch\";\nimport { Card, Empty, Spin, Upload } from \"antd\";\nimport { CheckCircleTwoTone } from \"@ant-design/icons\";\nimport { LocalmapInputSVG } from \"../utils/customIcons\";\n\nconst { Dragger } = Upload;\n\n//props.svgMap, props.loadSVG\n\nconst LocalmapInput = (props) => {\n  const [isLoading, setisLoading] = useState(false);\n\n  //functions\n  async function parseXML(fileURL) {\n    var xml_promise = await xml(fileURL);\n    props.loadXML(xml_promise);\n  }\n\n  const beforeUploadHandler = (file) => {\n    setisLoading(true);\n    if (file) {\n      const reader = new FileReader();\n      reader.readAsDataURL(file);\n      reader.onloadend = function(evt) {\n        const dataUrl = evt.target.result;\n        parseXML(dataUrl);\n      };\n    }\n  };\n\n  useEffect(() => {\n    if (props.svgMap) {\n      setisLoading(false);\n    }\n  }, [props.svgMap]);\n\n  return (\n    <React.Fragment>\n      <Card\n        title={\"Local map\"}\n        headStyle={{ textAlign: \"left\" }}\n        bodyStyle={{ margin: \"0px\", padding: \"5px\" }}\n      >\n        {!props.isolateData && (\n          <Empty\n            image={Empty.PRESENTED_IMAGE_SIMPLE}\n            description={\"Please load the metadata first\"}\n          />\n        )}\n        {props.isolateData && !isLoading && !props.svgMap && (\n          <React.Fragment>\n            <Dragger\n              accept={\".xml\"}\n              style={{ padding: \"10px\" }}\n              name=\"file\"\n              multiple={false}\n              action=\"dummy-post\"\n              beforeUpload={beforeUploadHandler}\n            >\n              <h1>\n                <LocalmapInputSVG />\n              </h1>\n            </Dragger>\n          </React.Fragment>\n        )}\n        {props.isolateData && isLoading && !props.svgMap && <Spin />}\n        {props.isolateData && !isLoading && props.svgMap && (\n          <React.Fragment>\n            <div style={{ padding: \"10px\" }}>\n              <CheckCircleTwoTone\n                twoToneColor=\"#52c41a\"\n                style={{ fontSize: \"20pt\" }}\n              />\n              <p>Loaded!</p>\n            </div>\n          </React.Fragment>\n        )}\n      </Card>\n    </React.Fragment>\n  );\n};\nexport default LocalmapInput;\n"]},"metadata":{},"sourceType":"module"}