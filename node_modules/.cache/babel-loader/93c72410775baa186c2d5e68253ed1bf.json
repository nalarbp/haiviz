{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Volumes/DATA/BUDI/APP_DEV/haiviz-v04/src/viz_TemporalBar/comp_TemporalBar.js\";\n\n/* ============================================================================\n\n============================================================================ */\nimport React, { useEffect, useState } from \"react\";\nimport TemporalHistogram from \"./chart_TemporalBar_histogram\";\nimport TemporalStackedBar from \"./chart_TemporalBar_stackedBar\";\nimport { Card, Button, Drawer, Row, Col, Select } from \"antd\";\nimport { deactivateChart, setSelectedData } from \"../action/index\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { dateToStringIS08601, downloadSVG, getColumnNameByColorType } from \"../utils/utils\";\nimport { group, rollup, descending } from \"d3-array\";\nimport withMeasure from \"../hocs/withMeasure\";\nimport \"./style_TemporalBar.css\";\nimport { DragOutlined, CloseOutlined, SettingOutlined } from \"@ant-design/icons\";\nimport { changeTempResizeSignal, changeTempChartMode, changeTempScaleMode } from \"../action/temporalBar_actions\";\nvar dimensions = [\"width\", \"height\"];\n\nvar moment = require(\"moment\");\n\nvar _ = require(\"lodash\");\n\nvar Option = Select.Option;\n\nvar TemporalBar = function TemporalBar(props) {\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      histogramData = _useState2[0],\n      sethistogramData = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      stackedBarData = _useState4[0],\n      setstackedBarData = _useState4[1];\n\n  var isolateData = _.cloneDeep(Array.from(props.isolateData.values()));\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isUserRedraw = _useState6[0],\n      setisUserRedraw = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      isDrawerVisible = _useState8[0],\n      setisDrawerVisible = _useState8[1];\n\n  var chartMode = props.temporalbarSettings.chartMode;\n  var scaleMode = props.temporalbarSettings.scaleMode;\n  var chartModeText = chartMode === \"histogram\" ? \"Histogram\" : \"Stacked Bar\";\n  var scaleModeText = scaleMode === \"daily\" ? \"Daily\" : \"Weekly\";\n  useEffect(function () {\n    if (chartMode === \"histogram\") {\n      switch (scaleMode) {\n        case \"daily\":\n          var isolateColDate_dayCount = group(isolateData, function (d) {\n            return dateToStringIS08601(d.isolate_colDate);\n          });\n          sethistogramData(isolateColDate_dayCount);\n          break;\n\n        case \"weekly\":\n          var isolateColDate_weekCount = group(isolateData, function (d) {\n            return moment(d.isolate_colDate).format(\"YYYY[W]WW\");\n          });\n          sethistogramData(isolateColDate_weekCount);\n          break;\n\n        default:\n          break;\n      }\n    } else {\n      switch (scaleMode) {\n        case \"daily\":\n          var colDateGroup_daily = group(isolateData, function (d) {\n            return dateToStringIS08601(d.isolate_colDate);\n          }); //sort them\n\n          setstackedBarData(colDateGroup_daily);\n          break;\n\n        case \"weekly\":\n          var colDateGroup_weekly = group(isolateData, function (d) {\n            return moment(d.isolate_colDate).format(\"GGGG[W]WW\");\n          }); //sort them here\n\n          var tallyGroup = rollup(isolateData, function (v) {\n            return v.length;\n          }, function (d) {\n            return getColumnNameByColorType(d, props.colorScale.colorType);\n          });\n          var sorted_obj = {};\n          var tallyGroup_sorted = new Map(_toConsumableArray(tallyGroup.entries()).sort(function (a, b) {\n            return b[1] - a[1];\n          }));\n          var idx = 1;\n          tallyGroup_sorted.forEach(function (v, k) {\n            sorted_obj[k] = idx;\n            idx++;\n          }); //make new map and sort it out\n\n          var colDateGroup_weekly_sorted = new Map();\n          colDateGroup_weekly.forEach(function (v, k) {\n            var v_sorted = v.sort(function (a, b) {\n              var a_rec = getColumnNameByColorType(a, props.colorScale.colorType);\n              var b_rec = getColumnNameByColorType(b, props.colorScale.colorType);\n              return sorted_obj[a_rec] - sorted_obj[b_rec];\n            });\n            colDateGroup_weekly_sorted.set(k, v_sorted);\n          }); // const colDateGroup_weekly_sorted = new Map(\n          //   [...colDateGroup_weekly.entries()].sort((a, b) => {\n          //     console.log(a);\n          //     let a_rec = 1;\n          //     //a[1][\n          //     //  getColumnNameByColorType(a), props.colorScale.colorType)\n          //     //]\n          //     let b_rec = 2;\n          //     return sorted_obj[a_rec] - sorted_obj[b_rec];\n          //   })\n          // );\n          //console.log(colDateGroup_weekly_sorted);\n\n          setstackedBarData(colDateGroup_weekly_sorted);\n          break;\n\n        default:\n          break;\n      }\n    }\n  }, [chartMode, scaleMode]); //USEEFFECTS\n\n  useEffect(function () {\n    //console.log(\"efect draw\");\n    if (isUserRedraw) {\n      setisUserRedraw(false);\n    }\n  }, [isUserRedraw]); //HANDLERS\n\n  var downloadSVGHandler = function downloadSVGHandler() {\n    downloadSVG(\"temporalbar-svg\");\n  };\n\n  var closeCardHandler = function closeCardHandler() {\n    props.deactivateChart(props.id);\n    props.changeTempResizeSignal(false);\n  };\n\n  var openDrawerHandler = function openDrawerHandler() {\n    setisDrawerVisible(true);\n  };\n\n  var closeDrawerHandler = function closeDrawerHandler() {\n    setisDrawerVisible(false);\n  };\n\n  var setChartModeHandler = function setChartModeHandler(val) {\n    props.changeTempChartMode(val);\n  };\n\n  var setScaleModeHandler = function setScaleModeHandler(val) {\n    props.changeTempScaleMode(val);\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      height: \"100%\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    title: \"Temporal distribution\",\n    bordered: true,\n    headStyle: {\n      height: \"50px\",\n      padding: \"0 20px\"\n    },\n    style: {\n      height: \"100%\"\n    },\n    bodyStyle: {\n      margin: \"0px\",\n      padding: \"5px\"\n    },\n    extra: /*#__PURE__*/React.createElement(Row, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      span: 8,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      className: \"panelHeader\",\n      size: \"small\",\n      style: {\n        margin: \"0 5px\",\n        border: \"none\"\n      },\n      icon: /*#__PURE__*/React.createElement(DragOutlined, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 25\n        }\n      }),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      span: 8,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      size: \"small\",\n      style: {\n        margin: \"0 5px\",\n        border: \"none\"\n      },\n      icon: /*#__PURE__*/React.createElement(SettingOutlined, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 25\n        }\n      }),\n      onClick: openDrawerHandler,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      span: 8,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 15\n      }\n    }, \" \", /*#__PURE__*/React.createElement(Button, {\n      size: \"small\",\n      style: {\n        margin: \"0 5px\",\n        border: \"none\"\n      },\n      icon: /*#__PURE__*/React.createElement(CloseOutlined, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 25\n        }\n      }),\n      onClick: closeCardHandler,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 17\n      }\n    }))),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"temporalbar-drawer-settings\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Drawer, {\n    title: \"Timeline settings\",\n    placement: \"right\",\n    closable: true,\n    onClose: closeDrawerHandler,\n    visible: isDrawerVisible,\n    getContainer: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    justify: \"center\",\n    gutter: [1, 16],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    span: 24,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"temporalbar-drawer-settings-p\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 19\n    }\n  }, \"Chart mode\"), /*#__PURE__*/React.createElement(Select, {\n    style: {\n      width: \"100%\"\n    },\n    placeholder: chartModeText,\n    onChange: setChartModeHandler,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(Option, {\n    value: \"stackedBar\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 21\n    }\n  }, \"Stacked bar\"), /*#__PURE__*/React.createElement(Option, {\n    value: \"histogram\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 21\n    }\n  }, \"Histogram\"))), /*#__PURE__*/React.createElement(Col, {\n    span: 24,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"temporalbar-drawer-settings-p\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 19\n    }\n  }, \"Time scale\"), /*#__PURE__*/React.createElement(Select, {\n    style: {\n      width: \"100%\"\n    },\n    placeholder: scaleModeText,\n    onChange: setScaleModeHandler,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(Option, {\n    value: \"daily\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 21\n    }\n  }, \"Daily\"), /*#__PURE__*/React.createElement(Option, {\n    value: \"weekly\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 21\n    }\n  }, \"Weekly\"))), /*#__PURE__*/React.createElement(Col, {\n    span: 24,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    onClick: downloadSVGHandler,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 19\n    }\n  }, \"Download SVG\"))))), histogramData && props.width && props.height && chartMode === \"histogram\" && /*#__PURE__*/React.createElement(TemporalHistogram, {\n    width: props.width,\n    height: props.height,\n    chartData: histogramData,\n    isolateData: props.isolateData,\n    setSelectedData: props.setSelectedData,\n    selectedData: props.selectedData,\n    isUserRedraw: isUserRedraw,\n    temporalbarSettings: props.temporalbarSettings,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 15\n    }\n  }), stackedBarData && props.width && props.height && chartMode === \"stackedBar\" && /*#__PURE__*/React.createElement(TemporalStackedBar, {\n    width: props.width,\n    height: props.height,\n    chartData: stackedBarData,\n    isolateData: props.isolateData,\n    setSelectedData: props.setSelectedData,\n    selectedData: props.selectedData,\n    isUserRedraw: isUserRedraw,\n    temporalbarSettings: props.temporalbarSettings,\n    colorScale: props.colorScale,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 15\n    }\n  }))));\n};\n\nfunction mapStateToProps(state) {\n  return {\n    isolateData: state.isolateData,\n    selectedData: state.selectedData,\n    temporalbarSettings: state.temporalbarSettings,\n    colorScale: state.colorScale\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators({\n    deactivateChart: deactivateChart,\n    setSelectedData: setSelectedData,\n    changeTempResizeSignal: changeTempResizeSignal,\n    changeTempChartMode: changeTempChartMode,\n    changeTempScaleMode: changeTempScaleMode\n  }, dispatch);\n}\n\nvar MeasuredTemporalBar = withMeasure(dimensions)(TemporalBar);\nexport default connect(mapStateToProps, mapDispatchToProps)(MeasuredTemporalBar);\n/*\n<Button\n  size={\"small\"}\n  style={{ margin: \"0 5px\", border: \"none\" }}\n  icon={<RetweetOutlined />}\n  onClick={userRedrawHandler}\n></Button>\n*/","map":{"version":3,"sources":["/Volumes/DATA/BUDI/APP_DEV/haiviz-v04/src/viz_TemporalBar/comp_TemporalBar.js"],"names":["React","useEffect","useState","TemporalHistogram","TemporalStackedBar","Card","Button","Drawer","Row","Col","Select","deactivateChart","setSelectedData","connect","bindActionCreators","dateToStringIS08601","downloadSVG","getColumnNameByColorType","group","rollup","descending","withMeasure","DragOutlined","CloseOutlined","SettingOutlined","changeTempResizeSignal","changeTempChartMode","changeTempScaleMode","dimensions","moment","require","_","Option","TemporalBar","props","histogramData","sethistogramData","stackedBarData","setstackedBarData","isolateData","cloneDeep","Array","from","values","isUserRedraw","setisUserRedraw","isDrawerVisible","setisDrawerVisible","chartMode","temporalbarSettings","scaleMode","chartModeText","scaleModeText","isolateColDate_dayCount","d","isolate_colDate","isolateColDate_weekCount","format","colDateGroup_daily","colDateGroup_weekly","tallyGroup","v","length","colorScale","colorType","sorted_obj","tallyGroup_sorted","Map","entries","sort","a","b","idx","forEach","k","colDateGroup_weekly_sorted","v_sorted","a_rec","b_rec","set","downloadSVGHandler","closeCardHandler","id","openDrawerHandler","closeDrawerHandler","setChartModeHandler","val","setScaleModeHandler","height","padding","margin","border","width","selectedData","mapStateToProps","state","mapDispatchToProps","dispatch","MeasuredTemporalBar"],"mappings":";;;;;;AAAA;;;AAGA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,iBAAP,MAA8B,+BAA9B;AACA,OAAOC,kBAAP,MAA+B,gCAA/B;AACA,SAASC,IAAT,EAAeC,MAAf,EAAuBC,MAAvB,EAA+BC,GAA/B,EAAoCC,GAApC,EAAyCC,MAAzC,QAAuD,MAAvD;AACA,SAASC,eAAT,EAA0BC,eAA1B,QAAiD,iBAAjD;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,kBAAT,QAAmC,OAAnC;AACA,SACEC,mBADF,EAEEC,WAFF,EAGEC,wBAHF,QAIO,gBAJP;AAKA,SAASC,KAAT,EAAgBC,MAAhB,EAAwBC,UAAxB,QAA0C,UAA1C;AACA,OAAOC,WAAP,MAAwB,qBAAxB;AACA,OAAO,yBAAP;AACA,SACEC,YADF,EAEEC,aAFF,EAGEC,eAHF,QAIO,mBAJP;AAKA,SACEC,sBADF,EAEEC,mBAFF,EAGEC,mBAHF,QAIO,+BAJP;AAMA,IAAMC,UAAU,GAAG,CAAC,OAAD,EAAU,QAAV,CAAnB;;AACA,IAAMC,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;;AACA,IAAMC,CAAC,GAAGD,OAAO,CAAC,QAAD,CAAjB;;IACQE,M,GAAWtB,M,CAAXsB,M;;AAER,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,KAAD,EAAW;AAAA,kBACahC,QAAQ,CAAC,IAAD,CADrB;AAAA;AAAA,MACtBiC,aADsB;AAAA,MACPC,gBADO;;AAAA,mBAEelC,QAAQ,CAAC,IAAD,CAFvB;AAAA;AAAA,MAEtBmC,cAFsB;AAAA,MAENC,iBAFM;;AAG7B,MAAMC,WAAW,GAAGR,CAAC,CAACS,SAAF,CAAYC,KAAK,CAACC,IAAN,CAAWR,KAAK,CAACK,WAAN,CAAkBI,MAAlB,EAAX,CAAZ,CAApB;;AAH6B,mBAIWzC,QAAQ,CAAC,KAAD,CAJnB;AAAA;AAAA,MAItB0C,YAJsB;AAAA,MAIRC,eAJQ;;AAAA,mBAKiB3C,QAAQ,CAAC,KAAD,CALzB;AAAA;AAAA,MAKtB4C,eALsB;AAAA,MAKLC,kBALK;;AAM7B,MAAMC,SAAS,GAAGd,KAAK,CAACe,mBAAN,CAA0BD,SAA5C;AACA,MAAME,SAAS,GAAGhB,KAAK,CAACe,mBAAN,CAA0BC,SAA5C;AACA,MAAMC,aAAa,GAAGH,SAAS,KAAK,WAAd,GAA4B,WAA5B,GAA0C,aAAhE;AACA,MAAMI,aAAa,GAAGF,SAAS,KAAK,OAAd,GAAwB,OAAxB,GAAkC,QAAxD;AAEAjD,EAAAA,SAAS,CAAC,YAAM;AACd,QAAI+C,SAAS,KAAK,WAAlB,EAA+B;AAC7B,cAAQE,SAAR;AACE,aAAK,OAAL;AACE,cAAMG,uBAAuB,GAAGnC,KAAK,CAACqB,WAAD,EAAc,UAACe,CAAD;AAAA,mBACjDvC,mBAAmB,CAACuC,CAAC,CAACC,eAAH,CAD8B;AAAA,WAAd,CAArC;AAGAnB,UAAAA,gBAAgB,CAACiB,uBAAD,CAAhB;AACA;;AACF,aAAK,QAAL;AACE,cAAMG,wBAAwB,GAAGtC,KAAK,CAACqB,WAAD,EAAc,UAACe,CAAD;AAAA,mBAClDzB,MAAM,CAACyB,CAAC,CAACC,eAAH,CAAN,CAA0BE,MAA1B,CAAiC,WAAjC,CADkD;AAAA,WAAd,CAAtC;AAGArB,UAAAA,gBAAgB,CAACoB,wBAAD,CAAhB;AACA;;AACF;AACE;AAdJ;AAgBD,KAjBD,MAiBO;AACL,cAAQN,SAAR;AACE,aAAK,OAAL;AACE,cAAMQ,kBAAkB,GAAGxC,KAAK,CAACqB,WAAD,EAAc,UAACe,CAAD;AAAA,mBAC5CvC,mBAAmB,CAACuC,CAAC,CAACC,eAAH,CADyB;AAAA,WAAd,CAAhC,CADF,CAIE;;AACAjB,UAAAA,iBAAiB,CAACoB,kBAAD,CAAjB;AACA;;AACF,aAAK,QAAL;AACE,cAAMC,mBAAmB,GAAGzC,KAAK,CAACqB,WAAD,EAAc,UAACe,CAAD;AAAA,mBAC7CzB,MAAM,CAACyB,CAAC,CAACC,eAAH,CAAN,CAA0BE,MAA1B,CAAiC,WAAjC,CAD6C;AAAA,WAAd,CAAjC,CADF,CAIE;;AACA,cAAMG,UAAU,GAAGzC,MAAM,CACvBoB,WADuB,EAEvB,UAACsB,CAAD;AAAA,mBAAOA,CAAC,CAACC,MAAT;AAAA,WAFuB,EAGvB,UAACR,CAAD;AAAA,mBAAOrC,wBAAwB,CAACqC,CAAD,EAAIpB,KAAK,CAAC6B,UAAN,CAAiBC,SAArB,CAA/B;AAAA,WAHuB,CAAzB;AAMA,cAAMC,UAAU,GAAG,EAAnB;AACA,cAAMC,iBAAiB,GAAG,IAAIC,GAAJ,CACxB,mBAAIP,UAAU,CAACQ,OAAX,EAAJ,EAA0BC,IAA1B,CAA+B,UAACC,CAAD,EAAIC,CAAJ;AAAA,mBAAUA,CAAC,CAAC,CAAD,CAAD,GAAOD,CAAC,CAAC,CAAD,CAAlB;AAAA,WAA/B,CADwB,CAA1B;AAGA,cAAIE,GAAG,GAAG,CAAV;AACAN,UAAAA,iBAAiB,CAACO,OAAlB,CAA0B,UAACZ,CAAD,EAAIa,CAAJ,EAAU;AAClCT,YAAAA,UAAU,CAACS,CAAD,CAAV,GAAgBF,GAAhB;AACAA,YAAAA,GAAG;AACJ,WAHD,EAhBF,CAqBE;;AACA,cAAIG,0BAA0B,GAAG,IAAIR,GAAJ,EAAjC;AACAR,UAAAA,mBAAmB,CAACc,OAApB,CAA4B,UAACZ,CAAD,EAAIa,CAAJ,EAAU;AACpC,gBAAIE,QAAQ,GAAGf,CAAC,CAACQ,IAAF,CAAO,UAACC,CAAD,EAAIC,CAAJ,EAAU;AAC9B,kBAAIM,KAAK,GAAG5D,wBAAwB,CAClCqD,CADkC,EAElCpC,KAAK,CAAC6B,UAAN,CAAiBC,SAFiB,CAApC;AAIA,kBAAIc,KAAK,GAAG7D,wBAAwB,CAClCsD,CADkC,EAElCrC,KAAK,CAAC6B,UAAN,CAAiBC,SAFiB,CAApC;AAIA,qBAAOC,UAAU,CAACY,KAAD,CAAV,GAAoBZ,UAAU,CAACa,KAAD,CAArC;AACD,aAVc,CAAf;AAYAH,YAAAA,0BAA0B,CAACI,GAA3B,CAA+BL,CAA/B,EAAkCE,QAAlC;AACD,WAdD,EAvBF,CAuCE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACAtC,UAAAA,iBAAiB,CAACqC,0BAAD,CAAjB;AACA;;AACF;AACE;AA/DJ;AAiED;AACF,GArFQ,EAqFN,CAAC3B,SAAD,EAAYE,SAAZ,CArFM,CAAT,CAX6B,CAkG7B;;AACAjD,EAAAA,SAAS,CAAC,YAAM;AACd;AACA,QAAI2C,YAAJ,EAAkB;AAChBC,MAAAA,eAAe,CAAC,KAAD,CAAf;AACD;AACF,GALQ,EAKN,CAACD,YAAD,CALM,CAAT,CAnG6B,CA0G7B;;AACA,MAAMoC,kBAAkB,GAAG,SAArBA,kBAAqB,GAAM;AAC/BhE,IAAAA,WAAW,CAAC,iBAAD,CAAX;AACD,GAFD;;AAGA,MAAMiE,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAM;AAC7B/C,IAAAA,KAAK,CAACvB,eAAN,CAAsBuB,KAAK,CAACgD,EAA5B;AACAhD,IAAAA,KAAK,CAACT,sBAAN,CAA6B,KAA7B;AACD,GAHD;;AAIA,MAAM0D,iBAAiB,GAAG,SAApBA,iBAAoB,GAAM;AAC9BpC,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACD,GAFD;;AAGA,MAAMqC,kBAAkB,GAAG,SAArBA,kBAAqB,GAAM;AAC/BrC,IAAAA,kBAAkB,CAAC,KAAD,CAAlB;AACD,GAFD;;AAGA,MAAMsC,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,GAAD,EAAS;AACnCpD,IAAAA,KAAK,CAACR,mBAAN,CAA0B4D,GAA1B;AACD,GAFD;;AAGA,MAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACD,GAAD,EAAS;AACnCpD,IAAAA,KAAK,CAACP,mBAAN,CAA0B2D,GAA1B;AACD,GAFD;;AAIA,sBACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,KAAK,EAAE;AAAEE,MAAAA,MAAM,EAAE;AAAV,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD;AACE,IAAA,KAAK,EAAE,uBADT;AAEE,IAAA,QAAQ,EAAE,IAFZ;AAGE,IAAA,SAAS,EAAE;AAAEA,MAAAA,MAAM,EAAE,MAAV;AAAkBC,MAAAA,OAAO,EAAE;AAA3B,KAHb;AAIE,IAAA,KAAK,EAAE;AAAED,MAAAA,MAAM,EAAE;AAAV,KAJT;AAKE,IAAA,SAAS,EAAE;AAAEE,MAAAA,MAAM,EAAE,KAAV;AAAiBD,MAAAA,OAAO,EAAE;AAA1B,KALb;AAME,IAAA,KAAK,eACH,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,GAAD;AAAK,MAAA,IAAI,EAAE,CAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,MAAD;AACE,MAAA,SAAS,EAAC,aADZ;AAEE,MAAA,IAAI,EAAE,OAFR;AAGE,MAAA,KAAK,EAAE;AAAEC,QAAAA,MAAM,EAAE,OAAV;AAAmBC,QAAAA,MAAM,EAAE;AAA3B,OAHT;AAIE,MAAA,IAAI,eAAE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF,eASE,oBAAC,GAAD;AAAK,MAAA,IAAI,EAAE,CAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,MAAD;AACE,MAAA,IAAI,EAAE,OADR;AAEE,MAAA,KAAK,EAAE;AAAED,QAAAA,MAAM,EAAE,OAAV;AAAmBC,QAAAA,MAAM,EAAE;AAA3B,OAFT;AAGE,MAAA,IAAI,eAAE,oBAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHR;AAIE,MAAA,OAAO,EAAER,iBAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CATF,eAiBE,oBAAC,GAAD;AAAK,MAAA,IAAI,EAAE,CAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,GADH,eAEE,oBAAC,MAAD;AACE,MAAA,IAAI,EAAE,OADR;AAEE,MAAA,KAAK,EAAE;AAAEO,QAAAA,MAAM,EAAE,OAAV;AAAmBC,QAAAA,MAAM,EAAE;AAA3B,OAFT;AAGE,MAAA,IAAI,eAAE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHR;AAIE,MAAA,OAAO,EAAEV,gBAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CAjBF,CAPJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAoCE;AAAK,IAAA,EAAE,EAAC,6BAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AACE,IAAA,KAAK,EAAC,mBADR;AAEE,IAAA,SAAS,EAAC,OAFZ;AAGE,IAAA,QAAQ,EAAE,IAHZ;AAIE,IAAA,OAAO,EAAEG,kBAJX;AAKE,IAAA,OAAO,EAAEtC,eALX;AAME,IAAA,YAAY,EAAE,IANhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAQE,oBAAC,GAAD;AAAK,IAAA,OAAO,EAAE,QAAd;AAAwB,IAAA,MAAM,EAAE,CAAC,CAAD,EAAI,EAAJ,CAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,GAAD;AAAK,IAAA,IAAI,EAAE,EAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAG,IAAA,SAAS,EAAC,+BAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE,oBAAC,MAAD;AACE,IAAA,KAAK,EAAE;AAAE8C,MAAAA,KAAK,EAAE;AAAT,KADT;AAEE,IAAA,WAAW,EAAEzC,aAFf;AAGE,IAAA,QAAQ,EAAEkC,mBAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAKE,oBAAC,MAAD;AAAQ,IAAA,KAAK,EAAC,YAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBALF,eAME,oBAAC,MAAD;AAAQ,IAAA,KAAK,EAAC,WAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBANF,CAFF,CADF,eAYE,oBAAC,GAAD;AAAK,IAAA,IAAI,EAAE,EAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAG,IAAA,SAAS,EAAC,+BAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE,oBAAC,MAAD;AACE,IAAA,KAAK,EAAE;AAAEO,MAAAA,KAAK,EAAE;AAAT,KADT;AAEE,IAAA,WAAW,EAAExC,aAFf;AAGE,IAAA,QAAQ,EAAEmC,mBAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAKE,oBAAC,MAAD;AAAQ,IAAA,KAAK,EAAC,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aALF,eAME,oBAAC,MAAD;AAAQ,IAAA,KAAK,EAAC,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cANF,CAFF,CAZF,eAuBE,oBAAC,GAAD;AAAK,IAAA,IAAI,EAAE,EAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAEP,kBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,CAvBF,CARF,CADF,CApCF,EA0EG7C,aAAa,IACZD,KAAK,CAAC0D,KADP,IAEC1D,KAAK,CAACsD,MAFP,IAGCxC,SAAS,KAAK,WAHf,iBAIG,oBAAC,iBAAD;AACE,IAAA,KAAK,EAAEd,KAAK,CAAC0D,KADf;AAEE,IAAA,MAAM,EAAE1D,KAAK,CAACsD,MAFhB;AAGE,IAAA,SAAS,EAAErD,aAHb;AAIE,IAAA,WAAW,EAAED,KAAK,CAACK,WAJrB;AAKE,IAAA,eAAe,EAAEL,KAAK,CAACtB,eALzB;AAME,IAAA,YAAY,EAAEsB,KAAK,CAAC2D,YANtB;AAOE,IAAA,YAAY,EAAEjD,YAPhB;AAQE,IAAA,mBAAmB,EAAEV,KAAK,CAACe,mBAR7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA9EN,EAyFGZ,cAAc,IACbH,KAAK,CAAC0D,KADP,IAEC1D,KAAK,CAACsD,MAFP,IAGCxC,SAAS,KAAK,YAHf,iBAIG,oBAAC,kBAAD;AACE,IAAA,KAAK,EAAEd,KAAK,CAAC0D,KADf;AAEE,IAAA,MAAM,EAAE1D,KAAK,CAACsD,MAFhB;AAGE,IAAA,SAAS,EAAEnD,cAHb;AAIE,IAAA,WAAW,EAAEH,KAAK,CAACK,WAJrB;AAKE,IAAA,eAAe,EAAEL,KAAK,CAACtB,eALzB;AAME,IAAA,YAAY,EAAEsB,KAAK,CAAC2D,YANtB;AAOE,IAAA,YAAY,EAAEjD,YAPhB;AAQE,IAAA,mBAAmB,EAAEV,KAAK,CAACe,mBAR7B;AASE,IAAA,UAAU,EAAEf,KAAK,CAAC6B,UATpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA7FN,CADF,CADF,CADF;AAgHD,CA/OD;;AAiPA,SAAS+B,eAAT,CAAyBC,KAAzB,EAAgC;AAC9B,SAAO;AACLxD,IAAAA,WAAW,EAAEwD,KAAK,CAACxD,WADd;AAELsD,IAAAA,YAAY,EAAEE,KAAK,CAACF,YAFf;AAGL5C,IAAAA,mBAAmB,EAAE8C,KAAK,CAAC9C,mBAHtB;AAILc,IAAAA,UAAU,EAAEgC,KAAK,CAAChC;AAJb,GAAP;AAMD;;AAED,SAASiC,kBAAT,CAA4BC,QAA5B,EAAsC;AACpC,SAAOnF,kBAAkB,CACvB;AACEH,IAAAA,eAAe,EAAEA,eADnB;AAEEC,IAAAA,eAAe,EAAEA,eAFnB;AAGEa,IAAAA,sBAAsB,EAAEA,sBAH1B;AAIEC,IAAAA,mBAAmB,EAAEA,mBAJvB;AAKEC,IAAAA,mBAAmB,EAAEA;AALvB,GADuB,EAQvBsE,QARuB,CAAzB;AAUD;;AAED,IAAMC,mBAAmB,GAAG7E,WAAW,CAACO,UAAD,CAAX,CAAwBK,WAAxB,CAA5B;AAEA,eAAepB,OAAO,CACpBiF,eADoB,EAEpBE,kBAFoB,CAAP,CAGbE,mBAHa,CAAf;AAKA","sourcesContent":["/* ============================================================================\n\n============================================================================ */\nimport React, { useEffect, useState } from \"react\";\nimport TemporalHistogram from \"./chart_TemporalBar_histogram\";\nimport TemporalStackedBar from \"./chart_TemporalBar_stackedBar\";\nimport { Card, Button, Drawer, Row, Col, Select } from \"antd\";\nimport { deactivateChart, setSelectedData } from \"../action/index\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport {\n  dateToStringIS08601,\n  downloadSVG,\n  getColumnNameByColorType,\n} from \"../utils/utils\";\nimport { group, rollup, descending } from \"d3-array\";\nimport withMeasure from \"../hocs/withMeasure\";\nimport \"./style_TemporalBar.css\";\nimport {\n  DragOutlined,\n  CloseOutlined,\n  SettingOutlined,\n} from \"@ant-design/icons\";\nimport {\n  changeTempResizeSignal,\n  changeTempChartMode,\n  changeTempScaleMode,\n} from \"../action/temporalBar_actions\";\n\nconst dimensions = [\"width\", \"height\"];\nconst moment = require(\"moment\");\nconst _ = require(\"lodash\");\nconst { Option } = Select;\n\nconst TemporalBar = (props) => {\n  const [histogramData, sethistogramData] = useState(null);\n  const [stackedBarData, setstackedBarData] = useState(null);\n  const isolateData = _.cloneDeep(Array.from(props.isolateData.values()));\n  const [isUserRedraw, setisUserRedraw] = useState(false);\n  const [isDrawerVisible, setisDrawerVisible] = useState(false);\n  const chartMode = props.temporalbarSettings.chartMode;\n  const scaleMode = props.temporalbarSettings.scaleMode;\n  const chartModeText = chartMode === \"histogram\" ? \"Histogram\" : \"Stacked Bar\";\n  const scaleModeText = scaleMode === \"daily\" ? \"Daily\" : \"Weekly\";\n\n  useEffect(() => {\n    if (chartMode === \"histogram\") {\n      switch (scaleMode) {\n        case \"daily\":\n          const isolateColDate_dayCount = group(isolateData, (d) =>\n            dateToStringIS08601(d.isolate_colDate)\n          );\n          sethistogramData(isolateColDate_dayCount);\n          break;\n        case \"weekly\":\n          const isolateColDate_weekCount = group(isolateData, (d) =>\n            moment(d.isolate_colDate).format(\"YYYY[W]WW\")\n          );\n          sethistogramData(isolateColDate_weekCount);\n          break;\n        default:\n          break;\n      }\n    } else {\n      switch (scaleMode) {\n        case \"daily\":\n          const colDateGroup_daily = group(isolateData, (d) =>\n            dateToStringIS08601(d.isolate_colDate)\n          );\n          //sort them\n          setstackedBarData(colDateGroup_daily);\n          break;\n        case \"weekly\":\n          const colDateGroup_weekly = group(isolateData, (d) =>\n            moment(d.isolate_colDate).format(\"GGGG[W]WW\")\n          );\n          //sort them here\n          const tallyGroup = rollup(\n            isolateData,\n            (v) => v.length,\n            (d) => getColumnNameByColorType(d, props.colorScale.colorType)\n          );\n\n          const sorted_obj = {};\n          const tallyGroup_sorted = new Map(\n            [...tallyGroup.entries()].sort((a, b) => b[1] - a[1])\n          );\n          let idx = 1;\n          tallyGroup_sorted.forEach((v, k) => {\n            sorted_obj[k] = idx;\n            idx++;\n          });\n\n          //make new map and sort it out\n          let colDateGroup_weekly_sorted = new Map();\n          colDateGroup_weekly.forEach((v, k) => {\n            let v_sorted = v.sort((a, b) => {\n              let a_rec = getColumnNameByColorType(\n                a,\n                props.colorScale.colorType\n              );\n              let b_rec = getColumnNameByColorType(\n                b,\n                props.colorScale.colorType\n              );\n              return sorted_obj[a_rec] - sorted_obj[b_rec];\n            });\n\n            colDateGroup_weekly_sorted.set(k, v_sorted);\n          });\n\n          // const colDateGroup_weekly_sorted = new Map(\n          //   [...colDateGroup_weekly.entries()].sort((a, b) => {\n          //     console.log(a);\n          //     let a_rec = 1;\n          //     //a[1][\n          //     //  getColumnNameByColorType(a), props.colorScale.colorType)\n          //     //]\n          //     let b_rec = 2;\n          //     return sorted_obj[a_rec] - sorted_obj[b_rec];\n          //   })\n          // );\n\n          //console.log(colDateGroup_weekly_sorted);\n          setstackedBarData(colDateGroup_weekly_sorted);\n          break;\n        default:\n          break;\n      }\n    }\n  }, [chartMode, scaleMode]);\n\n  //USEEFFECTS\n  useEffect(() => {\n    //console.log(\"efect draw\");\n    if (isUserRedraw) {\n      setisUserRedraw(false);\n    }\n  }, [isUserRedraw]);\n\n  //HANDLERS\n  const downloadSVGHandler = () => {\n    downloadSVG(\"temporalbar-svg\");\n  };\n  const closeCardHandler = () => {\n    props.deactivateChart(props.id);\n    props.changeTempResizeSignal(false);\n  };\n  const openDrawerHandler = () => {\n    setisDrawerVisible(true);\n  };\n  const closeDrawerHandler = () => {\n    setisDrawerVisible(false);\n  };\n  const setChartModeHandler = (val) => {\n    props.changeTempChartMode(val);\n  };\n  const setScaleModeHandler = (val) => {\n    props.changeTempScaleMode(val);\n  };\n\n  return (\n    <React.Fragment>\n      <div style={{ height: \"100%\" }}>\n        <Card\n          title={\"Temporal distribution\"}\n          bordered={true}\n          headStyle={{ height: \"50px\", padding: \"0 20px\" }}\n          style={{ height: \"100%\" }}\n          bodyStyle={{ margin: \"0px\", padding: \"5px\" }}\n          extra={\n            <Row>\n              <Col span={8}>\n                <Button\n                  className=\"panelHeader\"\n                  size={\"small\"}\n                  style={{ margin: \"0 5px\", border: \"none\" }}\n                  icon={<DragOutlined />}\n                ></Button>\n              </Col>\n              <Col span={8}>\n                <Button\n                  size={\"small\"}\n                  style={{ margin: \"0 5px\", border: \"none\" }}\n                  icon={<SettingOutlined />}\n                  onClick={openDrawerHandler}\n                ></Button>\n              </Col>\n              <Col span={8}>\n                {\" \"}\n                <Button\n                  size={\"small\"}\n                  style={{ margin: \"0 5px\", border: \"none\" }}\n                  icon={<CloseOutlined />}\n                  onClick={closeCardHandler}\n                ></Button>\n              </Col>\n            </Row>\n          }\n        >\n          <div id=\"temporalbar-drawer-settings\">\n            <Drawer\n              title=\"Timeline settings\"\n              placement=\"right\"\n              closable={true}\n              onClose={closeDrawerHandler}\n              visible={isDrawerVisible}\n              getContainer={true}\n            >\n              <Row justify={\"center\"} gutter={[1, 16]}>\n                <Col span={24}>\n                  <p className=\"temporalbar-drawer-settings-p\">Chart mode</p>\n                  <Select\n                    style={{ width: \"100%\" }}\n                    placeholder={chartModeText}\n                    onChange={setChartModeHandler}\n                  >\n                    <Option value=\"stackedBar\">Stacked bar</Option>\n                    <Option value=\"histogram\">Histogram</Option>\n                  </Select>\n                </Col>\n                <Col span={24}>\n                  <p className=\"temporalbar-drawer-settings-p\">Time scale</p>\n                  <Select\n                    style={{ width: \"100%\" }}\n                    placeholder={scaleModeText}\n                    onChange={setScaleModeHandler}\n                  >\n                    <Option value=\"daily\">Daily</Option>\n                    <Option value=\"weekly\">Weekly</Option>\n                  </Select>\n                </Col>\n                <Col span={24}>\n                  <Button onClick={downloadSVGHandler}>Download SVG</Button>\n                </Col>\n              </Row>\n            </Drawer>\n          </div>\n          {histogramData &&\n            props.width &&\n            props.height &&\n            chartMode === \"histogram\" && (\n              <TemporalHistogram\n                width={props.width}\n                height={props.height}\n                chartData={histogramData}\n                isolateData={props.isolateData}\n                setSelectedData={props.setSelectedData}\n                selectedData={props.selectedData}\n                isUserRedraw={isUserRedraw}\n                temporalbarSettings={props.temporalbarSettings}\n              />\n            )}\n          {stackedBarData &&\n            props.width &&\n            props.height &&\n            chartMode === \"stackedBar\" && (\n              <TemporalStackedBar\n                width={props.width}\n                height={props.height}\n                chartData={stackedBarData}\n                isolateData={props.isolateData}\n                setSelectedData={props.setSelectedData}\n                selectedData={props.selectedData}\n                isUserRedraw={isUserRedraw}\n                temporalbarSettings={props.temporalbarSettings}\n                colorScale={props.colorScale}\n              />\n            )}\n        </Card>\n      </div>\n    </React.Fragment>\n  );\n};\n\nfunction mapStateToProps(state) {\n  return {\n    isolateData: state.isolateData,\n    selectedData: state.selectedData,\n    temporalbarSettings: state.temporalbarSettings,\n    colorScale: state.colorScale,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators(\n    {\n      deactivateChart: deactivateChart,\n      setSelectedData: setSelectedData,\n      changeTempResizeSignal: changeTempResizeSignal,\n      changeTempChartMode: changeTempChartMode,\n      changeTempScaleMode: changeTempScaleMode,\n    },\n    dispatch\n  );\n}\n\nconst MeasuredTemporalBar = withMeasure(dimensions)(TemporalBar);\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(MeasuredTemporalBar);\n\n/*\n<Button\n  size={\"small\"}\n  style={{ margin: \"0 5px\", border: \"none\" }}\n  icon={<RetweetOutlined />}\n  onClick={userRedrawHandler}\n></Button>\n*/\n"]},"metadata":{},"sourceType":"module"}