{"ast":null,"code":"import { ACTIVE_CHART, INACTIVE_CHART, MULTI_ACTIVE_CHART, MULTI_INACTIVE_CHART } from \"../utils/constants\";\nimport { initialState } from \"../reducers\"; //\n\nvar activeChartReducer = function activeChartReducer(prevState, action) {\n  switch (action.type) {\n    case ACTIVE_CHART:\n      //get list of charts that must be active and used to render side menu\n      //clone previous state and change the object which the key is on action.activechart\n      var newState = Object.assign({}, prevState);\n\n      if (action.chartId) {\n        newState[action.chartId].show = true;\n      }\n\n      return newState;\n\n    case INACTIVE_CHART:\n      var newState2 = Object.assign({}, prevState);\n\n      if (action.chartId) {\n        newState2[action.chartId].show = false;\n      }\n\n      return newState2;\n\n    case MULTI_ACTIVE_CHART:\n      return action.payload;\n\n    case MULTI_INACTIVE_CHART:\n      return action.payload;\n\n    default:\n      if (prevState) {\n        return prevState;\n      } else {\n        return initialState.activeChart;\n      }\n\n  }\n};\n\nexport default activeChartReducer; ///\n// switch (action.type) {\n//   case ACTIVE_CHART:\n//     let newState = Object.assign({}, prevState)\n//     if (action.activeChart) {\n//       switch (action.activeChart) {\n//         case 'gantt':\n//           newState['gantt'].show = true;\n//           newState['idxCol'].show = true;\n//           break;\n//         case 'floorplan':\n//           newState['floorplan'].show = true;\n//           break;\n//         default:\n//         newState[action.activeChart].show = true;\n//       }\n//     }\n//     else if (action.inactiveChart) {\n//       switch (action.inactiveChart) {\n//         case 'gantt':\n//           newState['gantt'].show = false;\n//           newState['idxCol'].show = false;\n//           break;\n//         case 'home':\n//           newState['home'] = true;\n//           break;\n//         case 'floorplan':\n//           newState['floorplan'].show = false;\n//           break;\n//         default:\n//         newState[action.inactiveChart].show = false;\n//       }\n//     }\n//     return newState\n//\n//\n//   case ADD_FLOORPLAN:\n//     return action.newActiveChart\n//   default:\n//   if (prevState) {\n//     return prevState}\n//   else {return initialState.activeChart}\n//\n// }","map":{"version":3,"sources":["/Volumes/DATA/BUDI/APP_DEV/haiviz-v04/src/reducers/reducer-activeChart.js"],"names":["ACTIVE_CHART","INACTIVE_CHART","MULTI_ACTIVE_CHART","MULTI_INACTIVE_CHART","initialState","activeChartReducer","prevState","action","type","newState","Object","assign","chartId","show","newState2","payload","activeChart"],"mappings":"AAAA,SACEA,YADF,EAEEC,cAFF,EAGEC,kBAHF,EAIEC,oBAJF,QAKO,oBALP;AAMA,SAASC,YAAT,QAA6B,aAA7B,C,CACA;;AAEA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,SAAD,EAAYC,MAAZ,EAAuB;AAChD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKR,YAAL;AACE;AACA;AACA,UAAIS,QAAQ,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBL,SAAlB,CAAf;;AACA,UAAIC,MAAM,CAACK,OAAX,EAAoB;AAClBH,QAAAA,QAAQ,CAACF,MAAM,CAACK,OAAR,CAAR,CAAyBC,IAAzB,GAAgC,IAAhC;AACD;;AACD,aAAOJ,QAAP;;AAEF,SAAKR,cAAL;AACE,UAAIa,SAAS,GAAGJ,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBL,SAAlB,CAAhB;;AACA,UAAIC,MAAM,CAACK,OAAX,EAAoB;AAClBE,QAAAA,SAAS,CAACP,MAAM,CAACK,OAAR,CAAT,CAA0BC,IAA1B,GAAiC,KAAjC;AACD;;AACD,aAAOC,SAAP;;AAEF,SAAKZ,kBAAL;AACE,aAAOK,MAAM,CAACQ,OAAd;;AAEF,SAAKZ,oBAAL;AACE,aAAOI,MAAM,CAACQ,OAAd;;AAEF;AACE,UAAIT,SAAJ,EAAe;AACb,eAAOA,SAAP;AACD,OAFD,MAEO;AACL,eAAOF,YAAY,CAACY,WAApB;AACD;;AA5BL;AA8BD,CA/BD;;AAiCA,eAAeX,kBAAf,C,CACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import {\n  ACTIVE_CHART,\n  INACTIVE_CHART,\n  MULTI_ACTIVE_CHART,\n  MULTI_INACTIVE_CHART\n} from \"../utils/constants\";\nimport { initialState } from \"../reducers\";\n//\n\nconst activeChartReducer = (prevState, action) => {\n  switch (action.type) {\n    case ACTIVE_CHART:\n      //get list of charts that must be active and used to render side menu\n      //clone previous state and change the object which the key is on action.activechart\n      let newState = Object.assign({}, prevState);\n      if (action.chartId) {\n        newState[action.chartId].show = true;\n      }\n      return newState;\n\n    case INACTIVE_CHART:\n      let newState2 = Object.assign({}, prevState);\n      if (action.chartId) {\n        newState2[action.chartId].show = false;\n      }\n      return newState2;\n\n    case MULTI_ACTIVE_CHART:\n      return action.payload;\n\n    case MULTI_INACTIVE_CHART:\n      return action.payload;\n\n    default:\n      if (prevState) {\n        return prevState;\n      } else {\n        return initialState.activeChart;\n      }\n  }\n};\n\nexport default activeChartReducer;\n///\n\n// switch (action.type) {\n//   case ACTIVE_CHART:\n//     let newState = Object.assign({}, prevState)\n//     if (action.activeChart) {\n//       switch (action.activeChart) {\n//         case 'gantt':\n//           newState['gantt'].show = true;\n//           newState['idxCol'].show = true;\n//           break;\n//         case 'floorplan':\n//           newState['floorplan'].show = true;\n//           break;\n//         default:\n//         newState[action.activeChart].show = true;\n//       }\n//     }\n//     else if (action.inactiveChart) {\n//       switch (action.inactiveChart) {\n//         case 'gantt':\n//           newState['gantt'].show = false;\n//           newState['idxCol'].show = false;\n//           break;\n//         case 'home':\n//           newState['home'] = true;\n//           break;\n//         case 'floorplan':\n//           newState['floorplan'].show = false;\n//           break;\n//         default:\n//         newState[action.inactiveChart].show = false;\n//       }\n//     }\n//     return newState\n//\n//\n//   case ADD_FLOORPLAN:\n//     return action.newActiveChart\n//   default:\n//   if (prevState) {\n//     return prevState}\n//   else {return initialState.activeChart}\n//\n// }\n"]},"metadata":{},"sourceType":"module"}