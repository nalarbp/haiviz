{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Volumes/DATA/BUDI/APP_DEV/haiviz-v04/src/page_documentation/docs_InputFormat.js\";\n\n/* ============================================================================\n============================================================================ */\nimport React from \"react\";\nimport { Typography, Divider, Button } from \"antd\";\nimport \"./style_Documentation.css\";\nimport * as constant from \"../utils/constants\";\nimport { Link } from \"react-router-dom\";\nvar Title = Typography.Title,\n    Text = Typography.Text;\n\nvar InputFormat = function InputFormat(props) {\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"haiviz-docs-content\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Title, {\n    level: 3,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 9\n    }\n  }, \"Isolate metadata\"), /*#__PURE__*/React.createElement(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 9\n    }\n  }, \"The metadata contains isolate\\u2019s information such as the name, locations, date of collection, and other isolates\\u2019 profiles, formatted in comma-separated value (.csv). Metadata file is a mandatory input to use HAIviz, as it serves as a central hub to link other inputs and to create integrated visualization. For instance, to integrate phylogenetic tree and transmission graph both files must have identical isolate\\u2019s name with the metadata\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    href: constant.TEMPLATE.isolateData,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }\n  }, \"Metadata example file\"), /*#__PURE__*/React.createElement(Divider, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Title, {\n    level: 3,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }\n  }, \"Local map \"), /*#__PURE__*/React.createElement(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }\n  }, \"The local map input is an XML formatted file that contains SVG map and location data. Users can create this map on the fly at HAIviz\", /*#__PURE__*/React.createElement(Link, {\n    to: \"/create-map\",\n    onClick: function onClick() {\n      props.changeNavLocation(\"createMap\");\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 11\n    }\n  }, \" \", \"map editor page\", \" \"), \"by loading SVG image and annotating its locations.\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    href: constant.TEMPLATE.svg,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }, \"SVG example file\"), /*#__PURE__*/React.createElement(Button, {\n    href: constant.TEMPLATE.xmlData,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }, \"XML example file\"), /*#__PURE__*/React.createElement(Divider, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Title, {\n    level: 3,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }, \"Phylogenetic tree \"), /*#__PURE__*/React.createElement(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }, \"The phylogenetic tree input requires a Newick formatted tree with the branch length and the name of the taxa. The taxa name is compulsory to label the tree and link it with the metadata, while the branch length is optional to scale an additive tree.\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    href: constant.TEMPLATE.treeData,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }\n  }, \"Tree example file\"), /*#__PURE__*/React.createElement(Divider, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Title, {\n    level: 3,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  }, \"Transmission graph\"), /*#__PURE__*/React.createElement(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }\n  }, \"The transmission input a graph file that contains a collection of nodes, links, and the corresponding attributes to describe the transmission, written in DOT language format. Similar to the tree, the graph also requires attributes to be displayed correctly.\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    href: constant.TEMPLATE.transData,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }, \"Graph example file\"), /*#__PURE__*/React.createElement(Divider, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Title, {\n    level: 3,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  }, \"Movement table\"), /*#__PURE__*/React.createElement(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }, \"The host movement input is a CSV file containing host\\u2019s name, their location and the duration of their stay at that particular location (e.g., start and end date of stay).\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    href: constant.TEMPLATE.movementData,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }\n  }, \"Example file\"), /*#__PURE__*/React.createElement(Divider, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default InputFormat;","map":{"version":3,"sources":["/Volumes/DATA/BUDI/APP_DEV/haiviz-v04/src/page_documentation/docs_InputFormat.js"],"names":["React","Typography","Divider","Button","constant","Link","Title","Text","InputFormat","props","TEMPLATE","isolateData","changeNavLocation","svg","xmlData","treeData","transData","movementData"],"mappings":"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","sourcesContent":["/* ============================================================================\n============================================================================ */\nimport React from \"react\";\nimport { Typography, Divider, Button } from \"antd\";\nimport \"./style_Documentation.css\";\nimport * as constant from \"../utils/constants\";\nimport { Link } from \"react-router-dom\";\n\nconst { Title, Text } = Typography;\n\nconst InputFormat = (props) => {\n  return (\n    <React.Fragment>\n      <div className=\"haiviz-docs-content\">\n        <Title level={3}>Isolate metadata</Title>\n        <Text>\n          The metadata contains isolate’s information such as the name,\n          locations, date of collection, and other isolates’ profiles, formatted\n          in comma-separated value (.csv). Metadata file is a mandatory input to\n          use HAIviz, as it serves as a central hub to link other inputs and to\n          create integrated visualization. For instance, to integrate\n          phylogenetic tree and transmission graph both files must have\n          identical isolate’s name with the metadata\n        </Text>\n        <br />\n        <br />\n        <Button href={constant.TEMPLATE.isolateData}>\n          Metadata example file\n        </Button>\n        <Divider />\n\n        <Title level={3}>Local map </Title>\n        <Text>\n          The local map input is an XML formatted file that contains SVG map and\n          location data. Users can create this map on the fly at HAIviz\n          <Link\n            to=\"/create-map\"\n            onClick={() => {\n              props.changeNavLocation(\"createMap\");\n            }}\n          >\n            {\" \"}\n            map editor page{\" \"}\n          </Link>\n          by loading SVG image and annotating its locations.\n        </Text>\n        <br />\n        <br />\n        <Button href={constant.TEMPLATE.svg}>SVG example file</Button>\n        <Button href={constant.TEMPLATE.xmlData}>XML example file</Button>\n        <Divider />\n\n        <Title level={3}>Phylogenetic tree </Title>\n        <Text>\n          The phylogenetic tree input requires a Newick formatted tree with the\n          branch length and the name of the taxa. The taxa name is compulsory to\n          label the tree and link it with the metadata, while the branch length\n          is optional to scale an additive tree.\n        </Text>\n        <br />\n        <br />\n        <Button href={constant.TEMPLATE.treeData}>Tree example file</Button>\n        <Divider />\n\n        <Title level={3}>Transmission graph</Title>\n        <Text>\n          The transmission input a graph file that contains a collection of\n          nodes, links, and the corresponding attributes to describe the\n          transmission, written in DOT language format. Similar to the tree, the\n          graph also requires attributes to be displayed correctly.\n        </Text>\n        <br />\n        <br />\n        <Button href={constant.TEMPLATE.transData}>Graph example file</Button>\n        <Divider />\n\n        <Title level={3}>Movement table</Title>\n        <Text>\n          The host movement input is a CSV file containing host’s name, their\n          location and the duration of their stay at that particular location\n          (e.g., start and end date of stay).\n        </Text>\n        <br />\n        <br />\n        <Button href={constant.TEMPLATE.movementData}>Example file</Button>\n        <Divider />\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default InputFormat;\n"]},"metadata":{},"sourceType":"module"}