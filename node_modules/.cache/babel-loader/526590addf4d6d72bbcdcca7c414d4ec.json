{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Volumes/DATA/BUDI/APP_DEV/haiviz-v04/src/viz_PhyloTree/comp_PhyloTree_Settings.js\";\n\n/* ============================================================================\n============================================================================ */\nimport React from \"react\";\nimport { Button, Drawer, Slider, Checkbox, Row, Col, Select } from \"antd\";\nimport { capitalizeFirstLetter } from \"../utils/utils\";\nvar Option = Select.Option;\n\nvar PhyloTreeSettings = function PhyloTreeSettings(props) {\n  //SETTINGS/STATE\n  var layoutKey = props.phylotreeSettings.layout;\n  var layoutKeyText = capitalizeFirstLetter(layoutKey);\n  var treeIsDownloading = props.phylotreeSettings.isDownloading; //HANDLERS\n  //-LAYOUT\n\n  var treeLayoutHandler = function treeLayoutHandler(val) {\n    props.changeTreeLayout(val);\n  }; //-DOWNLOAD\n\n\n  var downloadSVGHandler = function downloadSVGHandler() {\n    if (!treeIsDownloading) {\n      props.changeIsTreeDownloading(true);\n    }\n  }; //-NODE\n\n\n  var changeIsTreeNodeAlignedHandler = function changeIsTreeNodeAlignedHandler(e) {\n    var isChecked = e.target.checked;\n    props.changeIsTreeNodeAligned(isChecked);\n  };\n\n  var textSizeHandler = function textSizeHandler(val) {\n    props.changeTreeTextSize(val);\n  }; //-SCALE\n\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Drawer, {\n    title: \"Tree settings\",\n    placement: \"right\",\n    closable: true,\n    onClose: props.closeDrawerHandler,\n    visible: props.isDrawerVisible,\n    getContainer: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    gutter: [16, 16],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    span: 24,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }\n  }, \"Tree layout\"), /*#__PURE__*/React.createElement(Select, {\n    style: {\n      width: \"100%\"\n    },\n    placeholder: layoutKeyText,\n    onChange: treeLayoutHandler,\n    value: layoutKey,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Option, {\n    value: \"rectangular\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 15\n    }\n  }, \"Rectangular\"), /*#__PURE__*/React.createElement(Option, {\n    value: \"radial\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 15\n    }\n  }, \"Radial\"), /*#__PURE__*/React.createElement(Option, {\n    value: \"diagonal\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 15\n    }\n  }, \"Diagonal\"))), /*#__PURE__*/React.createElement(Col, {\n    span: 24,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Checkbox, {\n    onChange: changeIsTreeNodeAlignedHandler,\n    checked: props.phylotreeSettings.isTaxaAligned,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }\n  }, \"Align tree label\")), /*#__PURE__*/React.createElement(Col, {\n    span: 24,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }\n  }, \"Leaf label size \"), /*#__PURE__*/React.createElement(Slider, {\n    id: \"phylotree-change-textSize\",\n    min: 0,\n    max: 15,\n    step: 1,\n    onChange: textSizeHandler,\n    defaultValue: props.phylotreeSettings.textSize,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(Col, {\n    span: 24,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    onClick: downloadSVGHandler,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }\n  }, \"Download SVG\")))));\n};\n\nexport default PhyloTreeSettings;\n/*archived\n\n<Col span={24}>\n  <p>Node size </p>\n  <Slider\n    id={\"phylotree-change-nodeSize\"}\n    min={0}\n    max={15}\n    step={1}\n    onChange={nodeSizeHandler}\n    defaultValue={props.phylotreeSettings.nodeSize}\n  ></Slider>\n</Col>\n\n<Col span={24}>\n  <p>Node's label offset </p>\n  <Slider\n    id={\"phylotree-change-textOffset\"}\n    min={-25}\n    max={25}\n    step={5}\n    onChange={textOffsetHandler}\n    defaultValue={props.phylotreeSettings.textOffset}\n  ></Slider>\n</Col>\n\n<Col span={24}>\n  <Checkbox\n    onChange={isTreeScaleShownHandler}\n    checked={props.phylotreeSettings.isScaleShown}\n  >\n    Show scale\n  </Checkbox>\n</Col>\n<Col span={24}>\n  <p>Scale</p>\n  <InputNumber\n    min={0.0001}\n    step={0.01}\n    value={props.phylotreeSettings.customScale}\n    onChange={treeCustomScaleHandler}\n    disabled={!props.phylotreeSettings.isScaleShown}\n  />\n</Col>\n*/","map":{"version":3,"sources":["/Volumes/DATA/BUDI/APP_DEV/haiviz-v04/src/viz_PhyloTree/comp_PhyloTree_Settings.js"],"names":["React","Button","Drawer","Slider","Checkbox","Row","Col","Select","capitalizeFirstLetter","Option","PhyloTreeSettings","props","layoutKey","phylotreeSettings","layout","layoutKeyText","treeIsDownloading","isDownloading","treeLayoutHandler","val","changeTreeLayout","downloadSVGHandler","changeIsTreeDownloading","changeIsTreeNodeAlignedHandler","e","isChecked","target","checked","changeIsTreeNodeAligned","textSizeHandler","changeTreeTextSize","closeDrawerHandler","isDrawerVisible","width","isTaxaAligned","textSize"],"mappings":"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","sourcesContent":["/* ============================================================================\n============================================================================ */\nimport React from \"react\";\nimport { Button, Drawer, Slider, Checkbox, Row, Col, Select } from \"antd\";\nimport { capitalizeFirstLetter } from \"../utils/utils\";\n\nconst { Option } = Select;\n\nconst PhyloTreeSettings = (props) => {\n  //SETTINGS/STATE\n  const layoutKey = props.phylotreeSettings.layout;\n  const layoutKeyText = capitalizeFirstLetter(layoutKey);\n  const treeIsDownloading = props.phylotreeSettings.isDownloading;\n\n  //HANDLERS\n  //-LAYOUT\n  const treeLayoutHandler = (val) => {\n    props.changeTreeLayout(val);\n  };\n  //-DOWNLOAD\n  const downloadSVGHandler = () => {\n    if (!treeIsDownloading) {\n      props.changeIsTreeDownloading(true);\n    }\n  };\n  //-NODE\n  const changeIsTreeNodeAlignedHandler = (e) => {\n    let isChecked = e.target.checked;\n    props.changeIsTreeNodeAligned(isChecked);\n  };\n  const textSizeHandler = (val) => {\n    props.changeTreeTextSize(val);\n  };\n  //-SCALE\n\n  return (\n    <React.Fragment>\n      <Drawer\n        title=\"Tree settings\"\n        placement=\"right\"\n        closable={true}\n        onClose={props.closeDrawerHandler}\n        visible={props.isDrawerVisible}\n        getContainer={true}\n      >\n        <Row gutter={[16, 16]}>\n          <Col span={24}>\n            <p>Tree layout</p>\n            <Select\n              style={{ width: \"100%\" }}\n              placeholder={layoutKeyText}\n              onChange={treeLayoutHandler}\n              value={layoutKey}\n            >\n              <Option value=\"rectangular\">Rectangular</Option>\n              <Option value=\"radial\">Radial</Option>\n              <Option value=\"diagonal\">Diagonal</Option>\n            </Select>\n          </Col>\n\n          <Col span={24}>\n            <Checkbox\n              onChange={changeIsTreeNodeAlignedHandler}\n              checked={props.phylotreeSettings.isTaxaAligned}\n            >\n              Align tree label\n            </Checkbox>\n          </Col>\n\n          <Col span={24}>\n            <p>Leaf label size </p>\n            <Slider\n              id={\"phylotree-change-textSize\"}\n              min={0}\n              max={15}\n              step={1}\n              onChange={textSizeHandler}\n              defaultValue={props.phylotreeSettings.textSize}\n            ></Slider>\n          </Col>\n          <Col span={24}>\n            <Button onClick={downloadSVGHandler}>Download SVG</Button>\n          </Col>\n        </Row>\n      </Drawer>\n    </React.Fragment>\n  );\n};\n\nexport default PhyloTreeSettings;\n\n/*archived\n\n<Col span={24}>\n  <p>Node size </p>\n  <Slider\n    id={\"phylotree-change-nodeSize\"}\n    min={0}\n    max={15}\n    step={1}\n    onChange={nodeSizeHandler}\n    defaultValue={props.phylotreeSettings.nodeSize}\n  ></Slider>\n</Col>\n\n<Col span={24}>\n  <p>Node's label offset </p>\n  <Slider\n    id={\"phylotree-change-textOffset\"}\n    min={-25}\n    max={25}\n    step={5}\n    onChange={textOffsetHandler}\n    defaultValue={props.phylotreeSettings.textOffset}\n  ></Slider>\n</Col>\n\n<Col span={24}>\n  <Checkbox\n    onChange={isTreeScaleShownHandler}\n    checked={props.phylotreeSettings.isScaleShown}\n  >\n    Show scale\n  </Checkbox>\n</Col>\n<Col span={24}>\n  <p>Scale</p>\n  <InputNumber\n    min={0.0001}\n    step={0.01}\n    value={props.phylotreeSettings.customScale}\n    onChange={treeCustomScaleHandler}\n    disabled={!props.phylotreeSettings.isScaleShown}\n  />\n</Col>\n*/\n"]},"metadata":{},"sourceType":"module"}