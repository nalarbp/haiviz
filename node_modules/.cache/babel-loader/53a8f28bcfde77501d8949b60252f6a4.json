{"ast":null,"code":"/**\n * Newick format parser in JavaScript.\n *\n * Copyright (c) Jason Davies 2010.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n *\n * Example tree (from http://en.wikipedia.org/wiki/Newick_format):\n *\n * +--0.1--A\n * F-----0.2-----B            +-------0.3----C\n * +------------------0.5-----E\n *                            +---------0.4------D\n *\n * Newick format:\n * (A:0.1,B:0.2,(C:0.3,D:0.4)E:0.5)F;\n *\n * Converted to JSON:\n * {\n *   name: \"F\",\n *   branchset: [\n *     {name: \"A\", length: 0.1},\n *     {name: \"B\", length: 0.2},\n *     {\n *       name: \"E\",\n *       length: 0.5,\n *       branchset: [\n *         {name: \"C\", length: 0.3},\n *         {name: \"D\", length: 0.4}\n *       ]\n *     }\n *   ]\n * }\n *\n * Converted to JSON, but with no names or lengths:\n * {\n *   branchset: [\n *     {}, {}, {\n *       branchset: [{}, {}]\n *     }\n *   ]\n * }\n */\n//Converted to ES6 module\nexport default function newickParse(s) {\n  var ancestors = [];\n  var tree = {};\n  var tokens = s.split(/\\s*(;|\\(|\\)|,|:)\\s*/);\n\n  for (var i = 0; i < tokens.length; i++) {\n    var token = tokens[i];\n\n    switch (token) {\n      case \"(\":\n        // new branchset\n        var subtree1 = {};\n        tree.branchset = [subtree1];\n        ancestors.push(tree);\n        tree = subtree1;\n        break;\n\n      case \",\":\n        // another branch\n        var subtree2 = {};\n        ancestors[ancestors.length - 1].branchset.push(subtree2);\n        tree = subtree2;\n        break;\n\n      case \")\":\n        // optional name next\n        tree = ancestors.pop();\n        break;\n\n      case \":\":\n        // optional length next\n        break;\n\n      default:\n        var x = tokens[i - 1]; //console.log(\"x\", x);\n\n        if (x === \")\" || x === \"(\" || x === \",\") {\n          tree.name = token;\n        } else if (x === \":\") {\n          tree.length = parseFloat(token);\n        }\n\n    }\n  }\n\n  return tree;\n}","map":{"version":3,"sources":["/Volumes/DATA/BUDI/APP_DEV/haiviz-v04/src/utils/newick.js"],"names":["newickParse","s","ancestors","tree","tokens","split","i","length","token","subtree1","branchset","push","subtree2","pop","x","name","parseFloat"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2DA;AAEA,eAAe,SAASA,WAAT,CAAqBC,CAArB,EAAwB;AACrC,MAAIC,SAAS,GAAG,EAAhB;AACA,MAAIC,IAAI,GAAG,EAAX;AACA,MAAIC,MAAM,GAAGH,CAAC,CAACI,KAAF,CAAQ,qBAAR,CAAb;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,MAAM,CAACG,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;AACtC,QAAIE,KAAK,GAAGJ,MAAM,CAACE,CAAD,CAAlB;;AACA,YAAQE,KAAR;AACE,WAAK,GAAL;AAAU;AACR,YAAIC,QAAQ,GAAG,EAAf;AACAN,QAAAA,IAAI,CAACO,SAAL,GAAiB,CAACD,QAAD,CAAjB;AACAP,QAAAA,SAAS,CAACS,IAAV,CAAeR,IAAf;AACAA,QAAAA,IAAI,GAAGM,QAAP;AACA;;AACF,WAAK,GAAL;AAAU;AACR,YAAIG,QAAQ,GAAG,EAAf;AACAV,QAAAA,SAAS,CAACA,SAAS,CAACK,MAAV,GAAmB,CAApB,CAAT,CAAgCG,SAAhC,CAA0CC,IAA1C,CAA+CC,QAA/C;AACAT,QAAAA,IAAI,GAAGS,QAAP;AACA;;AACF,WAAK,GAAL;AAAU;AACRT,QAAAA,IAAI,GAAGD,SAAS,CAACW,GAAV,EAAP;AACA;;AACF,WAAK,GAAL;AAAU;AACR;;AACF;AACE,YAAIC,CAAC,GAAGV,MAAM,CAACE,CAAC,GAAG,CAAL,CAAd,CADF,CAEE;;AACA,YAAIQ,CAAC,KAAK,GAAN,IAAaA,CAAC,KAAK,GAAnB,IAA0BA,CAAC,KAAK,GAApC,EAAyC;AACvCX,UAAAA,IAAI,CAACY,IAAL,GAAYP,KAAZ;AACD,SAFD,MAEO,IAAIM,CAAC,KAAK,GAAV,EAAe;AACpBX,UAAAA,IAAI,CAACI,MAAL,GAAcS,UAAU,CAACR,KAAD,CAAxB;AACD;;AAxBL;AA0BD;;AACD,SAAOL,IAAP;AACD","sourcesContent":["/**\n * Newick format parser in JavaScript.\n *\n * Copyright (c) Jason Davies 2010.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n *\n * Example tree (from http://en.wikipedia.org/wiki/Newick_format):\n *\n * +--0.1--A\n * F-----0.2-----B            +-------0.3----C\n * +------------------0.5-----E\n *                            +---------0.4------D\n *\n * Newick format:\n * (A:0.1,B:0.2,(C:0.3,D:0.4)E:0.5)F;\n *\n * Converted to JSON:\n * {\n *   name: \"F\",\n *   branchset: [\n *     {name: \"A\", length: 0.1},\n *     {name: \"B\", length: 0.2},\n *     {\n *       name: \"E\",\n *       length: 0.5,\n *       branchset: [\n *         {name: \"C\", length: 0.3},\n *         {name: \"D\", length: 0.4}\n *       ]\n *     }\n *   ]\n * }\n *\n * Converted to JSON, but with no names or lengths:\n * {\n *   branchset: [\n *     {}, {}, {\n *       branchset: [{}, {}]\n *     }\n *   ]\n * }\n */\n//Converted to ES6 module\n\nexport default function newickParse(s) {\n  var ancestors = [];\n  var tree = {};\n  var tokens = s.split(/\\s*(;|\\(|\\)|,|:)\\s*/);\n  for (var i = 0; i < tokens.length; i++) {\n    var token = tokens[i];\n    switch (token) {\n      case \"(\": // new branchset\n        var subtree1 = {};\n        tree.branchset = [subtree1];\n        ancestors.push(tree);\n        tree = subtree1;\n        break;\n      case \",\": // another branch\n        var subtree2 = {};\n        ancestors[ancestors.length - 1].branchset.push(subtree2);\n        tree = subtree2;\n        break;\n      case \")\": // optional name next\n        tree = ancestors.pop();\n        break;\n      case \":\": // optional length next\n        break;\n      default:\n        var x = tokens[i - 1];\n        //console.log(\"x\", x);\n        if (x === \")\" || x === \"(\" || x === \",\") {\n          tree.name = token;\n        } else if (x === \":\") {\n          tree.length = parseFloat(token);\n        }\n    }\n  }\n  return tree;\n}\n"]},"metadata":{},"sourceType":"module"}