{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Volumes/DATA/BUDI/APP_DEV/haiviz-v04/src/viz_TransGraph/comp_TransGraph_Settings.js\";\n\n/* ============================================================================\n//\n============================================================================ */\nimport React from \"react\";\nimport { Row, Button, Col, Drawer, Checkbox, InputNumber, Select } from \"antd\";\nimport \"./style_TransGraph.css\";\nvar Option = Select.Option;\n\nvar TransmissionGraphSettings = function TransmissionGraphSettings(props) {\n  //SETTINGS\n  var transgraphIsDownloading = props.transgraphSettings.transgraphIsDownloading;\n  var layoutKey = props.transgraphSettings.layoutKey; //HANDLERS\n\n  var downloadSVGHandler = function downloadSVGHandler() {\n    if (!transgraphIsDownloading) {\n      props.changeTransIsDownloading(true);\n    }\n  };\n\n  var setLayoutKeyHandler = function setLayoutKeyHandler(val) {\n    props.changeTransLayoutKey(val);\n  };\n\n  var showLinkLabelHandler = function showLinkLabelHandler(e) {\n    var isChecked = e.target.checked;\n    props.changeTransIsLinkLabelShown(isChecked);\n  };\n\n  var applyUserStyleHandler = function applyUserStyleHandler(e) {\n    var isChecked = e.target.checked;\n    props.changeTransisUserStyleApplied(isChecked);\n  };\n\n  var applyLinkWeightHandler = function applyLinkWeightHandler(e) {\n    var isChecked = e.target.checked;\n    props.changeTransisLinkWeightApplied(isChecked);\n  };\n\n  var changeLinkFactorHandler = function changeLinkFactorHandler(val) {\n    props.changeTransLinkFactor(val);\n  }; // const setLayoutKeyHandler = (val) => {\n  //   if (val === \"host\") {\n  //     let isHostLayoutValid = false;\n  //     const hostList = Array.from(props.isolateData.values()).map(\n  //       (d) => d.isolate_sourceName\n  //     );\n  //     const nodesName = props.data.nodes.map((d) => d.name);\n  //     for (var i = 0; i < nodesName.length; i++) {\n  //       let node = nodesName[i];\n  //       if (hostList.indexOf(node) === -1) {\n  //         isHostLayoutValid = false;\n  //         alert(\n  //           \"Node's name doesn't match with isolate_sourceName on the metadata\"\n  //         );\n  //         break;\n  //       } else {\n  //         isHostLayoutValid = true;\n  //       }\n  //     }\n  //     //console.log(hostList, nodesName);\n  //     if (isHostLayoutValid) {\n  //       props.changeTransLayoutKey(val);\n  //     }\n  //   } else if (val === \"isolate\") {\n  //     props.changeTransLayoutKey(val);\n  //   } else {\n  //   }\n  // };\n\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Drawer, {\n    title: \"Graph settings\",\n    placement: \"right\",\n    closable: true,\n    onClose: props.closeDrawerHandler,\n    visible: props.isDrawerVisible,\n    getContainer: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    gutter: [1, 16],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    span: 24,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }\n  }, \"Layout key \"), /*#__PURE__*/React.createElement(Select, {\n    style: {\n      width: \"100%\"\n    },\n    disabled: layoutKey ? false : true,\n    placeholder: layoutKey && layoutKey === \"cose\" ? \"CoSE\" : \"Spread\",\n    onChange: setLayoutKeyHandler,\n    value: layoutKey,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Option, {\n    value: \"cose\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 15\n    }\n  }, \"CoSE\"), /*#__PURE__*/React.createElement(Option, {\n    value: \"spread\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 15\n    }\n  }, \"Spread\"))), /*#__PURE__*/React.createElement(Col, {\n    span: 24,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Checkbox, {\n    onChange: showLinkLabelHandler,\n    checked: props.transgraphSettings.isLinkLabelShown,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }\n  }, \"Display edges's label\")), /*#__PURE__*/React.createElement(Col, {\n    span: 24,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Checkbox, {\n    onChange: applyUserStyleHandler,\n    checked: props.transgraphSettings.isUserStyleApplied,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }\n  }, \"Apply user's style to edges\")), /*#__PURE__*/React.createElement(Col, {\n    span: 24,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Checkbox, {\n    onChange: applyLinkWeightHandler,\n    checked: props.transgraphSettings.isLinkWeightApplied,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }\n  }, \"Scale edges to its weight\")), /*#__PURE__*/React.createElement(Col, {\n    span: 12,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }\n  }, \"Scale factor\")), /*#__PURE__*/React.createElement(Col, {\n    span: 12,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(InputNumber, {\n    min: 0.1,\n    max: 100,\n    step: 0.1,\n    value: props.transgraphSettings.linkFactor,\n    onChange: changeLinkFactorHandler,\n    disabled: !props.transgraphSettings.isLinkWeightApplied,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(Col, {\n    span: 24,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    onClick: downloadSVGHandler,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 13\n    }\n  }, \"Download SVG\")))));\n};\n\nexport default TransmissionGraphSettings;\n/*\n<Col span={24}>\n            <p>Layout key </p>\n            <Select\n              style={{ width: \"100%\" }}\n              placeholder={layoutKeyText}\n              onChange={setLayoutKeyHandler}\n              value={layoutKey}\n            >\n              <Option value=\"isolate\">Isolate</Option>\n              <Option value=\"host\">Host</Option>\n            </Select>\n          </Col>\n<Divider style={{ marginBottom: \"0px\" }} />\n<Col style={{ marginTop: \"0px\" }} span={24}>\n            <p>Node size </p>\n            <Slider\n              id={\"transgraph-change-nodeSize\"}\n              min={0}\n              max={15}\n              step={1}\n              onChange={nodeSizeHandler}\n              defaultValue={props.transgraphSettings.nodeSize}\n            ></Slider>\n          </Col>\n\n          <Col span={24}>\n            <p>Node's label size </p>\n            <Slider\n              id={\"transgraph-change-textSize\"}\n              min={0}\n              max={15}\n              step={1}\n              onChange={textSizeHandler}\n              defaultValue={props.transgraphSettings.textSize}\n            ></Slider>\n          </Col>\n\n          <Col span={24}>\n            <Checkbox\n              onChange={showLinkLabelHandler}\n              checked={props.transgraphSettings.isLinkLabelShown}\n            >\n              Display link's label\n            </Checkbox>\n          </Col>\n          <Col span={24}>\n            <Checkbox\n              onChange={applyLinkFilterHandler}\n              checked={props.transgraphSettings.isUserStyleApplied}\n            >\n              Apply links filtering\n            </Checkbox>\n          </Col>\n          <Col span={24}>\n            <p>Mininum weight to be displayed</p>\n            <InputNumber\n              min={0.0001}\n              step={0.01}\n              value={props.transgraphSettings.transgraphIsDownloading}\n              onChange={linkThresholdHandler}\n              disabled={!props.transgraphSettings.isUserStyleApplied}\n            />\n          </Col>\n<Col span={24}>\n  <p>Node's label offset </p>\n  <Slider\n    id={\"transgraph-change-textOffset\"}\n    min={-25}\n    max={25}\n    step={5}\n    onChange={textOffsetHandler}\n    defaultValue={props.transgraphSettings.textOffset}\n  ></Slider>\n</Col>\n<Divider style={{ marginBottom: \"0px\" }} />\n\n<p>Link's weight threshold</p>\n<Slider\n  id={\"transgraph-change-linkThreshold\"}\n  min={-1}\n  max={25}\n  step={1}\n  onChange={linkThresholdHandler}\n  defaultValue={props.transgraphSettings.transgraphIsDownloading}\n></Slider>\n*/","map":{"version":3,"sources":["/Volumes/DATA/BUDI/APP_DEV/haiviz-v04/src/viz_TransGraph/comp_TransGraph_Settings.js"],"names":["React","Row","Button","Col","Drawer","Checkbox","InputNumber","Select","Option","TransmissionGraphSettings","props","transgraphIsDownloading","transgraphSettings","layoutKey","downloadSVGHandler","changeTransIsDownloading","setLayoutKeyHandler","val","changeTransLayoutKey","showLinkLabelHandler","e","isChecked","target","checked","changeTransIsLinkLabelShown","applyUserStyleHandler","changeTransisUserStyleApplied","applyLinkWeightHandler","changeTransisLinkWeightApplied","changeLinkFactorHandler","changeTransLinkFactor","closeDrawerHandler","isDrawerVisible","width","isLinkLabelShown","isUserStyleApplied","isLinkWeightApplied","linkFactor"],"mappings":";;;AAAA;;;AAGA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,EAAcC,MAAd,EAAsBC,GAAtB,EAA2BC,MAA3B,EAAmCC,QAAnC,EAA6CC,WAA7C,EAA0DC,MAA1D,QAAwE,MAAxE;AACA,OAAO,wBAAP;IAEQC,M,GAAWD,M,CAAXC,M;;AAER,IAAMC,yBAAyB,GAAG,SAA5BA,yBAA4B,CAACC,KAAD,EAAW;AAC3C;AACA,MAAMC,uBAAuB,GAC3BD,KAAK,CAACE,kBAAN,CAAyBD,uBAD3B;AAEA,MAAME,SAAS,GAAGH,KAAK,CAACE,kBAAN,CAAyBC,SAA3C,CAJ2C,CAK3C;;AACA,MAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,GAAM;AAC/B,QAAI,CAACH,uBAAL,EAA8B;AAC5BD,MAAAA,KAAK,CAACK,wBAAN,CAA+B,IAA/B;AACD;AACF,GAJD;;AAKA,MAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,GAAD,EAAS;AACnCP,IAAAA,KAAK,CAACQ,oBAAN,CAA2BD,GAA3B;AACD,GAFD;;AAGA,MAAME,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACC,CAAD,EAAO;AAClC,QAAIC,SAAS,GAAGD,CAAC,CAACE,MAAF,CAASC,OAAzB;AACAb,IAAAA,KAAK,CAACc,2BAAN,CAAkCH,SAAlC;AACD,GAHD;;AAIA,MAAMI,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACL,CAAD,EAAO;AACnC,QAAIC,SAAS,GAAGD,CAAC,CAACE,MAAF,CAASC,OAAzB;AACAb,IAAAA,KAAK,CAACgB,6BAAN,CAAoCL,SAApC;AACD,GAHD;;AAIA,MAAMM,sBAAsB,GAAG,SAAzBA,sBAAyB,CAACP,CAAD,EAAO;AACpC,QAAIC,SAAS,GAAGD,CAAC,CAACE,MAAF,CAASC,OAAzB;AACAb,IAAAA,KAAK,CAACkB,8BAAN,CAAqCP,SAArC;AACD,GAHD;;AAIA,MAAMQ,uBAAuB,GAAG,SAA1BA,uBAA0B,CAACZ,GAAD,EAAS;AACvCP,IAAAA,KAAK,CAACoB,qBAAN,CAA4Bb,GAA5B;AACD,GAFD,CA1B2C,CA8B3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,sBACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AACE,IAAA,KAAK,EAAC,gBADR;AAEE,IAAA,SAAS,EAAC,OAFZ;AAGE,IAAA,QAAQ,EAAE,IAHZ;AAIE,IAAA,OAAO,EAAEP,KAAK,CAACqB,kBAJjB;AAKE,IAAA,OAAO,EAAErB,KAAK,CAACsB,eALjB;AAME,IAAA,YAAY,EAAE,IANhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAQE,oBAAC,GAAD;AAAK,IAAA,MAAM,EAAE,CAAC,CAAD,EAAI,EAAJ,CAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,GAAD;AAAK,IAAA,IAAI,EAAE,EAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,eAEE,oBAAC,MAAD;AACE,IAAA,KAAK,EAAE;AAAEC,MAAAA,KAAK,EAAE;AAAT,KADT;AAEE,IAAA,QAAQ,EAAEpB,SAAS,GAAG,KAAH,GAAW,IAFhC;AAGE,IAAA,WAAW,EACTA,SAAS,IAAIA,SAAS,KAAK,MAA3B,GAAoC,MAApC,GAA6C,QAJjD;AAME,IAAA,QAAQ,EAAEG,mBANZ;AAOE,IAAA,KAAK,EAAEH,SAPT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBASE,oBAAC,MAAD;AAAQ,IAAA,KAAK,EAAC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YATF,eAUE,oBAAC,MAAD;AAAQ,IAAA,KAAK,EAAC,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAVF,CAFF,CADF,eAgBE,oBAAC,GAAD;AAAK,IAAA,IAAI,EAAE,EAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,QAAD;AACE,IAAA,QAAQ,EAAEM,oBADZ;AAEE,IAAA,OAAO,EAAET,KAAK,CAACE,kBAAN,CAAyBsB,gBAFpC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BADF,CAhBF,eAwBE,oBAAC,GAAD;AAAK,IAAA,IAAI,EAAE,EAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,QAAD;AACE,IAAA,QAAQ,EAAET,qBADZ;AAEE,IAAA,OAAO,EAAEf,KAAK,CAACE,kBAAN,CAAyBuB,kBAFpC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCADF,CAxBF,eAiCE,oBAAC,GAAD;AAAK,IAAA,IAAI,EAAE,EAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,QAAD;AACE,IAAA,QAAQ,EAAER,sBADZ;AAEE,IAAA,OAAO,EAAEjB,KAAK,CAACE,kBAAN,CAAyBwB,mBAFpC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCADF,CAjCF,eA0CE,oBAAC,GAAD;AAAK,IAAA,IAAI,EAAE,EAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,CA1CF,eA6CE,oBAAC,GAAD;AAAK,IAAA,IAAI,EAAE,EAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,WAAD;AACE,IAAA,GAAG,EAAE,GADP;AAEE,IAAA,GAAG,EAAE,GAFP;AAGE,IAAA,IAAI,EAAE,GAHR;AAIE,IAAA,KAAK,EAAE1B,KAAK,CAACE,kBAAN,CAAyByB,UAJlC;AAKE,IAAA,QAAQ,EAAER,uBALZ;AAME,IAAA,QAAQ,EAAE,CAACnB,KAAK,CAACE,kBAAN,CAAyBwB,mBANtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CA7CF,eAuDE,oBAAC,GAAD;AAAK,IAAA,IAAI,EAAE,EAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAEtB,kBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,CAvDF,CARF,CADF,CADF;AAwED,CAnID;;AAqIA,eAAeL,yBAAf;AAEA","sourcesContent":["/* ============================================================================\n//\n============================================================================ */\nimport React from \"react\";\nimport { Row, Button, Col, Drawer, Checkbox, InputNumber, Select } from \"antd\";\nimport \"./style_TransGraph.css\";\n\nconst { Option } = Select;\n\nconst TransmissionGraphSettings = (props) => {\n  //SETTINGS\n  const transgraphIsDownloading =\n    props.transgraphSettings.transgraphIsDownloading;\n  const layoutKey = props.transgraphSettings.layoutKey;\n  //HANDLERS\n  const downloadSVGHandler = () => {\n    if (!transgraphIsDownloading) {\n      props.changeTransIsDownloading(true);\n    }\n  };\n  const setLayoutKeyHandler = (val) => {\n    props.changeTransLayoutKey(val);\n  };\n  const showLinkLabelHandler = (e) => {\n    let isChecked = e.target.checked;\n    props.changeTransIsLinkLabelShown(isChecked);\n  };\n  const applyUserStyleHandler = (e) => {\n    let isChecked = e.target.checked;\n    props.changeTransisUserStyleApplied(isChecked);\n  };\n  const applyLinkWeightHandler = (e) => {\n    let isChecked = e.target.checked;\n    props.changeTransisLinkWeightApplied(isChecked);\n  };\n  const changeLinkFactorHandler = (val) => {\n    props.changeTransLinkFactor(val);\n  };\n\n  // const setLayoutKeyHandler = (val) => {\n  //   if (val === \"host\") {\n  //     let isHostLayoutValid = false;\n  //     const hostList = Array.from(props.isolateData.values()).map(\n  //       (d) => d.isolate_sourceName\n  //     );\n  //     const nodesName = props.data.nodes.map((d) => d.name);\n  //     for (var i = 0; i < nodesName.length; i++) {\n  //       let node = nodesName[i];\n  //       if (hostList.indexOf(node) === -1) {\n  //         isHostLayoutValid = false;\n  //         alert(\n  //           \"Node's name doesn't match with isolate_sourceName on the metadata\"\n  //         );\n  //         break;\n  //       } else {\n  //         isHostLayoutValid = true;\n  //       }\n  //     }\n  //     //console.log(hostList, nodesName);\n  //     if (isHostLayoutValid) {\n  //       props.changeTransLayoutKey(val);\n  //     }\n  //   } else if (val === \"isolate\") {\n  //     props.changeTransLayoutKey(val);\n  //   } else {\n  //   }\n  // };\n\n  return (\n    <React.Fragment>\n      <Drawer\n        title=\"Graph settings\"\n        placement=\"right\"\n        closable={true}\n        onClose={props.closeDrawerHandler}\n        visible={props.isDrawerVisible}\n        getContainer={true}\n      >\n        <Row gutter={[1, 16]}>\n          <Col span={24}>\n            <p>Layout key </p>\n            <Select\n              style={{ width: \"100%\" }}\n              disabled={layoutKey ? false : true}\n              placeholder={\n                layoutKey && layoutKey === \"cose\" ? \"CoSE\" : \"Spread\"\n              }\n              onChange={setLayoutKeyHandler}\n              value={layoutKey}\n            >\n              <Option value=\"cose\">CoSE</Option>\n              <Option value=\"spread\">Spread</Option>\n            </Select>\n          </Col>\n          <Col span={24}>\n            <Checkbox\n              onChange={showLinkLabelHandler}\n              checked={props.transgraphSettings.isLinkLabelShown}\n            >\n              Display edges's label\n            </Checkbox>\n          </Col>\n          <Col span={24}>\n            <Checkbox\n              onChange={applyUserStyleHandler}\n              checked={props.transgraphSettings.isUserStyleApplied}\n            >\n              Apply user's style to edges\n            </Checkbox>\n          </Col>\n\n          <Col span={24}>\n            <Checkbox\n              onChange={applyLinkWeightHandler}\n              checked={props.transgraphSettings.isLinkWeightApplied}\n            >\n              Scale edges to its weight\n            </Checkbox>\n          </Col>\n\n          <Col span={12}>\n            <p>Scale factor</p>\n          </Col>\n          <Col span={12}>\n            <InputNumber\n              min={0.1}\n              max={100}\n              step={0.1}\n              value={props.transgraphSettings.linkFactor}\n              onChange={changeLinkFactorHandler}\n              disabled={!props.transgraphSettings.isLinkWeightApplied}\n            />\n          </Col>\n          <Col span={24}>\n            <Button onClick={downloadSVGHandler}>Download SVG</Button>\n          </Col>\n        </Row>\n      </Drawer>\n    </React.Fragment>\n  );\n};\n\nexport default TransmissionGraphSettings;\n\n/*\n<Col span={24}>\n            <p>Layout key </p>\n            <Select\n              style={{ width: \"100%\" }}\n              placeholder={layoutKeyText}\n              onChange={setLayoutKeyHandler}\n              value={layoutKey}\n            >\n              <Option value=\"isolate\">Isolate</Option>\n              <Option value=\"host\">Host</Option>\n            </Select>\n          </Col>\n<Divider style={{ marginBottom: \"0px\" }} />\n<Col style={{ marginTop: \"0px\" }} span={24}>\n            <p>Node size </p>\n            <Slider\n              id={\"transgraph-change-nodeSize\"}\n              min={0}\n              max={15}\n              step={1}\n              onChange={nodeSizeHandler}\n              defaultValue={props.transgraphSettings.nodeSize}\n            ></Slider>\n          </Col>\n\n          <Col span={24}>\n            <p>Node's label size </p>\n            <Slider\n              id={\"transgraph-change-textSize\"}\n              min={0}\n              max={15}\n              step={1}\n              onChange={textSizeHandler}\n              defaultValue={props.transgraphSettings.textSize}\n            ></Slider>\n          </Col>\n\n          <Col span={24}>\n            <Checkbox\n              onChange={showLinkLabelHandler}\n              checked={props.transgraphSettings.isLinkLabelShown}\n            >\n              Display link's label\n            </Checkbox>\n          </Col>\n          <Col span={24}>\n            <Checkbox\n              onChange={applyLinkFilterHandler}\n              checked={props.transgraphSettings.isUserStyleApplied}\n            >\n              Apply links filtering\n            </Checkbox>\n          </Col>\n          <Col span={24}>\n            <p>Mininum weight to be displayed</p>\n            <InputNumber\n              min={0.0001}\n              step={0.01}\n              value={props.transgraphSettings.transgraphIsDownloading}\n              onChange={linkThresholdHandler}\n              disabled={!props.transgraphSettings.isUserStyleApplied}\n            />\n          </Col>\n<Col span={24}>\n  <p>Node's label offset </p>\n  <Slider\n    id={\"transgraph-change-textOffset\"}\n    min={-25}\n    max={25}\n    step={5}\n    onChange={textOffsetHandler}\n    defaultValue={props.transgraphSettings.textOffset}\n  ></Slider>\n</Col>\n<Divider style={{ marginBottom: \"0px\" }} />\n\n<p>Link's weight threshold</p>\n<Slider\n  id={\"transgraph-change-linkThreshold\"}\n  min={-1}\n  max={25}\n  step={1}\n  onChange={linkThresholdHandler}\n  defaultValue={props.transgraphSettings.transgraphIsDownloading}\n></Slider>\n*/\n"]},"metadata":{},"sourceType":"module"}