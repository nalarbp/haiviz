{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Volumes/DATA/BUDI/APP_DEV/haiviz-v04/src/viz_InputFiles/btn_PhylotreeInput.js\";\n\n/*\n// TODO:\nValidation: all leaf node in the tree must exist in isolate data (nodes tidak boleh lebih besar dari isolate data)\nImportant settings:\n+ node label text size change\n+ node size\n+ change scale\n+ align\n+ sort\n*/\nimport React, { useEffect, useState } from \"react\";\nimport { text } from \"d3-fetch\";\nimport { hierarchy, cluster } from \"d3-hierarchy\";\nimport { Card, Empty, Spin, Upload } from \"antd\";\nimport { CheckCircleTwoTone } from \"@ant-design/icons\";\nimport newickParse from \"../utils/newick\";\nimport { PhylotreeInputSVG } from \"../utils/customIcons\";\nimport { filterUnique } from \"../utils/utils\";\nvar Dragger = Upload.Dragger; //props.treeData, props.loadTreeData\n\nvar PhylotreeInput = function PhylotreeInput(props) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLoading = _useState2[0],\n      setisLoading = _useState2[1]; //functions\n\n\n  function parseTree(_x) {\n    return _parseTree.apply(this, arguments);\n  }\n\n  function _parseTree() {\n    _parseTree = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(fileURL) {\n      var tree_promise, tree_is_valid, phylotree, phylotreeData, clusterLayout, treeLayout, tree_leaves, tree_leaves_unique;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return text(fileURL).then(function (result) {\n                return result;\n              });\n\n            case 2:\n              tree_promise = _context.sent;\n              // Do validation here\n              tree_is_valid = false;\n\n              try {\n                phylotree = newickParse(tree_promise); //err stop here\n              } catch (e) {\n                setisLoading(false);\n              } //alert and stop when invalid, send tree to store when valid\n\n\n              if (!phylotree) {\n                _context.next = 18;\n                break;\n              }\n\n              phylotreeData = hierarchy(phylotree, function (d) {\n                return d.branchset;\n              }).sum(function (d) {\n                return d.branchset ? 0 : 1;\n              });\n              clusterLayout = cluster().size([100, 100]);\n              treeLayout = clusterLayout(phylotreeData);\n              tree_leaves = treeLayout.leaves().map(function (d) {\n                return d.data.name;\n              });\n              tree_leaves_unique = tree_leaves.filter(filterUnique);\n\n              if (!(tree_leaves.length === tree_leaves_unique.length)) {\n                _context.next = 15;\n                break;\n              }\n\n              tree_is_valid = true;\n              _context.next = 18;\n              break;\n\n            case 15:\n              alert(\"Invalid tree: duplicated leaf labels are detected\");\n              setisLoading(false);\n              return _context.abrupt(\"return\");\n\n            case 18:\n              if (!tree_is_valid) {\n                _context.next = 22;\n                break;\n              }\n\n              props.loadTreeData(tree_promise);\n              _context.next = 25;\n              break;\n\n            case 22:\n              alert(\"Invalid tree\");\n              setisLoading(false);\n              return _context.abrupt(\"return\");\n\n            case 25:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _parseTree.apply(this, arguments);\n  }\n\n  var beforeUploadHandler = function beforeUploadHandler(file) {\n    setisLoading(true);\n\n    if (file) {\n      var reader = new FileReader();\n      reader.readAsDataURL(file);\n\n      reader.onloadend = function (evt) {\n        var dataUrl = evt.target.result;\n        parseTree(dataUrl);\n      };\n    }\n  };\n\n  useEffect(function () {\n    if (props.treeData) {\n      setisLoading(false);\n    }\n  }, [props.treeData]);\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    title: \"Phylogenetic tree\",\n    style: {\n      height: \"100%\"\n    },\n    headStyle: {\n      textAlign: \"left\"\n    },\n    bodyStyle: {\n      margin: \"0px\",\n      padding: \"5px\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }\n  }, !props.isolateData && /*#__PURE__*/React.createElement(Empty, {\n    image: Empty.PRESENTED_IMAGE_SIMPLE,\n    description: \"Please load the metadata first\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 11\n    }\n  }), props.isolateData && !isLoading && !props.treeData && /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Dragger, {\n    accept: \".nwk, .tre, .tree\",\n    style: {\n      padding: \"10px\"\n    },\n    name: \"file\",\n    multiple: false,\n    action: \"dummy-post\",\n    beforeUpload: beforeUploadHandler,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(PhylotreeInputSVG, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 17\n    }\n  })))), props.isolateData && isLoading && !props.treeData && /*#__PURE__*/React.createElement(Spin, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 63\n    }\n  }), props.isolateData && !isLoading && props.treeData && /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      padding: \"10px\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(CheckCircleTwoTone, {\n    twoToneColor: \"#52c41a\",\n    style: {\n      fontSize: \"20pt\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 15\n    }\n  }, \"Loaded!\")))));\n};\n\nexport default PhylotreeInput;","map":{"version":3,"sources":["/Volumes/DATA/BUDI/APP_DEV/haiviz-v04/src/viz_InputFiles/btn_PhylotreeInput.js"],"names":["React","useEffect","useState","text","hierarchy","cluster","Card","Empty","Spin","Upload","CheckCircleTwoTone","newickParse","PhylotreeInputSVG","filterUnique","Dragger","PhylotreeInput","props","isLoading","setisLoading","parseTree","fileURL","then","result","tree_promise","tree_is_valid","phylotree","e","phylotreeData","d","branchset","sum","clusterLayout","size","treeLayout","tree_leaves","leaves","map","data","name","tree_leaves_unique","filter","length","alert","loadTreeData","beforeUploadHandler","file","reader","FileReader","readAsDataURL","onloadend","evt","dataUrl","target","treeData","height","textAlign","margin","padding","isolateData","PRESENTED_IMAGE_SIMPLE","fontSize"],"mappings":"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","sourcesContent":["/*\n// TODO:\nValidation: all leaf node in the tree must exist in isolate data (nodes tidak boleh lebih besar dari isolate data)\nImportant settings:\n+ node label text size change\n+ node size\n+ change scale\n+ align\n+ sort\n*/\nimport React, { useEffect, useState } from \"react\";\nimport { text } from \"d3-fetch\";\nimport { hierarchy, cluster } from \"d3-hierarchy\";\nimport { Card, Empty, Spin, Upload } from \"antd\";\nimport { CheckCircleTwoTone } from \"@ant-design/icons\";\nimport newickParse from \"../utils/newick\";\nimport { PhylotreeInputSVG } from \"../utils/customIcons\";\nimport { filterUnique } from \"../utils/utils\";\n\nconst { Dragger } = Upload;\n\n//props.treeData, props.loadTreeData\n\nconst PhylotreeInput = (props) => {\n  const [isLoading, setisLoading] = useState(false);\n\n  //functions\n  async function parseTree(fileURL) {\n    let tree_promise = await text(fileURL).then(function(result) {\n      return result;\n    });\n    // Do validation here\n    let tree_is_valid = false;\n    let phylotree;\n    try {\n      phylotree = newickParse(tree_promise); //err stop here\n    } catch (e) {\n      setisLoading(false);\n    }\n\n    //alert and stop when invalid, send tree to store when valid\n    if (phylotree) {\n      let phylotreeData = hierarchy(phylotree, (d) => d.branchset).sum((d) =>\n        d.branchset ? 0 : 1\n      );\n      let clusterLayout = cluster().size([100, 100]);\n      let treeLayout = clusterLayout(phylotreeData);\n      let tree_leaves = treeLayout.leaves().map((d) => d.data.name);\n      let tree_leaves_unique = tree_leaves.filter(filterUnique);\n      if (tree_leaves.length === tree_leaves_unique.length) {\n        tree_is_valid = true;\n      } else {\n        alert(\"Invalid tree: duplicated leaf labels are detected\");\n        setisLoading(false);\n        return;\n      }\n    }\n    if (tree_is_valid) {\n      props.loadTreeData(tree_promise);\n    } else {\n      alert(\"Invalid tree\");\n      setisLoading(false);\n      return;\n    }\n  }\n  const beforeUploadHandler = (file) => {\n    setisLoading(true);\n    if (file) {\n      const reader = new FileReader();\n      reader.readAsDataURL(file);\n      reader.onloadend = function(evt) {\n        const dataUrl = evt.target.result;\n        parseTree(dataUrl);\n      };\n    }\n  };\n\n  useEffect(() => {\n    if (props.treeData) {\n      setisLoading(false);\n    }\n  }, [props.treeData]);\n\n  return (\n    <React.Fragment>\n      <Card\n        title={\"Phylogenetic tree\"}\n        style={{ height: \"100%\" }}\n        headStyle={{ textAlign: \"left\" }}\n        bodyStyle={{ margin: \"0px\", padding: \"5px\" }}\n      >\n        {!props.isolateData && (\n          <Empty\n            image={Empty.PRESENTED_IMAGE_SIMPLE}\n            description={\"Please load the metadata first\"}\n          />\n        )}\n        {props.isolateData && !isLoading && !props.treeData && (\n          <React.Fragment>\n            <Dragger\n              accept={\".nwk, .tre, .tree\"}\n              style={{ padding: \"10px\" }}\n              name=\"file\"\n              multiple={false}\n              action=\"dummy-post\"\n              beforeUpload={beforeUploadHandler}\n            >\n              <h1>\n                <PhylotreeInputSVG />\n              </h1>\n            </Dragger>\n          </React.Fragment>\n        )}\n        {props.isolateData && isLoading && !props.treeData && <Spin />}\n        {props.isolateData && !isLoading && props.treeData && (\n          <React.Fragment>\n            <div style={{ padding: \"10px\" }}>\n              <CheckCircleTwoTone\n                twoToneColor=\"#52c41a\"\n                style={{ fontSize: \"20pt\" }}\n              />\n              <p>Loaded!</p>\n            </div>\n          </React.Fragment>\n        )}\n      </Card>\n    </React.Fragment>\n  );\n};\nexport default PhylotreeInput;\n"]},"metadata":{},"sourceType":"module"}