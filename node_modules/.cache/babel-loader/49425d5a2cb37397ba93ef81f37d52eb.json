{"ast":null,"code":"var $ = require('../internals/export');\n\nvar getBuiltIn = require('../internals/get-built-in');\n\nvar fails = require('../internals/fails');\n\nvar $stringify = getBuiltIn('JSON', 'stringify');\nvar re = /[\\uD800-\\uDFFF]/g;\nvar low = /^[\\uD800-\\uDBFF]$/;\nvar hi = /^[\\uDC00-\\uDFFF]$/;\n\nvar fix = function fix(match, offset, string) {\n  var prev = string.charAt(offset - 1);\n  var next = string.charAt(offset + 1);\n\n  if (low.test(match) && !hi.test(next) || hi.test(match) && !low.test(prev)) {\n    return \"\\\\u\" + match.charCodeAt(0).toString(16);\n  }\n\n  return match;\n};\n\nvar FORCED = fails(function () {\n  return $stringify(\"\\uDF06\\uD834\") !== \"\\\"\\\\udf06\\\\ud834\\\"\" || $stringify(\"\\uDEAD\") !== \"\\\"\\\\udead\\\"\";\n});\n\nif ($stringify) {\n  // https://github.com/tc39/proposal-well-formed-stringify\n  $({\n    target: 'JSON',\n    stat: true,\n    forced: FORCED\n  }, {\n    // eslint-disable-next-line no-unused-vars\n    stringify: function stringify(it, replacer, space) {\n      var result = $stringify.apply(null, arguments);\n      return typeof result == 'string' ? result.replace(re, fix) : result;\n    }\n  });\n}","map":null,"metadata":{},"sourceType":"script"}