{"ast":null,"code":"import { NEW_NODE_SIZE_MAP, NEW_TEXT_SIZE_MAP, NEW_TEXT_OFFSET_MAP, NEW_RESIZE_SIGNAL_MAP, NEW_LAYOUT_MAP, NEW_IS_LOC_TEXT_SHOWN_MAP } from \"../utils/constants\";\nimport { initialState } from \"../reducers\";\n\nvar localmapSettingsReducer = function localmapSettingsReducer(prevState, action) {\n  switch (action.type) {\n    case NEW_NODE_SIZE_MAP:\n      var newState_nodeSize = Object.assign({}, prevState);\n\n      if (action.payload && action.payload !== prevState.nodeSize) {\n        newState_nodeSize.nodeSize = action.payload;\n      }\n\n      return newState_nodeSize;\n    // if no change return same state with before\n\n    case NEW_TEXT_SIZE_MAP:\n      var newState_textSize = Object.assign({}, prevState);\n\n      if (action.payload && action.payload !== prevState.textSize) {\n        newState_textSize.textSize = action.payload;\n      }\n\n      return newState_textSize;\n\n    case NEW_TEXT_OFFSET_MAP:\n      var newState_textOffset = Object.assign({}, prevState);\n\n      if (action.payload && action.payload !== prevState.textOffset) {\n        newState_textOffset.textOffset = action.payload;\n      }\n\n      return newState_textOffset;\n\n    case NEW_RESIZE_SIGNAL_MAP:\n      var newState_resizeSignal = Object.assign({}, prevState);\n\n      if (action.payload !== prevState.isUserStartResize) {\n        newState_resizeSignal.isUserStartResize = action.payload;\n      }\n\n      return newState_resizeSignal;\n\n    case NEW_LAYOUT_MAP:\n      var newState_layout = Object.assign({}, prevState);\n\n      if (action.payload && action.payload !== prevState.layout) {\n        newState_layout.layout = action.payload;\n      }\n\n      return newState_layout;\n\n    case NEW_IS_LOC_TEXT_SHOWN_MAP:\n      var newState_isLocTextShown = Object.assign({}, prevState);\n\n      if (action.payload !== prevState.isLocTextShown) {\n        newState_isLocTextShown.isLocTextShown = action.payload;\n      }\n\n      return newState_isLocTextShown;\n\n    default:\n      if (prevState) {\n        return prevState;\n      } else {\n        return initialState.localmapSettings;\n      }\n\n  }\n};\n\nexport default localmapSettingsReducer;","map":{"version":3,"sources":["/Volumes/DATA/BUDI/APP_DEV/haiviz-v04/src/reducers/reducer-localmapSettings.js"],"names":["NEW_NODE_SIZE_MAP","NEW_TEXT_SIZE_MAP","NEW_TEXT_OFFSET_MAP","NEW_RESIZE_SIGNAL_MAP","NEW_LAYOUT_MAP","NEW_IS_LOC_TEXT_SHOWN_MAP","initialState","localmapSettingsReducer","prevState","action","type","newState_nodeSize","Object","assign","payload","nodeSize","newState_textSize","textSize","newState_textOffset","textOffset","newState_resizeSignal","isUserStartResize","newState_layout","layout","newState_isLocTextShown","isLocTextShown","localmapSettings"],"mappings":"AAAA,SACEA,iBADF,EAEEC,iBAFF,EAGEC,mBAHF,EAIEC,qBAJF,EAKEC,cALF,EAMEC,yBANF,QAOO,oBAPP;AAQA,SAASC,YAAT,QAA6B,aAA7B;;AAEA,IAAMC,uBAAuB,GAAG,SAA1BA,uBAA0B,CAACC,SAAD,EAAYC,MAAZ,EAAuB;AACrD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKV,iBAAL;AACE,UAAIW,iBAAiB,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBL,SAAlB,CAAxB;;AACA,UAAIC,MAAM,CAACK,OAAP,IAAkBL,MAAM,CAACK,OAAP,KAAmBN,SAAS,CAACO,QAAnD,EAA6D;AAC3DJ,QAAAA,iBAAiB,CAACI,QAAlB,GAA6BN,MAAM,CAACK,OAApC;AACD;;AACD,aAAOH,iBAAP;AAA0B;;AAE5B,SAAKV,iBAAL;AACE,UAAIe,iBAAiB,GAAGJ,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBL,SAAlB,CAAxB;;AACA,UAAIC,MAAM,CAACK,OAAP,IAAkBL,MAAM,CAACK,OAAP,KAAmBN,SAAS,CAACS,QAAnD,EAA6D;AAC3DD,QAAAA,iBAAiB,CAACC,QAAlB,GAA6BR,MAAM,CAACK,OAApC;AACD;;AACD,aAAOE,iBAAP;;AAEF,SAAKd,mBAAL;AACE,UAAIgB,mBAAmB,GAAGN,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBL,SAAlB,CAA1B;;AACA,UAAIC,MAAM,CAACK,OAAP,IAAkBL,MAAM,CAACK,OAAP,KAAmBN,SAAS,CAACW,UAAnD,EAA+D;AAC7DD,QAAAA,mBAAmB,CAACC,UAApB,GAAiCV,MAAM,CAACK,OAAxC;AACD;;AACD,aAAOI,mBAAP;;AAEF,SAAKf,qBAAL;AACE,UAAIiB,qBAAqB,GAAGR,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBL,SAAlB,CAA5B;;AACA,UAAIC,MAAM,CAACK,OAAP,KAAmBN,SAAS,CAACa,iBAAjC,EAAoD;AAClDD,QAAAA,qBAAqB,CAACC,iBAAtB,GAA0CZ,MAAM,CAACK,OAAjD;AACD;;AACD,aAAOM,qBAAP;;AAEF,SAAKhB,cAAL;AACE,UAAIkB,eAAe,GAAGV,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBL,SAAlB,CAAtB;;AACA,UAAIC,MAAM,CAACK,OAAP,IAAkBL,MAAM,CAACK,OAAP,KAAmBN,SAAS,CAACe,MAAnD,EAA2D;AACzDD,QAAAA,eAAe,CAACC,MAAhB,GAAyBd,MAAM,CAACK,OAAhC;AACD;;AACD,aAAOQ,eAAP;;AAEF,SAAKjB,yBAAL;AACE,UAAImB,uBAAuB,GAAGZ,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBL,SAAlB,CAA9B;;AACA,UAAIC,MAAM,CAACK,OAAP,KAAmBN,SAAS,CAACiB,cAAjC,EAAiD;AAC/CD,QAAAA,uBAAuB,CAACC,cAAxB,GAAyChB,MAAM,CAACK,OAAhD;AACD;;AACD,aAAOU,uBAAP;;AAEF;AACE,UAAIhB,SAAJ,EAAe;AACb,eAAOA,SAAP;AACD,OAFD,MAEO;AACL,eAAOF,YAAY,CAACoB,gBAApB;AACD;;AAhDL;AAkDD,CAnDD;;AAqDA,eAAenB,uBAAf","sourcesContent":["import {\n  NEW_NODE_SIZE_MAP,\n  NEW_TEXT_SIZE_MAP,\n  NEW_TEXT_OFFSET_MAP,\n  NEW_RESIZE_SIGNAL_MAP,\n  NEW_LAYOUT_MAP,\n  NEW_IS_LOC_TEXT_SHOWN_MAP\n} from \"../utils/constants\";\nimport { initialState } from \"../reducers\";\n\nconst localmapSettingsReducer = (prevState, action) => {\n  switch (action.type) {\n    case NEW_NODE_SIZE_MAP:\n      let newState_nodeSize = Object.assign({}, prevState);\n      if (action.payload && action.payload !== prevState.nodeSize) {\n        newState_nodeSize.nodeSize = action.payload;\n      }\n      return newState_nodeSize; // if no change return same state with before\n\n    case NEW_TEXT_SIZE_MAP:\n      let newState_textSize = Object.assign({}, prevState);\n      if (action.payload && action.payload !== prevState.textSize) {\n        newState_textSize.textSize = action.payload;\n      }\n      return newState_textSize;\n\n    case NEW_TEXT_OFFSET_MAP:\n      let newState_textOffset = Object.assign({}, prevState);\n      if (action.payload && action.payload !== prevState.textOffset) {\n        newState_textOffset.textOffset = action.payload;\n      }\n      return newState_textOffset;\n\n    case NEW_RESIZE_SIGNAL_MAP:\n      let newState_resizeSignal = Object.assign({}, prevState);\n      if (action.payload !== prevState.isUserStartResize) {\n        newState_resizeSignal.isUserStartResize = action.payload;\n      }\n      return newState_resizeSignal;\n\n    case NEW_LAYOUT_MAP:\n      let newState_layout = Object.assign({}, prevState);\n      if (action.payload && action.payload !== prevState.layout) {\n        newState_layout.layout = action.payload;\n      }\n      return newState_layout;\n\n    case NEW_IS_LOC_TEXT_SHOWN_MAP:\n      let newState_isLocTextShown = Object.assign({}, prevState);\n      if (action.payload !== prevState.isLocTextShown) {\n        newState_isLocTextShown.isLocTextShown = action.payload;\n      }\n      return newState_isLocTextShown;\n\n    default:\n      if (prevState) {\n        return prevState;\n      } else {\n        return initialState.localmapSettings;\n      }\n  }\n};\n\nexport default localmapSettingsReducer;\n"]},"metadata":{},"sourceType":"module"}