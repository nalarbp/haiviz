{"ast":null,"code":"import * as constant from \"../utils/constants\";\nimport { initialState } from \"../reducers\";\n\nvar phylotreeSettingsReducer = function phylotreeSettingsReducer(prevState, action) {\n  switch (action.type) {\n    //RESIZE SIGNAL\n    case constant.RESIZE_SIGNAL_TREE:\n      var newState_resizeSignal = Object.assign({}, prevState);\n\n      if (action.payload !== prevState.isUserStartResize) {\n        newState_resizeSignal.isUserStartResize = action.payload;\n      }\n\n      return newState_resizeSignal;\n    //LAYOUT\n\n    case constant.LAYOUT_TREE:\n      var newState_layout = Object.assign({}, prevState);\n\n      if (action.payload && action.payload !== prevState.layout) {\n        newState_layout.layout = action.payload;\n      }\n\n      return newState_layout;\n    //NODE\n\n    case constant.IS_NODE_ALIGNED:\n      var newState_isTaxaAligned = Object.assign({}, prevState);\n\n      if (action.payload !== prevState.isTaxaAligned) {\n        newState_isTaxaAligned.isTaxaAligned = action.payload;\n      }\n\n      return newState_isTaxaAligned;\n\n    case constant.IS_DOWNLOADING_TREE:\n      var newState_isDownloading = Object.assign({}, prevState);\n\n      if (action.payload !== prevState.isDownloading) {\n        newState_isDownloading.isDownloading = action.payload;\n      }\n\n      return newState_isDownloading;\n\n    case constant.NODE_SIZE_TREE:\n      var newState_nodeSize = Object.assign({}, prevState);\n\n      if (action.payload && action.payload !== prevState.nodeSize) {\n        newState_nodeSize.nodeSize = action.payload;\n      }\n\n      return newState_nodeSize;\n    // if no change return same state with before\n\n    case constant.NODE_LABEL_SIZE_TREE:\n      var newState_textSize = Object.assign({}, prevState);\n\n      if (action.payload && action.payload !== prevState.textSize) {\n        newState_textSize.textSize = action.payload;\n      }\n\n      return newState_textSize;\n\n    case constant.NODE_LABEL_OFFSET_TREE:\n      var newState_textOffset = Object.assign({}, prevState);\n\n      if (action.payload && action.payload !== prevState.textOffset) {\n        newState_textOffset.textOffset = action.payload;\n      }\n\n      return newState_textOffset;\n    //SCALE\n\n    case constant.IS_SCALE_SHOWN_TREE:\n      var newState_isScaleShown = Object.assign({}, prevState);\n\n      if (action.payload !== prevState.isScaleShown) {\n        newState_isScaleShown.isScaleShown = action.payload;\n      }\n\n      return newState_isScaleShown;\n\n    case constant.SCALE_FACTOR_TREE:\n      var newState_scaleFactor = Object.assign({}, prevState);\n\n      if (action.payload && action.payload !== prevState.scaleFactor) {\n        newState_scaleFactor.scaleFactor = action.payload;\n      }\n\n      return newState_scaleFactor;\n\n    case constant.SCALE_CUSTOM_VALUE_TREE:\n      var newState_scaleCustomValue = Object.assign({}, prevState);\n\n      if (action.payload && action.payload !== prevState.customScale) {\n        newState_scaleCustomValue.customScale = action.payload;\n      }\n\n      return newState_scaleCustomValue;\n\n    default:\n      if (prevState) {\n        return prevState;\n      } else {\n        return initialState.phylotreeSettings;\n      }\n\n  }\n};\n\nexport default phylotreeSettingsReducer;","map":{"version":3,"sources":["/Volumes/DATA/BUDI/APP_DEV/haiviz-v04/src/reducers/reducer-phylotreeSettings.js"],"names":["constant","initialState","phylotreeSettingsReducer","prevState","action","type","RESIZE_SIGNAL_TREE","newState_resizeSignal","Object","assign","payload","isUserStartResize","LAYOUT_TREE","newState_layout","layout","IS_NODE_ALIGNED","newState_isTaxaAligned","isTaxaAligned","IS_DOWNLOADING_TREE","newState_isDownloading","isDownloading","NODE_SIZE_TREE","newState_nodeSize","nodeSize","NODE_LABEL_SIZE_TREE","newState_textSize","textSize","NODE_LABEL_OFFSET_TREE","newState_textOffset","textOffset","IS_SCALE_SHOWN_TREE","newState_isScaleShown","isScaleShown","SCALE_FACTOR_TREE","newState_scaleFactor","scaleFactor","SCALE_CUSTOM_VALUE_TREE","newState_scaleCustomValue","customScale","phylotreeSettings"],"mappings":"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","sourcesContent":["import * as constant from \"../utils/constants\";\nimport { initialState } from \"../reducers\";\n\nconst phylotreeSettingsReducer = (prevState, action) => {\n  switch (action.type) {\n    //RESIZE SIGNAL\n    case constant.RESIZE_SIGNAL_TREE:\n      let newState_resizeSignal = Object.assign({}, prevState);\n      if (action.payload !== prevState.isUserStartResize) {\n        newState_resizeSignal.isUserStartResize = action.payload;\n      }\n      return newState_resizeSignal;\n\n    //LAYOUT\n    case constant.LAYOUT_TREE:\n      let newState_layout = Object.assign({}, prevState);\n      if (action.payload && action.payload !== prevState.layout) {\n        newState_layout.layout = action.payload;\n      }\n      return newState_layout;\n\n    //NODE\n    case constant.IS_NODE_ALIGNED:\n      let newState_isTaxaAligned = Object.assign({}, prevState);\n      if (action.payload !== prevState.isTaxaAligned) {\n        newState_isTaxaAligned.isTaxaAligned = action.payload;\n      }\n      return newState_isTaxaAligned;\n\n    case constant.IS_DOWNLOADING_TREE:\n      let newState_isDownloading = Object.assign({}, prevState);\n      if (action.payload !== prevState.isDownloading) {\n        newState_isDownloading.isDownloading = action.payload;\n      }\n      return newState_isDownloading;\n\n    case constant.NODE_SIZE_TREE:\n      let newState_nodeSize = Object.assign({}, prevState);\n      if (action.payload && action.payload !== prevState.nodeSize) {\n        newState_nodeSize.nodeSize = action.payload;\n      }\n      return newState_nodeSize; // if no change return same state with before\n\n    case constant.NODE_LABEL_SIZE_TREE:\n      let newState_textSize = Object.assign({}, prevState);\n      if (action.payload && action.payload !== prevState.textSize) {\n        newState_textSize.textSize = action.payload;\n      }\n      return newState_textSize;\n\n    case constant.NODE_LABEL_OFFSET_TREE:\n      let newState_textOffset = Object.assign({}, prevState);\n      if (action.payload && action.payload !== prevState.textOffset) {\n        newState_textOffset.textOffset = action.payload;\n      }\n      return newState_textOffset;\n\n    //SCALE\n    case constant.IS_SCALE_SHOWN_TREE:\n      let newState_isScaleShown = Object.assign({}, prevState);\n      if (action.payload !== prevState.isScaleShown) {\n        newState_isScaleShown.isScaleShown = action.payload;\n      }\n      return newState_isScaleShown;\n\n    case constant.SCALE_FACTOR_TREE:\n      let newState_scaleFactor = Object.assign({}, prevState);\n      if (action.payload && action.payload !== prevState.scaleFactor) {\n        newState_scaleFactor.scaleFactor = action.payload;\n      }\n      return newState_scaleFactor;\n\n    case constant.SCALE_CUSTOM_VALUE_TREE:\n      let newState_scaleCustomValue = Object.assign({}, prevState);\n      if (action.payload && action.payload !== prevState.customScale) {\n        newState_scaleCustomValue.customScale = action.payload;\n      }\n      return newState_scaleCustomValue;\n\n    default:\n      if (prevState) {\n        return prevState;\n      } else {\n        return initialState.phylotreeSettings;\n      }\n  }\n};\n\nexport default phylotreeSettingsReducer;\n"]},"metadata":{},"sourceType":"module"}