{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Volumes/DATA/BUDI/APP_DEV/haiviz-v04/src/viz_TransGraph/chart_TransGraph_cytoscape_host.js\";\n\n/* ============================================================================\n============================================================================ */\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { select } from \"d3-selection\";\nimport { removeAllChildFromNode, downloadFileAsText } from \"../utils/utils\";\nimport { Button, Empty, Spin } from \"antd\";\nimport \"./style_TransGraph.css\";\nimport cytoscape from \"cytoscape\";\nimport { ClearOutlined } from \"@ant-design/icons\";\nimport usePrevious from \"../react_hooks/usePrevious-hook\";\n\nvar spread = require(\"cytoscape-spread\");\n\ncytoscape.use(spread); // register extension\n\nvar _ = require(\"lodash\");\n\nvar TransGraph_host = function TransGraph_host(props) {\n  //DRAWING CONSTRUCTOR\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      isDrawCompleted = _useState2[0],\n      setisDrawCompleted = _useState2[1];\n\n  var transmission = _.cloneDeep(props.data);\n\n  var isolateDataCloned = _.cloneDeep(Array.from(props.isolateData.values()));\n\n  var transmissionCytoscapeRef = useRef();\n  var transmissionContainerRef = useRef();\n  var cytoscapeRef = useRef(null);\n  var observedWidth = props.width - 10;\n  var observedHeight = props.height - 80;\n  var prevDimension = usePrevious(observedWidth + observedHeight);\n  var isInitialDraw = prevDimension && prevDimension < 0 ? true : false; //SETTINGS\n\n  var isUserStartResize = props.transgraphSettings.isUserStartResize;\n  var isUserStyleApplied = props.transgraphSettings.isUserStyleApplied;\n  var isLinkLabelShown = props.transgraphSettings.isLinkLabelShown;\n  var isLinkWeightApplied = props.transgraphSettings.isLinkWeightApplied;\n  var layoutKey = props.transgraphSettings.layoutKey;\n  var linkFactor = props.transgraphSettings.linkFactor;\n  var transgraphIsDownloading = props.transgraphSettings.transgraphIsDownloading; //HANDLERS\n\n  var clearSelectedDataHandler = function clearSelectedDataHandler() {\n    props.setSelectedData([]);\n  }; // const boxSelectionHandler = () => {\n  //   if (cytoscapeRef.current) {\n  //     let cy = cytoscapeRef.current;\n  //     let selectedNodes = [];\n  //     cy.nodes().forEach(function(n) {\n  //       console.log(n.selected());\n  //       if (n.active()) {\n  //         selectedNodes.push(n.data(\"label\"));\n  //       }\n  //     });\n  //     //console.log(selectedNodes);\n  //     //props.setSelectedData(selectedNodes);\n  //   }\n  // };\n  //USE-EFFECTS\n  //downloading\n\n\n  useEffect(function () {\n    if (transgraphIsDownloading) {\n      var cy = cytoscapeRef.current;\n      var svgContent = cy.svg({\n        scale: 1,\n        full: true\n      });\n      downloadFileAsText(\"HAIviz-cytoscape-svg.svg\", svgContent);\n      props.changeTransIsDownloading(false);\n    }\n  }, [transgraphIsDownloading]);\n  useEffect(function () {\n    if (isUserStartResize) {\n      select(\"#transgraph-zoomButton-container\").style(\"display\", \"none\");\n      select(\"#transgraph-no-drawing\").style(\"display\", \"block\");\n      removeAllChildFromNode(\"#transmission-cy\");\n    } else {\n      if (isInitialDraw) {\n        draw();\n      } else {\n        if (props.isUserRedraw) {\n          draw();\n        }\n      }\n    }\n  }, [isInitialDraw, isUserStartResize, props.isUserRedraw]); //changing layout\n\n  useEffect(function () {\n    if (cytoscapeRef.current) {\n      var cy = cytoscapeRef.current;\n      var graph_layout = {\n        name: layoutKey,\n        animate: false,\n        fit: true,\n        prelayout: false\n      };\n      cy.layout(graph_layout).run();\n      cytoscapeRef.current = cy;\n    }\n  }, [layoutKey]);\n  useEffect(function () {\n    selectUnselect();\n  }, [props.selectedData]);\n  useEffect(function () {\n    if (isDrawCompleted) {\n      select(\"#transgraph-loading\").style(\"display\", \"none\");\n    } else {\n      select(\"#transgraph-loading\").style(\"display\", \"block\");\n    }\n  }, [isDrawCompleted]);\n  useEffect(function () {\n    if (cytoscapeRef.current) {\n      var cy = cytoscapeRef.current;\n      cy.style().selector(\"edge\").style({\n        \"line-style\": function lineStyle(d) {\n          return isUserStyleApplied ? d.data(\"style\") : \"solid\";\n        },\n        \"line-color\": function lineColor(d) {\n          return isUserStyleApplied ? d.data(\"color\") : \"black\";\n        },\n        \"target-arrow-color\": function targetArrowColor(d) {\n          return isUserStyleApplied ? d.data(\"color\") : \"black\";\n        }\n      }).update();\n      cytoscapeRef.current = cy;\n    }\n  }, [isUserStyleApplied]);\n  useEffect(function () {\n    if (cytoscapeRef.current) {\n      var cy = cytoscapeRef.current;\n\n      if (isLinkLabelShown) {\n        cy.style().selector(\"edge\").style({\n          \"text-background-opacity\": 1,\n          \"text-opacity\": 1\n        }).update();\n        cytoscapeRef.current = cy;\n      } else {\n        cy.style().selector(\"edge\").style({\n          \"text-background-opacity\": 0,\n          \"text-opacity\": 0\n        }).update();\n        cytoscapeRef.current = cy;\n      }\n    }\n  }, [isLinkLabelShown]);\n  useEffect(function () {\n    if (cytoscapeRef.current) {\n      var cy = cytoscapeRef.current;\n\n      if (isLinkWeightApplied) {\n        cy.style().selector(\"edge\").style({\n          width: function width(e) {\n            return getEdgeArrowWidth(isLinkWeightApplied, e.data(\"weight\"), linkFactor, \"edge\");\n          },\n          \"arrow-scale\": function arrowScale(e) {\n            return getEdgeArrowWidth(isLinkWeightApplied, e.data(\"weight\"), linkFactor, \"arrow\");\n          }\n        }).update();\n        cytoscapeRef.current = cy;\n      } else {\n        cy.style().selector(\"edge\").style({\n          width: 3,\n          \"arrow-scale\": 1\n        }).update();\n        cytoscapeRef.current = cy;\n      }\n    }\n  }, [isLinkWeightApplied, linkFactor]); //Util\n\n  var getEdgeArrowWidth = function getEdgeArrowWidth(isEdgeWeightApplied, edgeWeight, weightFactor, option) {\n    if (isEdgeWeightApplied) {\n      var width = edgeWeight ? edgeWeight * weightFactor : 3;\n\n      if (option === \"edge\") {\n        return width;\n      } else {\n        var arrow_w = width < 1 ? width : 1;\n        return arrow_w;\n      }\n    } else {\n      if (option === \"edge\") {\n        return 3;\n      } else {\n        return 1;\n      }\n    }\n  }; //DRAW\n\n\n  function draw() {\n    //clean previous drawing artifacts\n    select(\"#transgraph-no-drawing\").style(\"display\", \"none\");\n    select(\"#transgraph-zoomButton-container\").style(\"display\", \"block\");\n    var graph_layout = {\n      name: \"cose\",\n      animate: false,\n      fit: true\n    };\n    var cy = cytoscape({\n      elements: transmission,\n      container: document.getElementById(\"transmission-cy\"),\n      pannable: true,\n      selected: true,\n      boxSelectionEnabled: false,\n      style: [{\n        selector: \"node\",\n        style: {\n          label: \"data(label)\",\n          \"border-width\": 3,\n          \"border-style\": \"solid\",\n          \"border-color\": \"black\",\n          \"background-color\": \"lightgray\"\n        }\n      }, {\n        selector: \"edge\",\n        style: {\n          label: \"data(weight)\",\n          \"font-size\": \"8px\",\n          \"text-background-color\": \"#F5E372\",\n          \"text-background-opacity\": 0,\n          \"text-opacity\": 0,\n          color: \"black\",\n          width: function width(e) {\n            return getEdgeArrowWidth(isLinkWeightApplied, e.data(\"weight\"), linkFactor, \"edge\");\n          },\n          \"line-style\": function lineStyle(d) {\n            return isUserStyleApplied ? d.data(\"style\") : \"solid\";\n          },\n          \"line-color\": function lineColor(d) {\n            return isUserStyleApplied ? d.data(\"color\") : \"black\";\n          },\n          \"target-arrow-color\": function targetArrowColor(d) {\n            return isUserStyleApplied ? d.data(\"color\") : \"black\";\n          },\n          \"target-arrow-shape\": function targetArrowShape(e) {\n            var arrowShape = e.data(\"dir\") === \"forward\" ? \"triangle\" : \"none\";\n            return arrowShape;\n          },\n          \"arrow-scale\": function arrowScale(e) {\n            return getEdgeArrowWidth(isLinkWeightApplied, e.data(\"weight\"), linkFactor, \"arrow\");\n          },\n          \"curve-style\": \"bezier\"\n        }\n      }, {\n        selector: \":selected\",\n        style: {\n          \"border-width\": \"5\",\n          \"border-color\": \"red\",\n          \"border-style\": \"dashed\",\n          padding: \"8px\"\n        }\n      }]\n    });\n    cy.selectionType(\"single\");\n    cy.layout(graph_layout).run(); //node event click listener\n\n    cy.nodes().bind(\"click\", function (evt) {\n      var clickedNode = evt.target.data(\"label\"); // get isolate object by source name\n\n      var clickedIsolates = [];\n      isolateDataCloned.forEach(function (d) {\n        if (d.isolate_sourceName === clickedNode) {\n          clickedIsolates.push(d.isolate_name);\n        }\n      });\n      props.setSelectedData(clickedIsolates);\n    }); //click on background listener\n\n    cy.on(\"click\", function (evt) {\n      if (evt.target === cy) {\n        props.setSelectedData([]);\n      }\n    }); // cy.on(\"box\", function(evt) {\n    //   props.setSelectedData([evt.target.data(\"label\")]);\n    // });\n    //save current Ref\n\n    cytoscapeRef.current = cy;\n    setisDrawCompleted(true);\n  } //SELECT & UNSELECT\n\n\n  function selectUnselect() {\n    if (cytoscapeRef.current) {\n      var cy = cytoscapeRef.current;\n\n      if (props.selectedData && props.selectedData.length > 0) {\n        //convert selectedData into list of host\n        var hostList = [];\n        props.selectedData.forEach(function (d) {\n          var clickedObj = props.isolateData.get(d);\n          hostList.push(clickedObj.isolate_sourceName);\n        });\n        cy.nodes().forEach(function (n) {\n          var node = n.data(\"label\");\n          var isNodeInSelectedData = hostList.indexOf(node) === -1 ? false : true;\n\n          if (isNodeInSelectedData) {\n            n.select();\n          } else {\n            n.unselect();\n          }\n        });\n        cy.style().update();\n        cytoscapeRef.current = cy;\n      } else if (props.selectedData && props.selectedData.length === 0) {\n        cy.nodes().unselect();\n        cy.style().update();\n        cytoscapeRef.current = cy;\n      }\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 351,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"transmissionContainer\",\n    ref: transmissionContainerRef,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 352,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"transgraph-loading\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 353,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Spin, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 354,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"transgraph-no-drawing\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 356,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Empty, {\n    description: \"No chart: please click redraw button\",\n    image: Empty.PRESENTED_IMAGE_SIMPLE,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 357,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"transgraph-zoomButton-container\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 362,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    title: \"Clear selection\",\n    shape: \"circle\",\n    id: \"transgraph-clearSelection\",\n    size: \"medium\",\n    icon: /*#__PURE__*/React.createElement(ClearOutlined, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 368,\n        columnNumber: 19\n      }\n    }),\n    onClick: clearSelectedDataHandler,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 363,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"transmission-cy\",\n    style: {\n      width: props.width - 10,\n      height: props.height - 80\n    },\n    ref: transmissionCytoscapeRef,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 372,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default TransGraph_host;","map":{"version":3,"sources":["/Volumes/DATA/BUDI/APP_DEV/haiviz-v04/src/viz_TransGraph/chart_TransGraph_cytoscape_host.js"],"names":["React","useEffect","useRef","useState","select","removeAllChildFromNode","downloadFileAsText","Button","Empty","Spin","cytoscape","ClearOutlined","usePrevious","spread","require","use","_","TransGraph_host","props","isDrawCompleted","setisDrawCompleted","transmission","cloneDeep","data","isolateDataCloned","Array","from","isolateData","values","transmissionCytoscapeRef","transmissionContainerRef","cytoscapeRef","observedWidth","width","observedHeight","height","prevDimension","isInitialDraw","isUserStartResize","transgraphSettings","isUserStyleApplied","isLinkLabelShown","isLinkWeightApplied","layoutKey","linkFactor","transgraphIsDownloading","clearSelectedDataHandler","setSelectedData","cy","current","svgContent","svg","scale","full","changeTransIsDownloading","style","draw","isUserRedraw","graph_layout","name","animate","fit","prelayout","layout","run","selectUnselect","selectedData","selector","d","update","e","getEdgeArrowWidth","isEdgeWeightApplied","edgeWeight","weightFactor","option","arrow_w","elements","container","document","getElementById","pannable","selected","boxSelectionEnabled","label","color","arrowShape","padding","selectionType","nodes","bind","evt","clickedNode","target","clickedIsolates","forEach","isolate_sourceName","push","isolate_name","on","length","hostList","clickedObj","get","n","node","isNodeInSelectedData","indexOf","unselect","PRESENTED_IMAGE_SIMPLE"],"mappings":"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","sourcesContent":["/* ============================================================================\n============================================================================ */\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { select } from \"d3-selection\";\nimport { removeAllChildFromNode, downloadFileAsText } from \"../utils/utils\";\nimport { Button, Empty, Spin } from \"antd\";\nimport \"./style_TransGraph.css\";\nimport cytoscape from \"cytoscape\";\nimport { ClearOutlined } from \"@ant-design/icons\";\nimport usePrevious from \"../react_hooks/usePrevious-hook\";\n\nconst spread = require(\"cytoscape-spread\");\ncytoscape.use(spread); // register extension\n\nconst _ = require(\"lodash\");\n\nconst TransGraph_host = (props) => {\n  //DRAWING CONSTRUCTOR\n  const [isDrawCompleted, setisDrawCompleted] = useState(null);\n  const transmission = _.cloneDeep(props.data);\n  const isolateDataCloned = _.cloneDeep(Array.from(props.isolateData.values()));\n  const transmissionCytoscapeRef = useRef();\n  const transmissionContainerRef = useRef();\n  const cytoscapeRef = useRef(null);\n  const observedWidth = props.width - 10;\n  const observedHeight = props.height - 80;\n  const prevDimension = usePrevious(observedWidth + observedHeight);\n  const isInitialDraw = prevDimension && prevDimension < 0 ? true : false;\n\n  //SETTINGS\n  const isUserStartResize = props.transgraphSettings.isUserStartResize;\n  const isUserStyleApplied = props.transgraphSettings.isUserStyleApplied;\n  const isLinkLabelShown = props.transgraphSettings.isLinkLabelShown;\n  const isLinkWeightApplied = props.transgraphSettings.isLinkWeightApplied;\n  const layoutKey = props.transgraphSettings.layoutKey;\n  const linkFactor = props.transgraphSettings.linkFactor;\n  const transgraphIsDownloading =\n    props.transgraphSettings.transgraphIsDownloading;\n\n  //HANDLERS\n  const clearSelectedDataHandler = () => {\n    props.setSelectedData([]);\n  };\n  // const boxSelectionHandler = () => {\n  //   if (cytoscapeRef.current) {\n  //     let cy = cytoscapeRef.current;\n\n  //     let selectedNodes = [];\n  //     cy.nodes().forEach(function(n) {\n  //       console.log(n.selected());\n  //       if (n.active()) {\n  //         selectedNodes.push(n.data(\"label\"));\n  //       }\n  //     });\n  //     //console.log(selectedNodes);\n  //     //props.setSelectedData(selectedNodes);\n  //   }\n  // };\n\n  //USE-EFFECTS\n  //downloading\n  useEffect(() => {\n    if (transgraphIsDownloading) {\n      let cy = cytoscapeRef.current;\n      let svgContent = cy.svg({ scale: 1, full: true });\n      downloadFileAsText(\"HAIviz-cytoscape-svg.svg\", svgContent);\n      props.changeTransIsDownloading(false);\n    }\n  }, [transgraphIsDownloading]);\n  useEffect(() => {\n    if (isUserStartResize) {\n      select(\"#transgraph-zoomButton-container\").style(\"display\", \"none\");\n      select(\"#transgraph-no-drawing\").style(\"display\", \"block\");\n      removeAllChildFromNode(\"#transmission-cy\");\n    } else {\n      if (isInitialDraw) {\n        draw();\n      } else {\n        if (props.isUserRedraw) {\n          draw();\n        }\n      }\n    }\n  }, [isInitialDraw, isUserStartResize, props.isUserRedraw]);\n\n  //changing layout\n  useEffect(() => {\n    if (cytoscapeRef.current) {\n      let cy = cytoscapeRef.current;\n      let graph_layout = {\n        name: layoutKey,\n        animate: false,\n        fit: true,\n        prelayout: false,\n      };\n      cy.layout(graph_layout).run();\n      cytoscapeRef.current = cy;\n    }\n  }, [layoutKey]);\n\n  useEffect(() => {\n    selectUnselect();\n  }, [props.selectedData]);\n\n  useEffect(() => {\n    if (isDrawCompleted) {\n      select(\"#transgraph-loading\").style(\"display\", \"none\");\n    } else {\n      select(\"#transgraph-loading\").style(\"display\", \"block\");\n    }\n  }, [isDrawCompleted]);\n\n  useEffect(() => {\n    if (cytoscapeRef.current) {\n      let cy = cytoscapeRef.current;\n      cy.style()\n        .selector(\"edge\")\n        .style({\n          \"line-style\": (d) => (isUserStyleApplied ? d.data(\"style\") : \"solid\"),\n          \"line-color\": (d) => (isUserStyleApplied ? d.data(\"color\") : \"black\"),\n          \"target-arrow-color\": (d) =>\n            isUserStyleApplied ? d.data(\"color\") : \"black\",\n        })\n        .update();\n      cytoscapeRef.current = cy;\n    }\n  }, [isUserStyleApplied]);\n\n  useEffect(() => {\n    if (cytoscapeRef.current) {\n      let cy = cytoscapeRef.current;\n      if (isLinkLabelShown) {\n        cy.style()\n          .selector(\"edge\")\n          .style({\n            \"text-background-opacity\": 1,\n            \"text-opacity\": 1,\n          })\n          .update();\n        cytoscapeRef.current = cy;\n      } else {\n        cy.style()\n          .selector(\"edge\")\n          .style({\n            \"text-background-opacity\": 0,\n            \"text-opacity\": 0,\n          })\n          .update();\n        cytoscapeRef.current = cy;\n      }\n    }\n  }, [isLinkLabelShown]);\n  useEffect(() => {\n    if (cytoscapeRef.current) {\n      let cy = cytoscapeRef.current;\n      if (isLinkWeightApplied) {\n        cy.style()\n          .selector(\"edge\")\n          .style({\n            width: function(e) {\n              return getEdgeArrowWidth(\n                isLinkWeightApplied,\n                e.data(\"weight\"),\n                linkFactor,\n                \"edge\"\n              );\n            },\n            \"arrow-scale\": function(e) {\n              return getEdgeArrowWidth(\n                isLinkWeightApplied,\n                e.data(\"weight\"),\n                linkFactor,\n                \"arrow\"\n              );\n            },\n          })\n          .update();\n        cytoscapeRef.current = cy;\n      } else {\n        cy.style()\n          .selector(\"edge\")\n          .style({\n            width: 3,\n            \"arrow-scale\": 1,\n          })\n          .update();\n        cytoscapeRef.current = cy;\n      }\n    }\n  }, [isLinkWeightApplied, linkFactor]);\n\n  //Util\n  const getEdgeArrowWidth = function(\n    isEdgeWeightApplied,\n    edgeWeight,\n    weightFactor,\n    option\n  ) {\n    if (isEdgeWeightApplied) {\n      let width = edgeWeight ? edgeWeight * weightFactor : 3;\n      if (option === \"edge\") {\n        return width;\n      } else {\n        let arrow_w = width < 1 ? width : 1;\n        return arrow_w;\n      }\n    } else {\n      if (option === \"edge\") {\n        return 3;\n      } else {\n        return 1;\n      }\n    }\n  };\n\n  //DRAW\n  function draw() {\n    //clean previous drawing artifacts\n    select(\"#transgraph-no-drawing\").style(\"display\", \"none\");\n    select(\"#transgraph-zoomButton-container\").style(\"display\", \"block\");\n    const graph_layout = { name: \"cose\", animate: false, fit: true };\n\n    const cy = cytoscape({\n      elements: transmission,\n      container: document.getElementById(\"transmission-cy\"),\n      pannable: true,\n      selected: true,\n      boxSelectionEnabled: false,\n      style: [\n        {\n          selector: \"node\",\n          style: {\n            label: \"data(label)\",\n            \"border-width\": 3,\n            \"border-style\": \"solid\",\n            \"border-color\": \"black\",\n            \"background-color\": \"lightgray\",\n          },\n        },\n        {\n          selector: \"edge\",\n          style: {\n            label: \"data(weight)\",\n            \"font-size\": \"8px\",\n            \"text-background-color\": \"#F5E372\",\n            \"text-background-opacity\": 0,\n            \"text-opacity\": 0,\n            color: \"black\",\n            width: function(e) {\n              return getEdgeArrowWidth(\n                isLinkWeightApplied,\n                e.data(\"weight\"),\n                linkFactor,\n                \"edge\"\n              );\n            },\n            \"line-style\": (d) =>\n              isUserStyleApplied ? d.data(\"style\") : \"solid\",\n            \"line-color\": (d) =>\n              isUserStyleApplied ? d.data(\"color\") : \"black\",\n            \"target-arrow-color\": (d) =>\n              isUserStyleApplied ? d.data(\"color\") : \"black\",\n            \"target-arrow-shape\": function(e) {\n              let arrowShape =\n                e.data(\"dir\") === \"forward\" ? \"triangle\" : \"none\";\n              return arrowShape;\n            },\n            \"arrow-scale\": function(e) {\n              return getEdgeArrowWidth(\n                isLinkWeightApplied,\n                e.data(\"weight\"),\n                linkFactor,\n                \"arrow\"\n              );\n            },\n            \"curve-style\": \"bezier\",\n          },\n        },\n        {\n          selector: \":selected\",\n          style: {\n            \"border-width\": \"5\",\n            \"border-color\": \"red\",\n            \"border-style\": \"dashed\",\n            padding: \"8px\",\n          },\n        },\n      ],\n    });\n    cy.selectionType(\"single\");\n    cy.layout(graph_layout).run();\n\n    //node event click listener\n    cy.nodes().bind(\"click\", function(evt) {\n      let clickedNode = evt.target.data(\"label\");\n      // get isolate object by source name\n      const clickedIsolates = [];\n      isolateDataCloned.forEach(function(d) {\n        if (d.isolate_sourceName === clickedNode) {\n          clickedIsolates.push(d.isolate_name);\n        }\n      });\n      props.setSelectedData(clickedIsolates);\n    });\n    //click on background listener\n    cy.on(\"click\", function(evt) {\n      if (evt.target === cy) {\n        props.setSelectedData([]);\n      }\n    });\n    // cy.on(\"box\", function(evt) {\n    //   props.setSelectedData([evt.target.data(\"label\")]);\n    // });\n\n    //save current Ref\n    cytoscapeRef.current = cy;\n    setisDrawCompleted(true);\n  }\n  //SELECT & UNSELECT\n  function selectUnselect() {\n    if (cytoscapeRef.current) {\n      let cy = cytoscapeRef.current;\n      if (props.selectedData && props.selectedData.length > 0) {\n        //convert selectedData into list of host\n        const hostList = [];\n        props.selectedData.forEach(function(d) {\n          let clickedObj = props.isolateData.get(d);\n          hostList.push(clickedObj.isolate_sourceName);\n        });\n        cy.nodes().forEach(function(n) {\n          let node = n.data(\"label\");\n          let isNodeInSelectedData =\n            hostList.indexOf(node) === -1 ? false : true;\n          if (isNodeInSelectedData) {\n            n.select();\n          } else {\n            n.unselect();\n          }\n        });\n        cy.style().update();\n        cytoscapeRef.current = cy;\n      } else if (props.selectedData && props.selectedData.length === 0) {\n        cy.nodes().unselect();\n        cy.style().update();\n        cytoscapeRef.current = cy;\n      }\n    }\n  }\n\n  return (\n    <React.Fragment>\n      <div id=\"transmissionContainer\" ref={transmissionContainerRef}>\n        <div id=\"transgraph-loading\">\n          <Spin />\n        </div>\n        <div id=\"transgraph-no-drawing\">\n          <Empty\n            description={\"No chart: please click redraw button\"}\n            image={Empty.PRESENTED_IMAGE_SIMPLE}\n          />\n        </div>\n        <div id=\"transgraph-zoomButton-container\">\n          <Button\n            title={\"Clear selection\"}\n            shape={\"circle\"}\n            id={\"transgraph-clearSelection\"}\n            size={\"medium\"}\n            icon={<ClearOutlined />}\n            onClick={clearSelectedDataHandler}\n          ></Button>\n        </div>\n        <div\n          id=\"transmission-cy\"\n          style={{\n            width: props.width - 10,\n            height: props.height - 80,\n          }}\n          ref={transmissionCytoscapeRef}\n        ></div>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default TransGraph_host;\n"]},"metadata":{},"sourceType":"module"}