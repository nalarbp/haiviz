{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Volumes/DATA/BUDI/APP_DEV/haiviz-v04/src/viz_PhyloTree/chart_PhyloTree_phylocanvas.js\";\n\n/* ============================================================================\nprops.loadTreeData(phylotree);//\n============================================================================ */\nimport React, { useEffect, useRef } from \"react\";\nimport { select } from \"d3-selection\";\nimport \"./style_PhyloTree.css\";\nimport { Empty, Button } from \"antd\";\nimport { ClearOutlined } from \"@ant-design/icons\";\nimport { removeAllChildFromNode, downloadFileAsText } from \"../utils/utils\";\nimport Phylocanvas from \"phylocanvas\";\nimport \"phylocanvas/polyfill\";\nimport exportSvgPlugin from \"phylocanvas-plugin-export-svg\";\nimport scalebarPlugin from \"phylocanvas-plugin-scalebar\";\nPhylocanvas.plugin(exportSvgPlugin);\nPhylocanvas.plugin(scalebarPlugin);\n\nvar PhyloTreeChart = function PhyloTreeChart(props) {\n  // tree constructror will be recalled when props from parent change, so just put it here\n  var phylotreeContainerRef = useRef();\n  var phylocanvasRef = useRef(null);\n  var observedWidth = props.width - 10;\n  var observedHeight = props.height - 80;\n  var phylotreeData = props.data;\n  var container_w = observedWidth;\n  var container_h = observedHeight; //SETTINGS\n\n  var isUserStartResize = props.phylotreeSettings.isUserStartResize;\n  var treeLayout = props.phylotreeSettings.layout;\n  var isTaxaAligned = props.phylotreeSettings.isTaxaAligned;\n  var leafLabelSize = props.phylotreeSettings.textSize;\n  var treeIsDownloading = props.phylotreeSettings.isDownloading; //USE-EFFECTS\n\n  useEffect(function () {\n    if (observedWidth && observedHeight && !isUserStartResize && !props.isUserRedraw) {\n      //when initial draw\n      draw();\n    } else if (observedWidth && observedHeight && !isUserStartResize && props.isUserRedraw) {\n      //when user click redraw\n      draw(); // reset currentEvent.zoom transform\n    } else {\n      select(\"#phylotree-zoomButton-container\").style(\"display\", \"none\");\n      select(\"#phylotree-no-drawing\").style(\"display\", \"block\"); //clean previous-draw\n\n      removeAllChildFromNode(\"#phylocanvas-container\");\n    }\n  }, [observedWidth, observedHeight, isUserStartResize, props.isUserRedraw]); //Update selected node(s)\n\n  useEffect(function () {\n    if (props.selectedData) {\n      var tree = phylocanvasRef.current;\n\n      if (props.selectedData.length > 0) {\n        //console.log(props.selectedData);\n        //tree.clearSelect();\n        tree.leaves.forEach(function (leaf, i) {\n          //console.log(leaf);\n          if (props.selectedData.indexOf(leaf.id) !== -1) {\n            leaf.highlighted = true;\n            leaf.selected = true;\n          } else {\n            leaf.highlighted = false;\n            leaf.selected = false;\n          }\n        });\n        tree.draw();\n      } else {\n        //tree.clearSelect();\n        tree.leaves.forEach(function (leaf, i) {\n          leaf.highlighted = false;\n          leaf.selected = false;\n        });\n        tree.draw();\n      }\n    }\n  }, [props.selectedData]); //Update layout\n\n  useEffect(function () {\n    var tree = phylocanvasRef.current;\n    tree.setTreeType(treeLayout);\n    tree.draw();\n  }, [treeLayout]); //downloading\n\n  useEffect(function () {\n    if (treeIsDownloading) {\n      var tree = phylocanvasRef.current;\n      var svgData = tree.exportSVG.getSerialisedSVG(true);\n      downloadFileAsText(\"HAIviz-phylocanvas-svg.svg\", svgData);\n      props.changeIsTreeDownloading(false);\n    }\n  }, [treeIsDownloading]); //Update isTaxaAligned\n\n  useEffect(function () {\n    var tree = phylocanvasRef.current;\n    tree.alignLabels = isTaxaAligned;\n    tree.draw();\n  }, [isTaxaAligned]); //Update leaf's label size\n\n  useEffect(function () {\n    var tree = phylocanvasRef.current;\n    tree.leaves.forEach(function (leaf, i) {\n      leaf.labelStyle = {\n        textSize: leafLabelSize\n      };\n    });\n    tree.draw();\n  }, [leafLabelSize]); //DRAWING\n\n  function draw() {\n    //clean previous drawing artifacts\n    select(\"#phylotree-no-drawing\").style(\"display\", \"none\");\n    select(\"#phylotree-zoomButton-container\").style(\"display\", \"block\");\n    removeAllChildFromNode(\"#phylocanvas-container\"); //first draw phylocanvas\n\n    var tree = Phylocanvas.createTree(\"phylocanvas-container\", {\n      scalebar: {\n        active: true,\n        width: 100,\n        height: 20,\n        fillStyle: \"black\",\n        strokeStyle: \"black\",\n        lineWidth: 1,\n        fontFamily: \"Sans-serif\",\n        textBaseline: \"bottom\",\n        textAlign: \"center\",\n        digits: 2,\n        position: {\n          bottom: 10,\n          left: 10\n        }\n      }\n    });\n    tree.setSize(container_w, container_h); //global config\n\n    tree.hoverLabel = true;\n    tree.hoverLabel = false;\n    tree.highlightColour = \"red\";\n    tree.highlightSize = 2;\n    tree.highlightWidth = 2;\n    tree.selectedColour = \"red\";\n    tree.addListener(\"click\", function (e) {\n      var selectedLeaves = tree.getSelectedNodeIds();\n\n      if (selectedLeaves.length > 0) {\n        //console.log(selectedLeaves);\n        props.setSelectedData(selectedLeaves);\n      }\n    });\n    tree.addListener(\"dblclick\", function (e) {\n      props.setSelectedData([]);\n    });\n    tree.setTreeType(treeLayout); // Supported for rectangular, circular, and hierarchical tree types\n\n    tree.alignLabels = isTaxaAligned; // false to reset\n\n    tree.load(phylotreeData);\n    phylocanvasRef.current = tree;\n  } //HANDLERS\n\n\n  var clearSelectedDataHandler = function clearSelectedDataHandler() {\n    props.setSelectedData([]);\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"phylotreeContainer\",\n    ref: phylotreeContainerRef,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"phylotree-no-drawing\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Empty, {\n    description: \"No chart: please click redraw button\",\n    image: Empty.PRESENTED_IMAGE_SIMPLE,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"phylotree-zoomButton-container\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    title: \"Clear selection\",\n    shape: \"circle\",\n    id: \"phylotree-clearSelection\",\n    size: \"medium\",\n    icon: /*#__PURE__*/React.createElement(ClearOutlined, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 19\n      }\n    }),\n    onClick: clearSelectedDataHandler,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"phylocanvas-container\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default PhyloTreeChart;","map":{"version":3,"sources":["/Volumes/DATA/BUDI/APP_DEV/haiviz-v04/src/viz_PhyloTree/chart_PhyloTree_phylocanvas.js"],"names":["React","useEffect","useRef","select","Empty","Button","ClearOutlined","removeAllChildFromNode","downloadFileAsText","Phylocanvas","exportSvgPlugin","scalebarPlugin","plugin","PhyloTreeChart","props","phylotreeContainerRef","phylocanvasRef","observedWidth","width","observedHeight","height","phylotreeData","data","container_w","container_h","isUserStartResize","phylotreeSettings","treeLayout","layout","isTaxaAligned","leafLabelSize","textSize","treeIsDownloading","isDownloading","isUserRedraw","draw","style","selectedData","tree","current","length","leaves","forEach","leaf","i","indexOf","id","highlighted","selected","setTreeType","svgData","exportSVG","getSerialisedSVG","changeIsTreeDownloading","alignLabels","labelStyle","createTree","scalebar","active","fillStyle","strokeStyle","lineWidth","fontFamily","textBaseline","textAlign","digits","position","bottom","left","setSize","hoverLabel","highlightColour","highlightSize","highlightWidth","selectedColour","addListener","e","selectedLeaves","getSelectedNodeIds","setSelectedData","load","clearSelectedDataHandler","PRESENTED_IMAGE_SIMPLE"],"mappings":"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","sourcesContent":["/* ============================================================================\nprops.loadTreeData(phylotree);//\n============================================================================ */\nimport React, { useEffect, useRef } from \"react\";\nimport { select } from \"d3-selection\";\nimport \"./style_PhyloTree.css\";\nimport { Empty, Button } from \"antd\";\nimport { ClearOutlined } from \"@ant-design/icons\";\nimport { removeAllChildFromNode, downloadFileAsText } from \"../utils/utils\";\nimport Phylocanvas from \"phylocanvas\";\nimport \"phylocanvas/polyfill\";\nimport exportSvgPlugin from \"phylocanvas-plugin-export-svg\";\nimport scalebarPlugin from \"phylocanvas-plugin-scalebar\";\nPhylocanvas.plugin(exportSvgPlugin);\nPhylocanvas.plugin(scalebarPlugin);\n\nconst PhyloTreeChart = (props) => {\n  // tree constructror will be recalled when props from parent change, so just put it here\n  const phylotreeContainerRef = useRef();\n  const phylocanvasRef = useRef(null);\n  const observedWidth = props.width - 10;\n  const observedHeight = props.height - 80;\n  const phylotreeData = props.data;\n  const container_w = observedWidth;\n  const container_h = observedHeight;\n\n  //SETTINGS\n  const isUserStartResize = props.phylotreeSettings.isUserStartResize;\n  const treeLayout = props.phylotreeSettings.layout;\n  const isTaxaAligned = props.phylotreeSettings.isTaxaAligned;\n  const leafLabelSize = props.phylotreeSettings.textSize;\n  const treeIsDownloading = props.phylotreeSettings.isDownloading;\n\n  //USE-EFFECTS\n  useEffect(() => {\n    if (\n      observedWidth &&\n      observedHeight &&\n      !isUserStartResize &&\n      !props.isUserRedraw\n    ) {\n      //when initial draw\n      draw();\n    } else if (\n      observedWidth &&\n      observedHeight &&\n      !isUserStartResize &&\n      props.isUserRedraw\n    ) {\n      //when user click redraw\n      draw();\n      // reset currentEvent.zoom transform\n    } else {\n      select(\"#phylotree-zoomButton-container\").style(\"display\", \"none\");\n      select(\"#phylotree-no-drawing\").style(\"display\", \"block\");\n      //clean previous-draw\n      removeAllChildFromNode(\"#phylocanvas-container\");\n    }\n  }, [observedWidth, observedHeight, isUserStartResize, props.isUserRedraw]);\n\n  //Update selected node(s)\n  useEffect(() => {\n    if (props.selectedData) {\n      let tree = phylocanvasRef.current;\n      if (props.selectedData.length > 0) {\n        //console.log(props.selectedData);\n        //tree.clearSelect();\n        tree.leaves.forEach((leaf, i) => {\n          //console.log(leaf);\n          if (props.selectedData.indexOf(leaf.id) !== -1) {\n            leaf.highlighted = true;\n            leaf.selected = true;\n          } else {\n            leaf.highlighted = false;\n            leaf.selected = false;\n          }\n        });\n        tree.draw();\n      } else {\n        //tree.clearSelect();\n        tree.leaves.forEach((leaf, i) => {\n          leaf.highlighted = false;\n          leaf.selected = false;\n        });\n        tree.draw();\n      }\n    }\n  }, [props.selectedData]);\n\n  //Update layout\n  useEffect(() => {\n    let tree = phylocanvasRef.current;\n    tree.setTreeType(treeLayout);\n    tree.draw();\n  }, [treeLayout]);\n\n  //downloading\n  useEffect(() => {\n    if (treeIsDownloading) {\n      let tree = phylocanvasRef.current;\n      let svgData = tree.exportSVG.getSerialisedSVG(true);\n      downloadFileAsText(\"HAIviz-phylocanvas-svg.svg\", svgData);\n      props.changeIsTreeDownloading(false);\n    }\n  }, [treeIsDownloading]);\n\n  //Update isTaxaAligned\n  useEffect(() => {\n    let tree = phylocanvasRef.current;\n    tree.alignLabels = isTaxaAligned;\n    tree.draw();\n  }, [isTaxaAligned]);\n\n  //Update leaf's label size\n  useEffect(() => {\n    let tree = phylocanvasRef.current;\n    tree.leaves.forEach((leaf, i) => {\n      leaf.labelStyle = { textSize: leafLabelSize };\n    });\n    tree.draw();\n  }, [leafLabelSize]);\n\n  //DRAWING\n  function draw() {\n    //clean previous drawing artifacts\n    select(\"#phylotree-no-drawing\").style(\"display\", \"none\");\n    select(\"#phylotree-zoomButton-container\").style(\"display\", \"block\");\n    removeAllChildFromNode(\"#phylocanvas-container\");\n\n    //first draw phylocanvas\n    let tree = Phylocanvas.createTree(\"phylocanvas-container\", {\n      scalebar: {\n        active: true,\n        width: 100,\n        height: 20,\n        fillStyle: \"black\",\n        strokeStyle: \"black\",\n        lineWidth: 1,\n        fontFamily: \"Sans-serif\",\n        textBaseline: \"bottom\",\n        textAlign: \"center\",\n        digits: 2,\n        position: {\n          bottom: 10,\n          left: 10,\n        },\n      },\n    });\n    tree.setSize(container_w, container_h);\n\n    //global config\n    tree.hoverLabel = true;\n    tree.hoverLabel = false;\n    tree.highlightColour = \"red\";\n    tree.highlightSize = 2;\n    tree.highlightWidth = 2;\n    tree.selectedColour = \"red\";\n    tree.addListener(\"click\", function(e) {\n      let selectedLeaves = tree.getSelectedNodeIds();\n      if (selectedLeaves.length > 0) {\n        //console.log(selectedLeaves);\n        props.setSelectedData(selectedLeaves);\n      }\n    });\n    tree.addListener(\"dblclick\", function(e) {\n      props.setSelectedData([]);\n    });\n    tree.setTreeType(treeLayout); // Supported for rectangular, circular, and hierarchical tree types\n    tree.alignLabels = isTaxaAligned; // false to reset\n    tree.load(phylotreeData);\n    phylocanvasRef.current = tree;\n  }\n\n  //HANDLERS\n\n  const clearSelectedDataHandler = () => {\n    props.setSelectedData([]);\n  };\n\n  return (\n    <React.Fragment>\n      <div id=\"phylotreeContainer\" ref={phylotreeContainerRef}>\n        <div id=\"phylotree-no-drawing\">\n          <Empty\n            description={\"No chart: please click redraw button\"}\n            image={Empty.PRESENTED_IMAGE_SIMPLE}\n          />\n        </div>\n        <div id=\"phylotree-zoomButton-container\">\n          <Button\n            title={\"Clear selection\"}\n            shape={\"circle\"}\n            id={\"phylotree-clearSelection\"}\n            size={\"medium\"}\n            icon={<ClearOutlined />}\n            onClick={clearSelectedDataHandler}\n          ></Button>\n        </div>\n        <div id=\"phylocanvas-container\"></div>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default PhyloTreeChart;\n"]},"metadata":{},"sourceType":"module"}