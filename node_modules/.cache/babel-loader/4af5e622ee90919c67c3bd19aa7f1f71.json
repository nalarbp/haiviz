{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Volumes/DATA/BUDI/APP_DEV/haiviz-v04/src/viz_InputFiles/btn_MovementInput.js\";\n\nimport React, { useEffect, useState } from \"react\";\nimport { csv } from \"d3-fetch\";\nimport { Card, Empty, Spin, Upload } from \"antd\";\nimport { CheckCircleTwoTone } from \"@ant-design/icons\";\nimport { MovementInputSVG } from \"../utils/customIcons\";\nimport Moment from \"moment\";\nimport { extendMoment } from \"moment-range\";\nimport { color } from \"d3-color\";\nvar moment = extendMoment(Moment);\nvar Dragger = Upload.Dragger; //props.movementData, loadMovementData\n\nvar MovementInput = function MovementInput(props) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLoading = _useState2[0],\n      setisLoading = _useState2[1]; //functions\n\n\n  function parseMovement(_x) {\n    return _parseMovement.apply(this, arguments);\n  }\n\n  function _parseMovement() {\n    _parseMovement = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(fileURL) {\n      var data_promise, validHeaders, inputHeaders, header_is_valid, date_invalid;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return csv(fileURL).then(function (result) {\n                return result;\n              });\n\n            case 2:\n              data_promise = _context.sent;\n              //Validation runs here\n              // headers\n              validHeaders = [\"source_name\", \"location_name\", \"start_date\", \"end_date\"];\n              inputHeaders = Object.keys(data_promise[0]);\n              header_is_valid = true;\n              validHeaders.forEach(function (item) {\n                if (inputHeaders.indexOf(item) === -1) {\n                  header_is_valid = false;\n                }\n              });\n\n              if (header_is_valid) {\n                _context.next = 11;\n                break;\n              }\n\n              setisLoading(false);\n              alert(\"Invalid headers\");\n              return _context.abrupt(\"return\");\n\n            case 11:\n              // no empty record or invalid format on start and end date\n              date_invalid = false;\n              data_promise.forEach(function (d) {\n                if (moment(d.start_date) && moment(d.end_date)) {\n                  d.start_date = moment(d.start_date);\n                  d.end_date = moment(d.end_date);\n                } else if (d.location_color) {\n                  //console.log(color(d.location_color));\n                  d.location_color = color(d.location_color);\n                } else if (parseInt(d.source_name.isInteger())) {\n                  d.source_name = parseInt(d.source_name);\n                } else {\n                  date_invalid = true;\n                }\n              });\n\n              if (!date_invalid) {\n                _context.next = 17;\n                break;\n              }\n\n              setisLoading(false);\n              alert(\"Invalid data: wrong date format in column start or end date\");\n              return _context.abrupt(\"return\");\n\n            case 17:\n              //check adm and discharge column\n              data_promise.forEach(function (d) {\n                if (d[\"is_admDisc\"]) {\n                  d[\"is_admDisc\"] = d[\"is_admDisc\"] == \"y\" ? true : false;\n                } else {\n                  d[\"is_admDisc\"] = false;\n                }\n              });\n              data_promise.sort(function (a, b) {\n                return a.source_name - b.source_name;\n              });\n              props.loadMovementData(data_promise);\n\n            case 20:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _parseMovement.apply(this, arguments);\n  }\n\n  var beforeUploadHandler = function beforeUploadHandler(file) {\n    setisLoading(true);\n\n    if (file) {\n      var reader = new FileReader();\n      reader.readAsDataURL(file);\n\n      reader.onloadend = function (evt) {\n        var dataUrl = evt.target.result;\n        parseMovement(dataUrl);\n      };\n    }\n  };\n\n  useEffect(function () {\n    if (props.movementData) {\n      setisLoading(false);\n    }\n  }, [props.movementData]);\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    title: \"Movement data\",\n    style: {\n      height: \"100%\"\n    },\n    headStyle: {\n      textAlign: \"left\"\n    },\n    bodyStyle: {\n      margin: \"0px\",\n      padding: \"5px\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }\n  }, !props.isolateData && /*#__PURE__*/React.createElement(Empty, {\n    image: Empty.PRESENTED_IMAGE_SIMPLE,\n    description: \"Please load the metadata first\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 11\n    }\n  }), props.isolateData && !isLoading && !props.movementData && /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Dragger, {\n    accept: \".csv\",\n    style: {\n      padding: \"10px\"\n    },\n    name: \"file\",\n    multiple: false,\n    action: \"dummy-post\",\n    beforeUpload: beforeUploadHandler,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(MovementInputSVG, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 17\n    }\n  })))), props.isolateData && isLoading && !props.movementData && /*#__PURE__*/React.createElement(Spin, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 67\n    }\n  }), props.isolateData && !isLoading && props.movementData && /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      padding: \"10px\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(CheckCircleTwoTone, {\n    twoToneColor: \"#52c41a\",\n    style: {\n      fontSize: \"20pt\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 15\n    }\n  }, \"Loaded!\")))));\n};\n\nexport default MovementInput;","map":{"version":3,"sources":["/Volumes/DATA/BUDI/APP_DEV/haiviz-v04/src/viz_InputFiles/btn_MovementInput.js"],"names":["React","useEffect","useState","csv","Card","Empty","Spin","Upload","CheckCircleTwoTone","MovementInputSVG","Moment","extendMoment","color","moment","Dragger","MovementInput","props","isLoading","setisLoading","parseMovement","fileURL","then","result","data_promise","validHeaders","inputHeaders","Object","keys","header_is_valid","forEach","item","indexOf","alert","date_invalid","d","start_date","end_date","location_color","parseInt","source_name","isInteger","sort","a","b","loadMovementData","beforeUploadHandler","file","reader","FileReader","readAsDataURL","onloadend","evt","dataUrl","target","movementData","height","textAlign","margin","padding","isolateData","PRESENTED_IMAGE_SIMPLE","fontSize"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,GAAT,QAAoB,UAApB;AACA,SAASC,IAAT,EAAeC,KAAf,EAAsBC,IAAtB,EAA4BC,MAA5B,QAA0C,MAA1C;AACA,SAASC,kBAAT,QAAmC,mBAAnC;AACA,SAASC,gBAAT,QAAiC,sBAAjC;AAEA,OAAOC,MAAP,MAAmB,QAAnB;AACA,SAASC,YAAT,QAA6B,cAA7B;AACA,SAASC,KAAT,QAAsB,UAAtB;AAEA,IAAMC,MAAM,GAAGF,YAAY,CAACD,MAAD,CAA3B;IACQI,O,GAAYP,M,CAAZO,O,EAER;;AAEA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,KAAD,EAAW;AAAA,kBACGd,QAAQ,CAAC,KAAD,CADX;AAAA;AAAA,MACxBe,SADwB;AAAA,MACbC,YADa,kBAG/B;;;AAH+B,WAIhBC,aAJgB;AAAA;AAAA;;AAAA;AAAA,8EAI/B,iBAA6BC,OAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAC2BjB,GAAG,CAACiB,OAAD,CAAH,CAAaC,IAAb,CAAkB,UAASC,MAAT,EAAiB;AAC1D,uBAAOA,MAAP;AACD,eAFwB,CAD3B;;AAAA;AACMC,cAAAA,YADN;AAIE;AACA;AACMC,cAAAA,YANR,GAMuB,CACnB,aADmB,EAEnB,eAFmB,EAGnB,YAHmB,EAInB,UAJmB,CANvB;AAYQC,cAAAA,YAZR,GAYuBC,MAAM,CAACC,IAAP,CAAYJ,YAAY,CAAC,CAAD,CAAxB,CAZvB;AAaMK,cAAAA,eAbN,GAawB,IAbxB;AAcEJ,cAAAA,YAAY,CAACK,OAAb,CAAqB,UAACC,IAAD,EAAU;AAC7B,oBAAIL,YAAY,CAACM,OAAb,CAAqBD,IAArB,MAA+B,CAAC,CAApC,EAAuC;AACrCF,kBAAAA,eAAe,GAAG,KAAlB;AACD;AACF,eAJD;;AAdF,kBAoBOA,eApBP;AAAA;AAAA;AAAA;;AAqBIV,cAAAA,YAAY,CAAC,KAAD,CAAZ;AACAc,cAAAA,KAAK,CAAC,iBAAD,CAAL;AAtBJ;;AAAA;AA0BE;AACIC,cAAAA,YA3BN,GA2BqB,KA3BrB;AA4BEV,cAAAA,YAAY,CAACM,OAAb,CAAqB,UAASK,CAAT,EAAY;AAC/B,oBAAIrB,MAAM,CAACqB,CAAC,CAACC,UAAH,CAAN,IAAwBtB,MAAM,CAACqB,CAAC,CAACE,QAAH,CAAlC,EAAgD;AAC9CF,kBAAAA,CAAC,CAACC,UAAF,GAAetB,MAAM,CAACqB,CAAC,CAACC,UAAH,CAArB;AACAD,kBAAAA,CAAC,CAACE,QAAF,GAAavB,MAAM,CAACqB,CAAC,CAACE,QAAH,CAAnB;AACD,iBAHD,MAGO,IAAIF,CAAC,CAACG,cAAN,EAAsB;AAC3B;AACAH,kBAAAA,CAAC,CAACG,cAAF,GAAmBzB,KAAK,CAACsB,CAAC,CAACG,cAAH,CAAxB;AACD,iBAHM,MAGA,IAAIC,QAAQ,CAACJ,CAAC,CAACK,WAAF,CAAcC,SAAd,EAAD,CAAZ,EAAyC;AAC9CN,kBAAAA,CAAC,CAACK,WAAF,GAAgBD,QAAQ,CAACJ,CAAC,CAACK,WAAH,CAAxB;AACD,iBAFM,MAEA;AACLN,kBAAAA,YAAY,GAAG,IAAf;AACD;AACF,eAZD;;AA5BF,mBA0CMA,YA1CN;AAAA;AAAA;AAAA;;AA2CIf,cAAAA,YAAY,CAAC,KAAD,CAAZ;AACAc,cAAAA,KAAK,CAAC,6DAAD,CAAL;AA5CJ;;AAAA;AAgDE;AACAT,cAAAA,YAAY,CAACM,OAAb,CAAqB,UAASK,CAAT,EAAY;AAC/B,oBAAIA,CAAC,CAAC,YAAD,CAAL,EAAqB;AACnBA,kBAAAA,CAAC,CAAC,YAAD,CAAD,GAAkBA,CAAC,CAAC,YAAD,CAAD,IAAmB,GAAnB,GAAyB,IAAzB,GAAgC,KAAlD;AACD,iBAFD,MAEO;AACLA,kBAAAA,CAAC,CAAC,YAAD,CAAD,GAAkB,KAAlB;AACD;AACF,eAND;AAQAX,cAAAA,YAAY,CAACkB,IAAb,CAAkB,UAACC,CAAD,EAAIC,CAAJ;AAAA,uBAAUD,CAAC,CAACH,WAAF,GAAgBI,CAAC,CAACJ,WAA5B;AAAA,eAAlB;AAEAvB,cAAAA,KAAK,CAAC4B,gBAAN,CAAuBrB,YAAvB;;AA3DF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAJ+B;AAAA;AAAA;;AAkE/B,MAAMsB,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,IAAD,EAAU;AACpC5B,IAAAA,YAAY,CAAC,IAAD,CAAZ;;AACA,QAAI4B,IAAJ,EAAU;AACR,UAAMC,MAAM,GAAG,IAAIC,UAAJ,EAAf;AACAD,MAAAA,MAAM,CAACE,aAAP,CAAqBH,IAArB;;AACAC,MAAAA,MAAM,CAACG,SAAP,GAAmB,UAASC,GAAT,EAAc;AAC/B,YAAMC,OAAO,GAAGD,GAAG,CAACE,MAAJ,CAAW/B,MAA3B;AACAH,QAAAA,aAAa,CAACiC,OAAD,CAAb;AACD,OAHD;AAID;AACF,GAVD;;AAYAnD,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIe,KAAK,CAACsC,YAAV,EAAwB;AACtBpC,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD;AACF,GAJQ,EAIN,CAACF,KAAK,CAACsC,YAAP,CAJM,CAAT;AAMA,sBACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD;AACE,IAAA,KAAK,EAAE,eADT;AAEE,IAAA,KAAK,EAAE;AAAEC,MAAAA,MAAM,EAAE;AAAV,KAFT;AAGE,IAAA,SAAS,EAAE;AAAEC,MAAAA,SAAS,EAAE;AAAb,KAHb;AAIE,IAAA,SAAS,EAAE;AAAEC,MAAAA,MAAM,EAAE,KAAV;AAAiBC,MAAAA,OAAO,EAAE;AAA1B,KAJb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMG,CAAC1C,KAAK,CAAC2C,WAAP,iBACC,oBAAC,KAAD;AACE,IAAA,KAAK,EAAEtD,KAAK,CAACuD,sBADf;AAEE,IAAA,WAAW,EAAE,gCAFf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPJ,EAYG5C,KAAK,CAAC2C,WAAN,IAAqB,CAAC1C,SAAtB,IAAmC,CAACD,KAAK,CAACsC,YAA1C,iBACC,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,OAAD;AACE,IAAA,MAAM,EAAE,MADV;AAEE,IAAA,KAAK,EAAE;AAAEI,MAAAA,OAAO,EAAE;AAAX,KAFT;AAGE,IAAA,IAAI,EAAC,MAHP;AAIE,IAAA,QAAQ,EAAE,KAJZ;AAKE,IAAA,MAAM,EAAC,YALT;AAME,IAAA,YAAY,EAAEb,mBANhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CARF,CADF,CAbJ,EA4BG7B,KAAK,CAAC2C,WAAN,IAAqB1C,SAArB,IAAkC,CAACD,KAAK,CAACsC,YAAzC,iBAAyD,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA5B5D,EA6BGtC,KAAK,CAAC2C,WAAN,IAAqB,CAAC1C,SAAtB,IAAmCD,KAAK,CAACsC,YAAzC,iBACC,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,KAAK,EAAE;AAAEI,MAAAA,OAAO,EAAE;AAAX,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,kBAAD;AACE,IAAA,YAAY,EAAC,SADf;AAEE,IAAA,KAAK,EAAE;AAAEG,MAAAA,QAAQ,EAAE;AAAZ,KAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eALF,CADF,CA9BJ,CADF,CADF;AA6CD,CAjID;;AAkIA,eAAe9C,aAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { csv } from \"d3-fetch\";\nimport { Card, Empty, Spin, Upload } from \"antd\";\nimport { CheckCircleTwoTone } from \"@ant-design/icons\";\nimport { MovementInputSVG } from \"../utils/customIcons\";\n\nimport Moment from \"moment\";\nimport { extendMoment } from \"moment-range\";\nimport { color } from \"d3-color\";\n\nconst moment = extendMoment(Moment);\nconst { Dragger } = Upload;\n\n//props.movementData, loadMovementData\n\nconst MovementInput = (props) => {\n  const [isLoading, setisLoading] = useState(false);\n\n  //functions\n  async function parseMovement(fileURL) {\n    let data_promise = await csv(fileURL).then(function(result) {\n      return result;\n    });\n    //Validation runs here\n    // headers\n    const validHeaders = [\n      \"source_name\",\n      \"location_name\",\n      \"start_date\",\n      \"end_date\",\n    ];\n    const inputHeaders = Object.keys(data_promise[0]);\n    let header_is_valid = true;\n    validHeaders.forEach((item) => {\n      if (inputHeaders.indexOf(item) === -1) {\n        header_is_valid = false;\n      }\n    });\n\n    if (!header_is_valid) {\n      setisLoading(false);\n      alert(\"Invalid headers\");\n      return;\n    }\n\n    // no empty record or invalid format on start and end date\n    let date_invalid = false;\n    data_promise.forEach(function(d) {\n      if (moment(d.start_date) && moment(d.end_date)) {\n        d.start_date = moment(d.start_date);\n        d.end_date = moment(d.end_date);\n      } else if (d.location_color) {\n        //console.log(color(d.location_color));\n        d.location_color = color(d.location_color);\n      } else if (parseInt(d.source_name.isInteger())) {\n        d.source_name = parseInt(d.source_name);\n      } else {\n        date_invalid = true;\n      }\n    });\n\n    if (date_invalid) {\n      setisLoading(false);\n      alert(\"Invalid data: wrong date format in column start or end date\");\n      return;\n    }\n\n    //check adm and discharge column\n    data_promise.forEach(function(d) {\n      if (d[\"is_admDisc\"]) {\n        d[\"is_admDisc\"] = d[\"is_admDisc\"] == \"y\" ? true : false;\n      } else {\n        d[\"is_admDisc\"] = false;\n      }\n    });\n\n    data_promise.sort((a, b) => a.source_name - b.source_name);\n\n    props.loadMovementData(data_promise);\n  }\n\n  const beforeUploadHandler = (file) => {\n    setisLoading(true);\n    if (file) {\n      const reader = new FileReader();\n      reader.readAsDataURL(file);\n      reader.onloadend = function(evt) {\n        const dataUrl = evt.target.result;\n        parseMovement(dataUrl);\n      };\n    }\n  };\n\n  useEffect(() => {\n    if (props.movementData) {\n      setisLoading(false);\n    }\n  }, [props.movementData]);\n\n  return (\n    <React.Fragment>\n      <Card\n        title={\"Movement data\"}\n        style={{ height: \"100%\" }}\n        headStyle={{ textAlign: \"left\" }}\n        bodyStyle={{ margin: \"0px\", padding: \"5px\" }}\n      >\n        {!props.isolateData && (\n          <Empty\n            image={Empty.PRESENTED_IMAGE_SIMPLE}\n            description={\"Please load the metadata first\"}\n          />\n        )}\n        {props.isolateData && !isLoading && !props.movementData && (\n          <React.Fragment>\n            <Dragger\n              accept={\".csv\"}\n              style={{ padding: \"10px\" }}\n              name=\"file\"\n              multiple={false}\n              action=\"dummy-post\"\n              beforeUpload={beforeUploadHandler}\n            >\n              <h1>\n                <MovementInputSVG />\n              </h1>\n            </Dragger>\n          </React.Fragment>\n        )}\n        {props.isolateData && isLoading && !props.movementData && <Spin />}\n        {props.isolateData && !isLoading && props.movementData && (\n          <React.Fragment>\n            <div style={{ padding: \"10px\" }}>\n              <CheckCircleTwoTone\n                twoToneColor=\"#52c41a\"\n                style={{ fontSize: \"20pt\" }}\n              />\n              <p>Loaded!</p>\n            </div>\n          </React.Fragment>\n        )}\n      </Card>\n    </React.Fragment>\n  );\n};\nexport default MovementInput;\n"]},"metadata":{},"sourceType":"module"}