{"ast":null,"code":"import { NEW_RESIZE_SIGNAL_SIMAP, NEW_NODE_SIZE_SIMAP, NEW_TEXT_SIZE_SIMAP, NEW_OVERLAY_GRAPH_SIMAP, NEW_FORCE_SIMAP, NEW_LAYOUT_SIMAP, NEW_IS_LOC_TEXT_SHOWN_SIMAP } from \"../utils/constants\";\nimport { initialState } from \"../reducers\";\n\nvar simulatedmapSettingsReducer = function simulatedmapSettingsReducer(prevState, action) {\n  switch (action.type) {\n    case NEW_RESIZE_SIGNAL_SIMAP:\n      var newState_resizeSignal_simap = Object.assign({}, prevState);\n\n      if (action.payload !== prevState.isUserStartResize_simap) {\n        newState_resizeSignal_simap.isUserStartResize_simap = action.payload;\n      }\n\n      return newState_resizeSignal_simap;\n\n    case NEW_NODE_SIZE_SIMAP:\n      var newState_nodeSize = Object.assign({}, prevState);\n\n      if (action.payload && action.payload !== prevState.nodeSize) {\n        newState_nodeSize.nodeSize = action.payload;\n      }\n\n      return newState_nodeSize;\n    // if no change return same state with before\n\n    case NEW_TEXT_SIZE_SIMAP:\n      var newState_textSize = Object.assign({}, prevState);\n\n      if (action.payload && action.payload !== prevState.textSize) {\n        newState_textSize.textSize = action.payload;\n      }\n\n      return newState_textSize;\n\n    case NEW_OVERLAY_GRAPH_SIMAP:\n      var newState_overlayGraph = Object.assign({}, prevState);\n\n      if (action.payload && action.payload !== prevState.overlayGraph) {\n        newState_overlayGraph.overlayGraph = action.payload;\n      }\n\n      return newState_overlayGraph;\n\n    case NEW_FORCE_SIMAP:\n      var newState_forceSettings = Object.assign({}, prevState);\n\n      if (action.payload && action.payload !== prevState.force) {\n        newState_forceSettings.force = action.payload;\n      }\n\n      return newState_forceSettings;\n\n    case NEW_LAYOUT_SIMAP:\n      var newState_layout = Object.assign({}, prevState);\n\n      if (action.payload && action.payload !== prevState.layout) {\n        newState_layout.layout = action.payload;\n      }\n\n      return newState_layout;\n\n    case NEW_IS_LOC_TEXT_SHOWN_SIMAP:\n      var newState_isLocationLabelShown = Object.assign({}, prevState);\n\n      if (action.payload !== prevState.isLocationLabelShown) {\n        newState_isLocationLabelShown.isLocationLabelShown = action.payload;\n      }\n\n      return newState_isLocationLabelShown;\n\n    default:\n      if (prevState) {\n        return prevState;\n      } else {\n        return initialState.simulatedmapSettings;\n      }\n\n  }\n};\n\nexport default simulatedmapSettingsReducer;","map":{"version":3,"sources":["/Volumes/DATA/BUDI/APP_DEV/haiviz-v04/src/reducers/reducer-simulatedmapSettings.js"],"names":["NEW_RESIZE_SIGNAL_SIMAP","NEW_NODE_SIZE_SIMAP","NEW_TEXT_SIZE_SIMAP","NEW_OVERLAY_GRAPH_SIMAP","NEW_FORCE_SIMAP","NEW_LAYOUT_SIMAP","NEW_IS_LOC_TEXT_SHOWN_SIMAP","initialState","simulatedmapSettingsReducer","prevState","action","type","newState_resizeSignal_simap","Object","assign","payload","isUserStartResize_simap","newState_nodeSize","nodeSize","newState_textSize","textSize","newState_overlayGraph","overlayGraph","newState_forceSettings","force","newState_layout","layout","newState_isLocationLabelShown","isLocationLabelShown","simulatedmapSettings"],"mappings":"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","sourcesContent":["import {\n  NEW_RESIZE_SIGNAL_SIMAP,\n  NEW_NODE_SIZE_SIMAP,\n  NEW_TEXT_SIZE_SIMAP,\n  NEW_OVERLAY_GRAPH_SIMAP,\n  NEW_FORCE_SIMAP,\n  NEW_LAYOUT_SIMAP,\n  NEW_IS_LOC_TEXT_SHOWN_SIMAP\n} from \"../utils/constants\";\nimport { initialState } from \"../reducers\";\n\nconst simulatedmapSettingsReducer = (prevState, action) => {\n  switch (action.type) {\n    case NEW_RESIZE_SIGNAL_SIMAP:\n      let newState_resizeSignal_simap = Object.assign({}, prevState);\n      if (action.payload !== prevState.isUserStartResize_simap) {\n        newState_resizeSignal_simap.isUserStartResize_simap = action.payload;\n      }\n      return newState_resizeSignal_simap;\n    case NEW_NODE_SIZE_SIMAP:\n      let newState_nodeSize = Object.assign({}, prevState);\n      if (action.payload && action.payload !== prevState.nodeSize) {\n        newState_nodeSize.nodeSize = action.payload;\n      }\n      return newState_nodeSize; // if no change return same state with before\n\n    case NEW_TEXT_SIZE_SIMAP:\n      let newState_textSize = Object.assign({}, prevState);\n      if (action.payload && action.payload !== prevState.textSize) {\n        newState_textSize.textSize = action.payload;\n      }\n      return newState_textSize;\n\n    case NEW_OVERLAY_GRAPH_SIMAP:\n      let newState_overlayGraph = Object.assign({}, prevState);\n      if (action.payload && action.payload !== prevState.overlayGraph) {\n        newState_overlayGraph.overlayGraph = action.payload;\n      }\n      return newState_overlayGraph;\n\n    case NEW_FORCE_SIMAP:\n      let newState_forceSettings = Object.assign({}, prevState);\n      if (action.payload && action.payload !== prevState.force) {\n        newState_forceSettings.force = action.payload;\n      }\n      return newState_forceSettings;\n\n    case NEW_LAYOUT_SIMAP:\n      let newState_layout = Object.assign({}, prevState);\n      if (action.payload && action.payload !== prevState.layout) {\n        newState_layout.layout = action.payload;\n      }\n      return newState_layout;\n\n    case NEW_IS_LOC_TEXT_SHOWN_SIMAP:\n      let newState_isLocationLabelShown = Object.assign({}, prevState);\n      if (action.payload !== prevState.isLocationLabelShown) {\n        newState_isLocationLabelShown.isLocationLabelShown = action.payload;\n      }\n      return newState_isLocationLabelShown;\n\n    default:\n      if (prevState) {\n        return prevState;\n      } else {\n        return initialState.simulatedmapSettings;\n      }\n  }\n};\n\nexport default simulatedmapSettingsReducer;\n"]},"metadata":{},"sourceType":"module"}