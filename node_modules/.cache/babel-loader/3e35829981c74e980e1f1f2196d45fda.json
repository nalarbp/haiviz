{"ast":null,"code":"import * as constant from \"../utils/constants\";\nimport { initialState } from \"../reducers\";\n\nvar phylotreeGanttSettingsReducer = function phylotreeGanttSettingsReducer(prevState, action) {\n  switch (action.type) {\n    //RESIZE SIGNAL\n    case constant.RESIZE_SIGNAL_TREEGANTT:\n      var newState_resizeSignal = Object.assign({}, prevState);\n\n      if (action.payload !== prevState.isUserStartResize) {\n        newState_resizeSignal.isUserStartResize = action.payload;\n      }\n\n      return newState_resizeSignal;\n    //WIDTH PERCENT\n    //NODE\n\n    case constant.NODE_SIZE_TREEGANTT:\n      var newState_nodeSize = Object.assign({}, prevState);\n\n      if (action.payload && action.payload !== prevState.nodeSize) {\n        newState_nodeSize.nodeSize = action.payload;\n      }\n\n      return newState_nodeSize;\n    // if no change return same state with before\n\n    case constant.NODE_LABEL_SIZE_TREEGANTT:\n      var newState_textSize = Object.assign({}, prevState);\n\n      if (action.payload && action.payload !== prevState.textSize) {\n        newState_textSize.textSize = action.payload;\n      }\n\n      return newState_textSize;\n\n    case constant.NODE_LABEL_OFFSET_TREEGANTT:\n      var newState_textOffset = Object.assign({}, prevState);\n\n      if (action.payload && action.payload !== prevState.textOffset) {\n        newState_textOffset.textOffset = action.payload;\n      }\n\n      return newState_textOffset;\n\n    default:\n      if (prevState) {\n        return prevState;\n      } else {\n        return initialState.phylotreeSettings;\n      }\n\n  }\n};\n\nexport default phylotreeGanttSettingsReducer;","map":{"version":3,"sources":["/Volumes/DATA/BUDI/APP_DEV/haiviz-v04/src/reducers/reducer-phylotreeGanttSettings.js"],"names":["constant","initialState","phylotreeGanttSettingsReducer","prevState","action","type","RESIZE_SIGNAL_TREEGANTT","newState_resizeSignal","Object","assign","payload","isUserStartResize","NODE_SIZE_TREEGANTT","newState_nodeSize","nodeSize","NODE_LABEL_SIZE_TREEGANTT","newState_textSize","textSize","NODE_LABEL_OFFSET_TREEGANTT","newState_textOffset","textOffset","phylotreeSettings"],"mappings":"AAAA,OAAO,KAAKA,QAAZ,MAA0B,oBAA1B;AACA,SAASC,YAAT,QAA6B,aAA7B;;AAEA,IAAMC,6BAA6B,GAAG,SAAhCA,6BAAgC,CAACC,SAAD,EAAYC,MAAZ,EAAuB;AAC3D,UAAQA,MAAM,CAACC,IAAf;AACE;AACA,SAAKL,QAAQ,CAACM,uBAAd;AACE,UAAIC,qBAAqB,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBN,SAAlB,CAA5B;;AACA,UAAIC,MAAM,CAACM,OAAP,KAAmBP,SAAS,CAACQ,iBAAjC,EAAoD;AAClDJ,QAAAA,qBAAqB,CAACI,iBAAtB,GAA0CP,MAAM,CAACM,OAAjD;AACD;;AACD,aAAOH,qBAAP;AAEF;AAEA;;AACA,SAAKP,QAAQ,CAACY,mBAAd;AACE,UAAIC,iBAAiB,GAAGL,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBN,SAAlB,CAAxB;;AACA,UAAIC,MAAM,CAACM,OAAP,IAAkBN,MAAM,CAACM,OAAP,KAAmBP,SAAS,CAACW,QAAnD,EAA6D;AAC3DD,QAAAA,iBAAiB,CAACC,QAAlB,GAA6BV,MAAM,CAACM,OAApC;AACD;;AACD,aAAOG,iBAAP;AAA0B;;AAE5B,SAAKb,QAAQ,CAACe,yBAAd;AACE,UAAIC,iBAAiB,GAAGR,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBN,SAAlB,CAAxB;;AACA,UAAIC,MAAM,CAACM,OAAP,IAAkBN,MAAM,CAACM,OAAP,KAAmBP,SAAS,CAACc,QAAnD,EAA6D;AAC3DD,QAAAA,iBAAiB,CAACC,QAAlB,GAA6Bb,MAAM,CAACM,OAApC;AACD;;AACD,aAAOM,iBAAP;;AAEF,SAAKhB,QAAQ,CAACkB,2BAAd;AACE,UAAIC,mBAAmB,GAAGX,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBN,SAAlB,CAA1B;;AACA,UAAIC,MAAM,CAACM,OAAP,IAAkBN,MAAM,CAACM,OAAP,KAAmBP,SAAS,CAACiB,UAAnD,EAA+D;AAC7DD,QAAAA,mBAAmB,CAACC,UAApB,GAAiChB,MAAM,CAACM,OAAxC;AACD;;AACD,aAAOS,mBAAP;;AAEF;AACE,UAAIhB,SAAJ,EAAe;AACb,eAAOA,SAAP;AACD,OAFD,MAEO;AACL,eAAOF,YAAY,CAACoB,iBAApB;AACD;;AAtCL;AAwCD,CAzCD;;AA2CA,eAAenB,6BAAf","sourcesContent":["import * as constant from \"../utils/constants\";\nimport { initialState } from \"../reducers\";\n\nconst phylotreeGanttSettingsReducer = (prevState, action) => {\n  switch (action.type) {\n    //RESIZE SIGNAL\n    case constant.RESIZE_SIGNAL_TREEGANTT:\n      let newState_resizeSignal = Object.assign({}, prevState);\n      if (action.payload !== prevState.isUserStartResize) {\n        newState_resizeSignal.isUserStartResize = action.payload;\n      }\n      return newState_resizeSignal;\n\n    //WIDTH PERCENT\n\n    //NODE\n    case constant.NODE_SIZE_TREEGANTT:\n      let newState_nodeSize = Object.assign({}, prevState);\n      if (action.payload && action.payload !== prevState.nodeSize) {\n        newState_nodeSize.nodeSize = action.payload;\n      }\n      return newState_nodeSize; // if no change return same state with before\n\n    case constant.NODE_LABEL_SIZE_TREEGANTT:\n      let newState_textSize = Object.assign({}, prevState);\n      if (action.payload && action.payload !== prevState.textSize) {\n        newState_textSize.textSize = action.payload;\n      }\n      return newState_textSize;\n\n    case constant.NODE_LABEL_OFFSET_TREEGANTT:\n      let newState_textOffset = Object.assign({}, prevState);\n      if (action.payload && action.payload !== prevState.textOffset) {\n        newState_textOffset.textOffset = action.payload;\n      }\n      return newState_textOffset;\n\n    default:\n      if (prevState) {\n        return prevState;\n      } else {\n        return initialState.phylotreeSettings;\n      }\n  }\n};\n\nexport default phylotreeGanttSettingsReducer;\n"]},"metadata":{},"sourceType":"module"}