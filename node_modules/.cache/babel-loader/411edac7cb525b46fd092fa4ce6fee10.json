{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Volumes/DATA/BUDI/APP_DEV/haiviz-v04/src/viz_InputFiles/btn_TransgraphInput.js\";\n\nimport React, { useEffect, useState } from \"react\";\nimport { text } from \"d3-fetch\";\nimport { Card, Empty, Spin, Upload } from \"antd\";\nimport { CheckCircleTwoTone } from \"@ant-design/icons\";\nimport { parseDOTtoCytoscape, isIsolateOrHost } from \"../utils/utils\";\nimport { TransgraphInputSVG } from \"../utils/customIcons\";\nvar Dragger = Upload.Dragger;\n\nvar _ = require(\"lodash\"); //props.transgraphData, props.loadTransgraphData\n\n\nvar TransgraphInput = function TransgraphInput(props) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLoading = _useState2[0],\n      setisLoading = _useState2[1]; //functions\n\n\n  function parseGraph(_x) {\n    return _parseGraph.apply(this, arguments);\n  }\n\n  function _parseGraph() {\n    _parseGraph = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(fileURL) {\n      var isolateDataCloned, graph_promise, graph, nodeLabels, graphData, isolateName_list, sourceName_list, graph_key, graphWithValidation;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              isolateDataCloned = _.cloneDeep(Array.from(props.isolateData.values()));\n              _context.next = 3;\n              return text(fileURL).then(function (result) {\n                return result;\n              });\n\n            case 3:\n              graph_promise = _context.sent;\n              //const graph = parseDOTtoJSON(graph_promise);\n              graph = parseDOTtoCytoscape(graph_promise);\n\n              if (!graph) {\n                _context.next = 14;\n                break;\n              }\n\n              nodeLabels = graph.nodeLabels;\n              graphData = graph.data;\n              isolateName_list = [];\n              sourceName_list = [];\n              isolateDataCloned.forEach(function (d) {\n                isolateName_list.push(d.isolate_name);\n                sourceName_list.push(d.isolate_sourceName);\n              });\n\n              if (graphData) {\n                //add layout detection here\n                graph_key = isIsolateOrHost(nodeLabels, isolateName_list, sourceName_list);\n                graphWithValidation = {\n                  graphKey: graph_key,\n                  graphData: graphData\n                };\n                props.loadTransgraphData(graphWithValidation);\n              }\n\n              _context.next = 16;\n              break;\n\n            case 14:\n              setisLoading(false);\n              return _context.abrupt(\"return\");\n\n            case 16:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _parseGraph.apply(this, arguments);\n  }\n\n  var beforeUploadHandler = function beforeUploadHandler(file) {\n    setisLoading(true);\n\n    if (file) {\n      var reader = new FileReader();\n      reader.readAsDataURL(file);\n\n      reader.onloadend = function (evt) {\n        var dataUrl = evt.target.result;\n        parseGraph(dataUrl);\n      };\n    }\n  };\n\n  useEffect(function () {\n    if (props.transgraphData) {\n      setisLoading(false);\n    }\n  }, [props.transgraphData]);\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    title: \"Transmission graph\",\n    style: {\n      height: \"100%\"\n    },\n    headStyle: {\n      textAlign: \"left\"\n    },\n    bodyStyle: {\n      margin: \"0px\",\n      padding: \"5px\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }, !props.isolateData && /*#__PURE__*/React.createElement(Empty, {\n    image: Empty.PRESENTED_IMAGE_SIMPLE,\n    description: \"Please load the metadata first\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 11\n    }\n  }), props.isolateData && !isLoading && !props.transgraphData && /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Dragger, {\n    accept: \".gv, .dot\",\n    style: {\n      padding: \"10px\"\n    },\n    name: \"file\",\n    multiple: false,\n    action: \"dummy-post\",\n    beforeUpload: beforeUploadHandler,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(TransgraphInputSVG, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 17\n    }\n  })))), props.isolateData && isLoading && !props.transgraphData && /*#__PURE__*/React.createElement(Spin, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 69\n    }\n  }), props.isolateData && !isLoading && props.transgraphData && /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      padding: \"10px\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(CheckCircleTwoTone, {\n    twoToneColor: \"#52c41a\",\n    style: {\n      fontSize: \"20pt\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 15\n    }\n  }, \"Loaded!\")))));\n};\n\nexport default TransgraphInput;","map":{"version":3,"sources":["/Volumes/DATA/BUDI/APP_DEV/haiviz-v04/src/viz_InputFiles/btn_TransgraphInput.js"],"names":["React","useEffect","useState","text","Card","Empty","Spin","Upload","CheckCircleTwoTone","parseDOTtoCytoscape","isIsolateOrHost","TransgraphInputSVG","Dragger","_","require","TransgraphInput","props","isLoading","setisLoading","parseGraph","fileURL","isolateDataCloned","cloneDeep","Array","from","isolateData","values","then","result","graph_promise","graph","nodeLabels","graphData","data","isolateName_list","sourceName_list","forEach","d","push","isolate_name","isolate_sourceName","graph_key","graphWithValidation","graphKey","loadTransgraphData","beforeUploadHandler","file","reader","FileReader","readAsDataURL","onloadend","evt","dataUrl","target","transgraphData","height","textAlign","margin","padding","PRESENTED_IMAGE_SIMPLE","fontSize"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { text } from \"d3-fetch\";\nimport { Card, Empty, Spin, Upload } from \"antd\";\nimport { CheckCircleTwoTone } from \"@ant-design/icons\";\nimport { parseDOTtoCytoscape, isIsolateOrHost } from \"../utils/utils\";\nimport { TransgraphInputSVG } from \"../utils/customIcons\";\n\nconst { Dragger } = Upload;\nconst _ = require(\"lodash\");\n\n//props.transgraphData, props.loadTransgraphData\n\nconst TransgraphInput = (props) => {\n  const [isLoading, setisLoading] = useState(false);\n\n  //functions\n  async function parseGraph(fileURL) {\n    const isolateDataCloned = _.cloneDeep(\n      Array.from(props.isolateData.values())\n    );\n    let graph_promise = await text(fileURL).then(function(result) {\n      return result;\n    });\n    //const graph = parseDOTtoJSON(graph_promise);\n    const graph = parseDOTtoCytoscape(graph_promise);\n    if (graph) {\n      const nodeLabels = graph.nodeLabels;\n      const graphData = graph.data;\n      const isolateName_list = [];\n      const sourceName_list = [];\n      isolateDataCloned.forEach(function(d) {\n        isolateName_list.push(d.isolate_name);\n        sourceName_list.push(d.isolate_sourceName);\n      });\n      if (graphData) {\n        //add layout detection here\n        let graph_key = isIsolateOrHost(\n          nodeLabels,\n          isolateName_list,\n          sourceName_list\n        );\n        let graphWithValidation = { graphKey: graph_key, graphData: graphData };\n        props.loadTransgraphData(graphWithValidation);\n      }\n    } else {\n      setisLoading(false);\n      return;\n    }\n  }\n\n  const beforeUploadHandler = (file) => {\n    setisLoading(true);\n    if (file) {\n      const reader = new FileReader();\n      reader.readAsDataURL(file);\n      reader.onloadend = function(evt) {\n        const dataUrl = evt.target.result;\n        parseGraph(dataUrl);\n      };\n    }\n  };\n\n  useEffect(() => {\n    if (props.transgraphData) {\n      setisLoading(false);\n    }\n  }, [props.transgraphData]);\n\n  return (\n    <React.Fragment>\n      <Card\n        title={\"Transmission graph\"}\n        style={{ height: \"100%\" }}\n        headStyle={{ textAlign: \"left\" }}\n        bodyStyle={{ margin: \"0px\", padding: \"5px\" }}\n      >\n        {!props.isolateData && (\n          <Empty\n            image={Empty.PRESENTED_IMAGE_SIMPLE}\n            description={\"Please load the metadata first\"}\n          />\n        )}\n        {props.isolateData && !isLoading && !props.transgraphData && (\n          <React.Fragment>\n            <Dragger\n              accept={\".gv, .dot\"}\n              style={{ padding: \"10px\" }}\n              name=\"file\"\n              multiple={false}\n              action=\"dummy-post\"\n              beforeUpload={beforeUploadHandler}\n            >\n              <h1>\n                <TransgraphInputSVG />\n              </h1>\n            </Dragger>\n          </React.Fragment>\n        )}\n        {props.isolateData && isLoading && !props.transgraphData && <Spin />}\n        {props.isolateData && !isLoading && props.transgraphData && (\n          <React.Fragment>\n            <div style={{ padding: \"10px\" }}>\n              <CheckCircleTwoTone\n                twoToneColor=\"#52c41a\"\n                style={{ fontSize: \"20pt\" }}\n              />\n              <p>Loaded!</p>\n            </div>\n          </React.Fragment>\n        )}\n      </Card>\n    </React.Fragment>\n  );\n};\nexport default TransgraphInput;\n"]},"metadata":{},"sourceType":"module"}