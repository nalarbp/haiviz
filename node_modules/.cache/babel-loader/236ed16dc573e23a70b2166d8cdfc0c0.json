{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Volumes/DATA/BUDI/APP_DEV/haiviz-v04/src/viz_PhyloTreeGantt/chart_PhyloTreeGantt.js\";\n\n/* ============================================================================\nprops.loadTreeData(phylotree);//\n============================================================================ */\nimport React, { useEffect, useRef } from \"react\";\nimport { mean, extent, ascending, max } from \"d3-array\";\nimport { select } from \"d3-selection\";\nimport { scaleLinear, scaleTime } from \"d3-scale\";\nimport { event as currentEvent } from \"d3\";\nimport { zoom } from \"d3-zoom\";\nimport Moment from \"moment\";\nimport { extendMoment } from \"moment-range\";\nimport { cluster } from \"d3-hierarchy\";\nimport \"./style_PhyloTreeGantt.css\";\nimport { Empty, Button } from \"antd\";\nimport { symbol, symbolCircle } from \"d3-shape\";\nimport usePrevious from \"../react_hooks/usePrevious-hook\";\nimport { ZoomInOutlined, ZoomOutOutlined, ClearOutlined } from \"@ant-design/icons\";\nimport { tree_pathGenerator, getColorScaleByObjectAndColType, isTreeHasLength, treeBranchHasParrent } from \"../utils/utils\";\n\nvar _ = require(\"lodash\");\n\nvar moment = extendMoment(Moment);\n\nvar PhyloTreeGanttChart = function PhyloTreeGanttChart(props) {\n  // this constructror will be recalled when props from parent change, so just put it here\n  var phylotreeganttSVGRef = useRef();\n  var phylotreeganttContainerRef = useRef();\n  var zoomStateRef = useRef(null);\n  var initialScaleRef = useRef(null);\n  var yScaleRef = useRef(null);\n  var observedWidth = props.width - 10;\n  var observedHeight = props.height - 80;\n  var phylotreeData = props.phylotreeData;\n\n  var isolateData = _.cloneDeep(Array.from(props.isolateData.values()));\n\n  var tree_percentW = 44;\n  var strip_percentW = 12;\n  var gantt_percentW = 44;\n  var container = select(phylotreeganttContainerRef.current);\n  var svg = select(phylotreeganttSVGRef.current);\n  var margin = {\n    top: 10,\n    right: 10,\n    bottom: 10,\n    left: 10\n  };\n  var treeGantt_width = observedWidth - margin.left - margin.right;\n  var treeGantt_height = observedHeight - margin.top - margin.bottom - 10;\n  var tree_offset = 50;\n  var tree_width = treeGantt_width * (tree_percentW / 100) - tree_offset;\n  var tree_height = treeGantt_height;\n  var gantt_width = treeGantt_width * (gantt_percentW / 100);\n  var strip_width = treeGantt_width * (strip_percentW / 100);\n  var prevDimension = usePrevious(observedWidth + observedHeight);\n  var isInitialDraw = prevDimension && prevDimension < 0 ? true : false;\n  var symbolGenerator = symbol().type(symbolCircle).size(5); //SETTINGS\n\n  var isUserStartResize = props.phylotreeGanttSettings.isUserStartResize;\n  var treeLabelSize = props.phylotreeGanttSettings.textSize; //USE-EFFECTS\n  //update when initialization drawing\n\n  useEffect(function () {\n    if (isUserStartResize) {\n      select(\"#treeGantt_svgGroup\").remove();\n      select(\"#phylotreegantt-zoomButton-container\").style(\"display\", \"none\");\n      select(\"#phylotreegantt-no-drawing\").style(\"display\", \"block\");\n    } else {\n      if (isInitialDraw) {\n        draw();\n      } else {\n        if (props.isUserRedraw) {\n          draw();\n        }\n      }\n    }\n  }, [isInitialDraw, isUserStartResize, props.isUserRedraw]); //update when selected data is changed\n\n  useEffect(function () {\n    if (props.selectedData && props.selectedData.length > 0) {\n      updateBySelectedData();\n    } else if (props.selectedData && props.selectedData.length === 0) {\n      clearSelectedData();\n    }\n  }, [props.selectedData]); //update when color is changed\n\n  useEffect(function () {\n    if (props.colorScale.colorType) {\n      //update strip color\n      svg.selectAll(\".treeGantt_strip\").attr(\"fill\", function (d) {\n        var obj = props.isolateData.get(d.name); //let col = getColorScaleByObject(obj, props.colorScale);\n\n        var col = getColorScaleByObjectAndColType(obj, props.colorScale, d.column);\n        return col;\n      }); //update movement rectangle color\n\n      if (props.colorScale.colorType === \"location\") {\n        svg.selectAll(\".treeGantt-moveLane\").attr(\"fill\", function (d) {\n          var col = props.colorScale.byLocation.get(d.data.location_name);\n\n          if (col) {\n            return col;\n          } else {\n            if (d.location_color) {\n              return d.location_color;\n            } else {\n              return \"gray\";\n            }\n          }\n        });\n      }\n    }\n  }, [props.colorScale]); //update when tree text size is changed\n\n  useEffect(function () {\n    if (treeLabelSize) {\n      svg.selectAll(\".tree_nodeLabel\").style(\"font-size\", \"\".concat(treeLabelSize, \"pt\")).attr(\"dy\", treeLabelSize * 0.5);\n    }\n  }, [treeLabelSize]); //DRAWING\n\n  function draw() {\n    //console.log(\"draw\");\n    // projection the default position x and y\n    var clusterLayout = cluster().size([tree_height, tree_width]).separation(function () {\n      return 2;\n    });\n    var treeLayout = clusterLayout(phylotreeData); //treeLayout = clusterLayout(treeLayout);\n\n    var tree_nodes = treeLayout.descendants();\n    var tree_links = treeLayout.links();\n    var tree_leaves = treeLayout.leaves(); //name:isolateName //x:xcoordinate\n    //scalling\n\n    var treeHasLength = isTreeHasLength(tree_nodes);\n    var branchLengthRange = [];\n    tree_nodes.forEach(function (d) {\n      if (treeHasLength) {\n        branchLengthRange.push(treeBranchHasParrent(d));\n      }\n    });\n    var scaleFactor = 1;\n    var branchLenExtent = extent(branchLengthRange);\n    var branchDepthExtent = extent(tree_nodes.map(function (d) {\n      return d.depth;\n    }));\n    var branchLength = treeHasLength ? branchLenExtent : branchDepthExtent;\n    var branchScale = branchLength[1] * scaleFactor;\n    var y_scale = scaleLinear().domain([0, branchScale]).range([0, tree_width]);\n    initialScaleRef.current = branchScale;\n    yScaleRef.current = y_scale;\n    tree_nodes.forEach(function (d) {\n      if (treeHasLength) {\n        d.y = y_scale(treeBranchHasParrent(d));\n      } else {\n        d.y = y_scale(d.depth);\n      }\n    });\n    var max_x_pos = max(tree_leaves.map(function (d) {\n      return d.y;\n    })) + 10; // ===== CREATE SRIP DATA =====\n\n    var strip_start_posX = tree_width + tree_offset;\n    var strip_start_posY = 0;\n    var strip_leaf_map = new Map();\n    tree_leaves.forEach(function (d) {\n      strip_leaf_map.set(d.data.name, d.x);\n    });\n    var strip_rect_w = strip_width / 6;\n    var strip_rect_h = getLeafDistance(strip_leaf_map);\n    var strip_var = [\"species\", \"sourceType\", \"location\", \"profile1\", \"profile2\", \"profile3\"];\n    var strip_title_data = [];\n    var strip_index_data = {\n      label: \"Strip index: \",\n      x: 2,\n      y: tree_height + 10\n    };\n    strip_var.forEach(function (strip, i) {\n      var res = {\n        idx: i + 1,\n        label: strip,\n        x: strip_start_posX + i * strip_rect_w + strip_rect_w / 2 - 2,\n        y: strip_start_posY - 1\n      };\n      strip_title_data.push(res);\n      var indexText = \"\".concat(i + 1, \": \").concat(getStripTitle(strip), \", \");\n      strip_index_data.label = strip_index_data.label.concat(indexText);\n    });\n    var strip_data = [];\n    tree_leaves.forEach(function (leaf) {\n      strip_var.forEach(function (strip, j) {\n        var obj = props.isolateData.get(leaf.data.name);\n        var res = {\n          name: leaf.data.name,\n          column: strip,\n          x: strip_start_posX + j * strip_rect_w,\n          y: leaf.x - strip_rect_h / 2,\n          col: getColorScaleByObjectAndColType(obj, props.colorScale, strip)\n        };\n        strip_data.push(res);\n      });\n    }); // ===== CREATE GANTT DATA =====\n\n    var isoColDates = isolateData.map(function (d) {\n      return d.isolate_colDate;\n    });\n    var movementDates = props.movementData.flatMap(function (d) {\n      return [d.start_date, d.end_date];\n    });\n    var dateRange = extent(isoColDates.concat(movementDates));\n    var ganttData = []; //{name:iso, x, y, data}\n\n    tree_leaves.forEach(function (leaf) {\n      var data = getMoveDataByIsolateName(leaf.data.name, props.isolateData);\n\n      if (data.length > 0) {\n        data.forEach(function (d) {\n          ganttData.push({\n            name: leaf.data.name,\n            data: d\n          });\n        });\n      }\n    }); //scale\n\n    var scale_x = scaleTime().domain([moment(dateRange[0]).subtract(1, \"days\"), moment(dateRange[1]).add(1, \"days\")]).range([treeGantt_width - gantt_width, treeGantt_width]); //axis\n    //clean previous drawing artifacts\n\n    select(\"#phylotreegantt-no-drawing\").style(\"display\", \"none\");\n    select(\"#phylotreegantt-zoomButton-container\").style(\"display\", \"block\");\n    select(\"#treeGantt_svgGroup\").remove(); //set svg attributes\n\n    svg.attr(\"width\", treeGantt_width + margin.left + margin.right).attr(\"height\", treeGantt_height + margin.top + margin.bottom); //make group root of svg for transformation purpose\n\n    var svgGroup = svg.append(\"g\").attr(\"id\", \"treeGantt_svgGroup\").attr(\"transform\", function () {\n      if (zoomStateRef.current) {\n        return \"translate(\" + zoomStateRef.current.x + \",\" + zoomStateRef.current.y + \")\" + \"scale(\" + zoomStateRef.current.k + \")\";\n      } else {\n        return \"translate(\" + margin.left + \",\" + margin.top + \")scale(1)\";\n      }\n    }); //==== DRAW TREE PANEL ======================================\n\n    var treePanelGroup = svgGroup.append(\"g\").attr(\"id\", \"treeGantt_treePanelGroup\"); //make links group for link's line and label, this must be rendered beneath the nodes group\n\n    var linksGroup = treePanelGroup.append(\"g\").attr(\"id\", \"tree_linksGroup\"); //draw link's line on it\n\n    linksGroup.selectAll(\".tree_link\").data(tree_links).enter().append(\"path\").attr(\"class\", \"tree_link\").attr(\"d\", function (d) {\n      return tree_pathGenerator(d);\n    }).attr(\"stroke\", \"black\").attr(\"fill\", \"none\");\n    var extensionLineGroup = treePanelGroup.append(\"g\").attr(\"id\", \"treeGantt_extensionLineGroup\");\n    extensionLineGroup.selectAll(\".treeGantt_nodeExtensionLine\").data(tree_leaves).enter().append(\"line\").attr(\"class\", \"treeGantt_nodeExtensionLine\").attr(\"x1\", function (d) {\n      return d.y + 1;\n    }).attr(\"y1\", function (d) {\n      return d.x;\n    }).attr(\"x2\", function () {\n      return max_x_pos;\n    }).attr(\"y2\", function (d) {\n      return d.x;\n    }).attr(\"stroke\", \"gray\").attr(\"stroke-dasharray\", \"1\").attr(\"stroke-width\", \"0.5px\"); //make nodes group and draw nodes on it\n\n    var nodesGroup = treePanelGroup.append(\"g\").attr(\"id\", \"tree_nodesGroup\"); //draw node circle\n\n    nodesGroup.selectAll(\".tree_node\").data(tree_nodes).enter().append(\"g\").attr(\"class\", function (n) {\n      if (n.children) {\n        if (n.depth === 0) {\n          return \"tree_root node\";\n        } else {\n          return \"tree_inner node\";\n        }\n      } else {\n        return \"tree_leaf node\";\n      }\n    }).attr(\"transform\", function (d) {\n      return \"translate(\" + d.y + \",\" + d.x + \")\";\n    }); //draw internal node (branch circle)\n\n    nodesGroup.selectAll(\"g.tree_inner.node\").append(\"path\").attr(\"class\", \"tree_innerNode\").attr(\"d\", symbolGenerator).style(\"cursor\", \"pointer\").style(\"opacity\", 0).attr(\"fill\", \"black\").on(\"click\", function (d) {\n      var currentLeaves = d.leaves();\n\n      if (currentLeaves && currentLeaves.length > 0) {\n        var leafNames = currentLeaves.map(function (l) {\n          return l.data.name;\n        });\n        props.setSelectedData(leafNames);\n      }\n    }); //draw leaf node (taxa circle)\n    // nodesGroup\n    //   .selectAll(\"g.tree_leaf.node\")\n    //   .append(\"circle\")\n    //   .attr(\"class\", \"tree_nodeCircle\")\n    //   .attr(\"d\", symbolGenerator)\n    //   .style(\"cursor\", \"pointer\")\n    //   .attr(\"fill\", \"black\")\n    //   .on(\"click\", (d) => {\n    //     props.setSelectedData([d.data.name]);\n    //   });\n    // draw label\n\n    nodesGroup.selectAll(\"g.tree_leaf.node\").append(\"text\").attr(\"class\", \"tree_nodeLabel\").attr(\"text-anchor\", \"start\").attr(\"fill\", \"black\").attr(\"dy\", treeLabelSize * 0.5).attr(\"transform\", function (d) {\n      var gap = max_x_pos - d.y;\n      return \"translate(\" + gap + \",\" + 0 + \")\";\n    }).style(\"opacity\", 1).style(\"font-size\", \"\".concat(treeLabelSize, \"pt\")).text(function (d) {\n      return d.data.name;\n    }); //========= DRAW STRIP PANEL ============================\n\n    var stripPanelGroup = svgGroup.append(\"g\").attr(\"id\", \"treeGantt_stripPanelGroup\");\n    var stripGroup = stripPanelGroup.append(\"g\").attr(\"id\", \"treeGantt_stripGroup\"); //draw strip rectangles\n\n    stripGroup.selectAll(\".treeGantt_strip\").data(strip_data).enter().append(\"rect\").attr(\"class\", \"treeGantt_strip\").attr(\"stroke\", \"white\").attr(\"stroke-width\", \"0.3px\").attr(\"x\", function (d) {\n      return d.x;\n    }).attr(\"y\", function (d) {\n      return d.y;\n    }).attr(\"width\", strip_rect_w).attr(\"height\", strip_rect_h).attr(\"fill\", function (d) {\n      return d.col;\n    }).style(\"opacity\", 1).append(\"title\").text(function (d) {\n      return d.name;\n    });\n    var stripTitleGroup = stripPanelGroup.append(\"g\").attr(\"id\", \"treeGantt_stripTitleGroup\"); //draw strip title\n\n    stripTitleGroup.selectAll(\".treeGantt_stripTitle\").data(strip_title_data).enter().append(\"text\").attr(\"class\", \"treeGantt_stripTitle\").attr(\"x\", function (d) {\n      return d.x;\n    }).attr(\"y\", function (d) {\n      return d.y;\n    }).style(\"font-size\", \"5pt\").style(\"text-anchor\", \"start\").text(function (d) {\n      return d.idx;\n    });\n    var stripIndexGroup = stripPanelGroup.append(\"g\").attr(\"id\", \"treeGantt_stripIndexGroup\"); //draw strip index title\n\n    stripIndexGroup.selectAll(\".treeGantt_stripIndex\").data([strip_index_data]).enter().append(\"text\").attr(\"class\", \"treeGantt_stripIndex\").attr(\"x\", function (d) {\n      return d.x;\n    }).attr(\"y\", function (d) {\n      return d.y;\n    }).style(\"font-size\", \"5pt\").style(\"text-anchor\", \"start\").text(function (d) {\n      return d.label;\n    }); //===== DRAW GANTT PANELL ============================\n\n    var ganttPanelGroup = svgGroup.append(\"g\").attr(\"id\", \"treeGantt_ganttPanelGroup\"); //create background lane\n\n    var backgroundLaneGroup = ganttPanelGroup.append(\"g\").attr(\"id\", \"treeGantt-backgroundLaneGroup\");\n    backgroundLaneGroup.selectAll(\".treeGantt-backgroundLane\").data(tree_leaves).enter().append(\"rect\").attr(\"class\", \"treeGantt-backgroundLane\").attr(\"stroke\", \"gray\").attr(\"stroke-width\", \"0.5px\").attr(\"fill\", \"none\").attr(\"x\", function () {\n      return scale_x(dateRange[0]);\n    }).attr(\"y\", function (d) {\n      var res = strip_leaf_map.get(d.data.name) - strip_rect_h / 2;\n      return res;\n    }).attr(\"width\", function () {\n      return scale_x(dateRange[1]) - scale_x(dateRange[0]);\n    }).attr(\"height\", strip_rect_h); //create rectangle movement\n\n    var moveLaneGroup = ganttPanelGroup.append(\"g\").attr(\"id\", \"treeGantt-moveLaneGroup\");\n    moveLaneGroup.selectAll(\".treeGantt-moveLane\").data(ganttData).enter().append(\"rect\").attr(\"class\", \"treeGantt-moveLane\").attr(\"x\", function (d) {\n      return scale_x(d.data.start_date);\n    }).attr(\"y\", function (d) {\n      var res = strip_leaf_map.get(d.name) - strip_rect_h / 2;\n      return res;\n    }).attr(\"height\", strip_rect_h).attr(\"width\", function (d) {\n      var diffRange = moment.range(d.data.start_date, d.data.end_date).diff(\"days\");\n\n      if (diffRange === 0) {\n        return scale_x(d.data.end_date.endOf(\"day\")) - scale_x(d.data.start_date.startOf(\"day\"));\n      } else {\n        return scale_x(d.data.end_date) - scale_x(d.data.start_date);\n      }\n    }).attr(\"fill\", function (d) {\n      var col = props.colorScale.byLocation.get(d.data.location_name);\n\n      if (col) {\n        return col;\n      } else {\n        if (d.location_color) {\n          return d.location_color;\n        } else {\n          return \"gray\";\n        }\n      }\n    }).style(\"opacity\", 1).append(\"title\").text(function (d) {\n      return d.data.location_name;\n    }); // ========= DRAW ISOLATE COLLECTION DATE ==========\n\n    var isoCollectionGroup = ganttPanelGroup.append(\"g\").attr(\"id\", \"treeGantt-isoCollectionGroup\");\n    isoCollectionGroup.selectAll(\".treeGantt-isoCollection\").data(isolateData).enter().append(\"circle\").attr(\"class\", \"treeGantt-isoCollection\").attr(\"r\", 0.3 * strip_rect_h).attr(\"fill\", \"black\").attr(\"cx\", function (d) {\n      return scale_x(d.isolate_colDate);\n    }).style(\"opacity\", 1).attr(\"cy\", function (d) {\n      var res = strip_leaf_map.get(d.isolate_name);\n      return res;\n    });\n\n    if (props.selectedData && props.selectedData.length > 0) {\n      updateBySelectedData();\n    } //zoom functionality\n\n\n    var zoomHandler = zoom().scaleExtent([0.1, 8]).on(\"zoom\", function () {\n      zoomStateRef.current = currentEvent.transform;\n      select(\"#treeGantt_svgGroup\").attr(\"transform\", currentEvent.transform);\n    }).filter(function () {\n      return !currentEvent.button && currentEvent.type !== \"wheel\";\n    });\n    container.select(\"#phylotreegantt-zoomIn\").on(\"click\", function () {\n      zoomHandler.scaleBy(svg.transition().duration(500), 1.5);\n    });\n    container.select(\"#phylotreegantt-zoomOut\").on(\"click\", function () {\n      zoomHandler.scaleBy(svg.transition().duration(500), 0.5);\n    });\n    svg.call(zoomHandler);\n  }\n\n  function updateBySelectedData() {\n    //update tree leaf label color\n    svg.selectAll(\".tree_nodeLabel\").attr(\"fill\", function (d) {\n      if (props.selectedData.indexOf(d.data.name) !== -1) {\n        return \"red\";\n      } else {\n        return \"black\";\n      }\n    }); //update strip opacity\n\n    svg.selectAll(\".treeGantt_strip\").style(\"opacity\", function (d) {\n      if (props.selectedData.indexOf(d.name) !== -1) {\n        return 1;\n      } else {\n        return 0.2;\n      }\n    }); //update movement opacity\n\n    svg.selectAll(\".treeGantt-moveLane\").style(\"opacity\", function (d) {\n      if (props.selectedData.indexOf(d.name) !== -1) {\n        return 1;\n      } else {\n        return 0.2;\n      }\n    }); //update collection date marker opacity\n\n    svg.selectAll(\".treeGantt-isoCollection\").style(\"opacity\", function (d) {\n      if (props.selectedData.indexOf(d.isolate_name) !== -1) {\n        return 1;\n      } else {\n        return 0.2;\n      }\n    });\n  }\n\n  function clearSelectedData() {\n    //update tree leaf label color\n    svg.selectAll(\".tree_nodeLabel\").attr(\"fill\", \"black\"); //update strip opacity\n\n    svg.selectAll(\".treeGantt_strip\").style(\"opacity\", 1); //update movement opacity\n\n    svg.selectAll(\".treeGantt-moveLane\").style(\"opacity\", 1); //update collection date marker opacity\n\n    svg.selectAll(\".treeGantt-isoCollection\").style(\"opacity\", 1);\n  }\n\n  function getLeafDistance(leaves) {\n    //leaves: map\n    //get list of sorted leaf's x position\n    var leaves_x = _.cloneDeep(Array.from(leaves.values()));\n\n    if (leaves_x && leaves_x.length > 0) {\n      var sorted_leaves_x = leaves_x.sort(function (a, b) {\n        return ascending(a, b);\n      });\n      var distances = [];\n\n      for (var i = 1; i < sorted_leaves_x.length; i++) {\n        var curr = sorted_leaves_x[i];\n        var prev = sorted_leaves_x[i - 1];\n        var dist = curr - prev;\n        distances.push(dist);\n      }\n\n      var avg_dist = mean(distances);\n      return avg_dist;\n    } else {\n      alert(\"Error in getting distance between tree leaf\");\n      return null;\n    }\n  }\n\n  function getMoveDataByIsolateName(isoName, isoData) {\n    var sourceName = isoData.get(isoName).isolate_sourceName;\n    var moveDataList = props.movementData.filter(function (d) {\n      return d.source_name === sourceName;\n    });\n    return moveDataList;\n  } //HANDLERS\n\n\n  var clearSelectedDataHandler = function clearSelectedDataHandler() {\n    props.setSelectedData([]);\n  }; //UTILS\n\n\n  var getStripTitle = function getStripTitle(title) {\n    switch (title) {\n      case \"species\":\n        return \"Species\";\n\n      case \"sourceType\":\n        return \"Source type\";\n\n      case \"location\":\n        return \"Location\";\n\n      case \"profile1\":\n        return \"Profile 1\";\n\n      case \"profile2\":\n        return \"Profile 2\";\n\n      case \"profile3\":\n        return \"Profile 3\";\n\n      default:\n        return \"N/A\";\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 657,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"phylotreeganttContainer\",\n    ref: phylotreeganttContainerRef,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 658,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"phylotreegantt-no-drawing\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 659,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Empty, {\n    description: \"No chart: please click redraw button\",\n    image: Empty.PRESENTED_IMAGE_SIMPLE,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 660,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"phylotreegantt-zoomButton-container\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 665,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    id: \"phylotreegantt-zoomIn\",\n    size: \"medium\",\n    shape: \"circle\",\n    icon: /*#__PURE__*/React.createElement(ZoomInOutlined, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 670,\n        columnNumber: 19\n      }\n    }),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 666,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    id: \"phylotreegantt-zoomOut\",\n    size: \"medium\",\n    shape: \"circle\",\n    icon: /*#__PURE__*/React.createElement(ZoomOutOutlined, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 676,\n        columnNumber: 19\n      }\n    }),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 672,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    title: \"Clear selection\",\n    shape: \"circle\",\n    id: \"phylotreegantt-clearSelection\",\n    size: \"medium\",\n    icon: /*#__PURE__*/React.createElement(ClearOutlined, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 683,\n        columnNumber: 19\n      }\n    }),\n    onClick: clearSelectedDataHandler,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 678,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"phylotreegantt-tooltip\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 687,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"svg\", {\n    id: \"phylotreegantt-svg\",\n    ref: phylotreeganttSVGRef,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 688,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default PhyloTreeGanttChart;","map":{"version":3,"sources":["/Volumes/DATA/BUDI/APP_DEV/haiviz-v04/src/viz_PhyloTreeGantt/chart_PhyloTreeGantt.js"],"names":["React","useEffect","useRef","mean","extent","ascending","max","select","scaleLinear","scaleTime","event","currentEvent","zoom","Moment","extendMoment","cluster","Empty","Button","symbol","symbolCircle","usePrevious","ZoomInOutlined","ZoomOutOutlined","ClearOutlined","tree_pathGenerator","getColorScaleByObjectAndColType","isTreeHasLength","treeBranchHasParrent","_","require","moment","PhyloTreeGanttChart","props","phylotreeganttSVGRef","phylotreeganttContainerRef","zoomStateRef","initialScaleRef","yScaleRef","observedWidth","width","observedHeight","height","phylotreeData","isolateData","cloneDeep","Array","from","values","tree_percentW","strip_percentW","gantt_percentW","container","current","svg","margin","top","right","bottom","left","treeGantt_width","treeGantt_height","tree_offset","tree_width","tree_height","gantt_width","strip_width","prevDimension","isInitialDraw","symbolGenerator","type","size","isUserStartResize","phylotreeGanttSettings","treeLabelSize","textSize","remove","style","draw","isUserRedraw","selectedData","length","updateBySelectedData","clearSelectedData","colorScale","colorType","selectAll","attr","d","obj","get","name","col","column","byLocation","data","location_name","location_color","clusterLayout","separation","treeLayout","tree_nodes","descendants","tree_links","links","tree_leaves","leaves","treeHasLength","branchLengthRange","forEach","push","scaleFactor","branchLenExtent","branchDepthExtent","map","depth","branchLength","branchScale","y_scale","domain","range","y","max_x_pos","strip_start_posX","strip_start_posY","strip_leaf_map","Map","set","x","strip_rect_w","strip_rect_h","getLeafDistance","strip_var","strip_title_data","strip_index_data","label","strip","i","res","idx","indexText","getStripTitle","concat","strip_data","leaf","j","isoColDates","isolate_colDate","movementDates","movementData","flatMap","start_date","end_date","dateRange","ganttData","getMoveDataByIsolateName","scale_x","subtract","add","svgGroup","append","k","treePanelGroup","linksGroup","enter","extensionLineGroup","nodesGroup","n","children","on","currentLeaves","leafNames","l","setSelectedData","gap","text","stripPanelGroup","stripGroup","stripTitleGroup","stripIndexGroup","ganttPanelGroup","backgroundLaneGroup","moveLaneGroup","diffRange","diff","endOf","startOf","isoCollectionGroup","isolate_name","zoomHandler","scaleExtent","transform","filter","button","scaleBy","transition","duration","call","indexOf","leaves_x","sorted_leaves_x","sort","a","b","distances","curr","prev","dist","avg_dist","alert","isoName","isoData","sourceName","isolate_sourceName","moveDataList","source_name","clearSelectedDataHandler","title","PRESENTED_IMAGE_SIMPLE"],"mappings":"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","sourcesContent":["/* ============================================================================\nprops.loadTreeData(phylotree);//\n============================================================================ */\nimport React, { useEffect, useRef } from \"react\";\nimport { mean, extent, ascending, max } from \"d3-array\";\nimport { select } from \"d3-selection\";\nimport { scaleLinear, scaleTime } from \"d3-scale\";\nimport { event as currentEvent } from \"d3\";\nimport { zoom } from \"d3-zoom\";\nimport Moment from \"moment\";\nimport { extendMoment } from \"moment-range\";\nimport { cluster } from \"d3-hierarchy\";\nimport \"./style_PhyloTreeGantt.css\";\nimport { Empty, Button } from \"antd\";\nimport { symbol, symbolCircle } from \"d3-shape\";\nimport usePrevious from \"../react_hooks/usePrevious-hook\";\nimport {\n  ZoomInOutlined,\n  ZoomOutOutlined,\n  ClearOutlined,\n} from \"@ant-design/icons\";\nimport {\n  tree_pathGenerator,\n  getColorScaleByObjectAndColType,\n  isTreeHasLength,\n  treeBranchHasParrent,\n} from \"../utils/utils\";\n\nconst _ = require(\"lodash\");\nconst moment = extendMoment(Moment);\nconst PhyloTreeGanttChart = (props) => {\n  // this constructror will be recalled when props from parent change, so just put it here\n  const phylotreeganttSVGRef = useRef();\n  const phylotreeganttContainerRef = useRef();\n  const zoomStateRef = useRef(null);\n  const initialScaleRef = useRef(null);\n  const yScaleRef = useRef(null);\n  const observedWidth = props.width - 10;\n  const observedHeight = props.height - 80;\n  const phylotreeData = props.phylotreeData;\n  const isolateData = _.cloneDeep(Array.from(props.isolateData.values()));\n  const tree_percentW = 44;\n  const strip_percentW = 12;\n  const gantt_percentW = 44;\n  const container = select(phylotreeganttContainerRef.current);\n  const svg = select(phylotreeganttSVGRef.current);\n  const margin = { top: 10, right: 10, bottom: 10, left: 10 };\n  const treeGantt_width = observedWidth - margin.left - margin.right;\n  const treeGantt_height = observedHeight - margin.top - margin.bottom - 10;\n  const tree_offset = 50;\n  const tree_width = treeGantt_width * (tree_percentW / 100) - tree_offset;\n  const tree_height = treeGantt_height;\n  const gantt_width = treeGantt_width * (gantt_percentW / 100);\n  const strip_width = treeGantt_width * (strip_percentW / 100);\n  const prevDimension = usePrevious(observedWidth + observedHeight);\n  const isInitialDraw = prevDimension && prevDimension < 0 ? true : false;\n  const symbolGenerator = symbol()\n    .type(symbolCircle)\n    .size(5);\n\n  //SETTINGS\n  const isUserStartResize = props.phylotreeGanttSettings.isUserStartResize;\n  const treeLabelSize = props.phylotreeGanttSettings.textSize;\n  //USE-EFFECTS\n  //update when initialization drawing\n  useEffect(() => {\n    if (isUserStartResize) {\n      select(\"#treeGantt_svgGroup\").remove();\n      select(\"#phylotreegantt-zoomButton-container\").style(\"display\", \"none\");\n      select(\"#phylotreegantt-no-drawing\").style(\"display\", \"block\");\n    } else {\n      if (isInitialDraw) {\n        draw();\n      } else {\n        if (props.isUserRedraw) {\n          draw();\n        }\n      }\n    }\n  }, [isInitialDraw, isUserStartResize, props.isUserRedraw]);\n  //update when selected data is changed\n  useEffect(() => {\n    if (props.selectedData && props.selectedData.length > 0) {\n      updateBySelectedData();\n    } else if (props.selectedData && props.selectedData.length === 0) {\n      clearSelectedData();\n    }\n  }, [props.selectedData]);\n  //update when color is changed\n  useEffect(() => {\n    if (props.colorScale.colorType) {\n      //update strip color\n      svg.selectAll(\".treeGantt_strip\").attr(\"fill\", (d) => {\n        let obj = props.isolateData.get(d.name);\n        //let col = getColorScaleByObject(obj, props.colorScale);\n        let col = getColorScaleByObjectAndColType(\n          obj,\n          props.colorScale,\n          d.column\n        );\n        return col;\n      });\n      //update movement rectangle color\n      if (props.colorScale.colorType === \"location\") {\n        svg.selectAll(\".treeGantt-moveLane\").attr(\"fill\", (d) => {\n          let col = props.colorScale.byLocation.get(d.data.location_name);\n          if (col) {\n            return col;\n          } else {\n            if (d.location_color) {\n              return d.location_color;\n            } else {\n              return \"gray\";\n            }\n          }\n        });\n      }\n    }\n  }, [props.colorScale]);\n  //update when tree text size is changed\n  useEffect(() => {\n    if (treeLabelSize) {\n      svg\n        .selectAll(\".tree_nodeLabel\")\n        .style(\"font-size\", `${treeLabelSize}pt`)\n        .attr(\"dy\", treeLabelSize * 0.5);\n    }\n  }, [treeLabelSize]);\n\n  //DRAWING\n  function draw() {\n    //console.log(\"draw\");\n    // projection the default position x and y\n    const clusterLayout = cluster()\n      .size([tree_height, tree_width])\n      .separation(function() {\n        return 2;\n      });\n    let treeLayout = clusterLayout(phylotreeData);\n    //treeLayout = clusterLayout(treeLayout);\n\n    const tree_nodes = treeLayout.descendants();\n    const tree_links = treeLayout.links();\n    const tree_leaves = treeLayout.leaves(); //name:isolateName //x:xcoordinate\n\n    //scalling\n    const treeHasLength = isTreeHasLength(tree_nodes);\n    const branchLengthRange = [];\n    tree_nodes.forEach((d) => {\n      if (treeHasLength) {\n        branchLengthRange.push(treeBranchHasParrent(d));\n      }\n    });\n    const scaleFactor = 1;\n    const branchLenExtent = extent(branchLengthRange);\n    const branchDepthExtent = extent(tree_nodes.map((d) => d.depth));\n    const branchLength = treeHasLength ? branchLenExtent : branchDepthExtent;\n    const branchScale = branchLength[1] * scaleFactor;\n    const y_scale = scaleLinear()\n      .domain([0, branchScale])\n      .range([0, tree_width]);\n\n    initialScaleRef.current = branchScale;\n    yScaleRef.current = y_scale;\n\n    tree_nodes.forEach((d) => {\n      if (treeHasLength) {\n        d.y = y_scale(treeBranchHasParrent(d));\n      } else {\n        d.y = y_scale(d.depth);\n      }\n    });\n\n    const max_x_pos = max(tree_leaves.map((d) => d.y)) + 10;\n\n    // ===== CREATE SRIP DATA =====\n    const strip_start_posX = tree_width + tree_offset;\n    const strip_start_posY = 0;\n    const strip_leaf_map = new Map();\n    tree_leaves.forEach((d) => {\n      strip_leaf_map.set(d.data.name, d.x);\n    });\n    const strip_rect_w = strip_width / 6;\n    const strip_rect_h = getLeafDistance(strip_leaf_map);\n    const strip_var = [\n      \"species\",\n      \"sourceType\",\n      \"location\",\n      \"profile1\",\n      \"profile2\",\n      \"profile3\",\n    ];\n    let strip_title_data = [];\n    let strip_index_data = {\n      label: \"Strip index: \",\n      x: 2,\n      y: tree_height + 10,\n    };\n    strip_var.forEach((strip, i) => {\n      let res = {\n        idx: i + 1,\n        label: strip,\n        x: strip_start_posX + i * strip_rect_w + strip_rect_w / 2 - 2,\n        y: strip_start_posY - 1,\n      };\n      strip_title_data.push(res);\n      let indexText = `${i + 1}: ${getStripTitle(strip)}, `;\n      strip_index_data.label = strip_index_data.label.concat(indexText);\n    });\n\n    let strip_data = [];\n    tree_leaves.forEach((leaf) => {\n      strip_var.forEach((strip, j) => {\n        let obj = props.isolateData.get(leaf.data.name);\n        let res = {\n          name: leaf.data.name,\n          column: strip,\n          x: strip_start_posX + j * strip_rect_w,\n          y: leaf.x - strip_rect_h / 2,\n          col: getColorScaleByObjectAndColType(obj, props.colorScale, strip),\n        };\n        strip_data.push(res);\n      });\n    });\n    // ===== CREATE GANTT DATA =====\n    const isoColDates = isolateData.map((d) => d.isolate_colDate);\n    const movementDates = props.movementData.flatMap((d) => [\n      d.start_date,\n      d.end_date,\n    ]);\n    const dateRange = extent(isoColDates.concat(movementDates));\n    let ganttData = []; //{name:iso, x, y, data}\n    tree_leaves.forEach((leaf) => {\n      let data = getMoveDataByIsolateName(leaf.data.name, props.isolateData);\n      if (data.length > 0) {\n        data.forEach((d) => {\n          ganttData.push({ name: leaf.data.name, data: d });\n        });\n      }\n    });\n\n    //scale\n    const scale_x = scaleTime()\n      .domain([\n        moment(dateRange[0]).subtract(1, \"days\"),\n        moment(dateRange[1]).add(1, \"days\"),\n      ])\n      .range([treeGantt_width - gantt_width, treeGantt_width]);\n\n    //axis\n\n    //clean previous drawing artifacts\n    select(\"#phylotreegantt-no-drawing\").style(\"display\", \"none\");\n    select(\"#phylotreegantt-zoomButton-container\").style(\"display\", \"block\");\n    select(\"#treeGantt_svgGroup\").remove();\n\n    //set svg attributes\n    svg\n      .attr(\"width\", treeGantt_width + margin.left + margin.right)\n      .attr(\"height\", treeGantt_height + margin.top + margin.bottom);\n\n    //make group root of svg for transformation purpose\n    let svgGroup = svg\n      .append(\"g\")\n      .attr(\"id\", \"treeGantt_svgGroup\")\n      .attr(\"transform\", function() {\n        if (zoomStateRef.current) {\n          return (\n            \"translate(\" +\n            zoomStateRef.current.x +\n            \",\" +\n            zoomStateRef.current.y +\n            \")\" +\n            \"scale(\" +\n            zoomStateRef.current.k +\n            \")\"\n          );\n        } else {\n          return \"translate(\" + margin.left + \",\" + margin.top + \")scale(1)\";\n        }\n      });\n\n    //==== DRAW TREE PANEL ======================================\n    let treePanelGroup = svgGroup\n      .append(\"g\")\n      .attr(\"id\", \"treeGantt_treePanelGroup\");\n\n    //make links group for link's line and label, this must be rendered beneath the nodes group\n    let linksGroup = treePanelGroup.append(\"g\").attr(\"id\", \"tree_linksGroup\");\n    //draw link's line on it\n    linksGroup\n      .selectAll(\".tree_link\")\n      .data(tree_links)\n      .enter()\n      .append(\"path\")\n      .attr(\"class\", \"tree_link\")\n      .attr(\"d\", (d) => tree_pathGenerator(d))\n      .attr(\"stroke\", \"black\")\n      .attr(\"fill\", \"none\");\n\n    let extensionLineGroup = treePanelGroup\n      .append(\"g\")\n      .attr(\"id\", \"treeGantt_extensionLineGroup\");\n    extensionLineGroup\n      .selectAll(\".treeGantt_nodeExtensionLine\")\n      .data(tree_leaves)\n      .enter()\n      .append(\"line\")\n      .attr(\"class\", \"treeGantt_nodeExtensionLine\")\n      .attr(\"x1\", (d) => d.y + 1)\n      .attr(\"y1\", (d) => d.x)\n      .attr(\"x2\", () => max_x_pos)\n      .attr(\"y2\", (d) => d.x)\n      .attr(\"stroke\", \"gray\")\n      .attr(\"stroke-dasharray\", \"1\")\n      .attr(\"stroke-width\", \"0.5px\");\n\n    //make nodes group and draw nodes on it\n    let nodesGroup = treePanelGroup.append(\"g\").attr(\"id\", \"tree_nodesGroup\");\n    //draw node circle\n    nodesGroup\n      .selectAll(\".tree_node\")\n      .data(tree_nodes)\n      .enter()\n      .append(\"g\")\n      .attr(\"class\", function(n) {\n        if (n.children) {\n          if (n.depth === 0) {\n            return \"tree_root node\";\n          } else {\n            return \"tree_inner node\";\n          }\n        } else {\n          return \"tree_leaf node\";\n        }\n      })\n      .attr(\"transform\", function(d) {\n        return \"translate(\" + d.y + \",\" + d.x + \")\";\n      });\n\n    //draw internal node (branch circle)\n    nodesGroup\n      .selectAll(\"g.tree_inner.node\")\n      .append(\"path\")\n      .attr(\"class\", \"tree_innerNode\")\n      .attr(\"d\", symbolGenerator)\n      .style(\"cursor\", \"pointer\")\n      .style(\"opacity\", 0)\n      .attr(\"fill\", \"black\")\n      .on(\"click\", (d) => {\n        let currentLeaves = d.leaves();\n        if (currentLeaves && currentLeaves.length > 0) {\n          let leafNames = currentLeaves.map((l) => l.data.name);\n          props.setSelectedData(leafNames);\n        }\n      });\n\n    //draw leaf node (taxa circle)\n    // nodesGroup\n    //   .selectAll(\"g.tree_leaf.node\")\n    //   .append(\"circle\")\n    //   .attr(\"class\", \"tree_nodeCircle\")\n    //   .attr(\"d\", symbolGenerator)\n    //   .style(\"cursor\", \"pointer\")\n    //   .attr(\"fill\", \"black\")\n    //   .on(\"click\", (d) => {\n    //     props.setSelectedData([d.data.name]);\n    //   });\n\n    // draw label\n    nodesGroup\n      .selectAll(\"g.tree_leaf.node\")\n      .append(\"text\")\n      .attr(\"class\", \"tree_nodeLabel\")\n      .attr(\"text-anchor\", \"start\")\n      .attr(\"fill\", \"black\")\n      .attr(\"dy\", treeLabelSize * 0.5)\n      .attr(\"transform\", function(d) {\n        let gap = max_x_pos - d.y;\n        return \"translate(\" + gap + \",\" + 0 + \")\";\n      })\n      .style(\"opacity\", 1)\n      .style(\"font-size\", `${treeLabelSize}pt`)\n      .text((d) => d.data.name);\n\n    //========= DRAW STRIP PANEL ============================\n    let stripPanelGroup = svgGroup\n      .append(\"g\")\n      .attr(\"id\", \"treeGantt_stripPanelGroup\");\n\n    let stripGroup = stripPanelGroup\n      .append(\"g\")\n      .attr(\"id\", \"treeGantt_stripGroup\");\n    //draw strip rectangles\n    stripGroup\n      .selectAll(\".treeGantt_strip\")\n      .data(strip_data)\n      .enter()\n      .append(\"rect\")\n      .attr(\"class\", \"treeGantt_strip\")\n      .attr(\"stroke\", \"white\")\n      .attr(\"stroke-width\", \"0.3px\")\n      .attr(\"x\", (d) => d.x)\n      .attr(\"y\", (d) => d.y)\n      .attr(\"width\", strip_rect_w)\n      .attr(\"height\", strip_rect_h)\n      .attr(\"fill\", (d) => d.col)\n      .style(\"opacity\", 1)\n      .append(\"title\")\n      .text((d) => d.name);\n\n    let stripTitleGroup = stripPanelGroup\n      .append(\"g\")\n      .attr(\"id\", \"treeGantt_stripTitleGroup\");\n    //draw strip title\n    stripTitleGroup\n      .selectAll(\".treeGantt_stripTitle\")\n      .data(strip_title_data)\n      .enter()\n      .append(\"text\")\n      .attr(\"class\", \"treeGantt_stripTitle\")\n      .attr(\"x\", (d) => d.x)\n      .attr(\"y\", (d) => d.y)\n      .style(\"font-size\", \"5pt\")\n      .style(\"text-anchor\", \"start\")\n      .text((d) => d.idx);\n\n    let stripIndexGroup = stripPanelGroup\n      .append(\"g\")\n      .attr(\"id\", \"treeGantt_stripIndexGroup\");\n    //draw strip index title\n    stripIndexGroup\n      .selectAll(\".treeGantt_stripIndex\")\n      .data([strip_index_data])\n      .enter()\n      .append(\"text\")\n      .attr(\"class\", \"treeGantt_stripIndex\")\n      .attr(\"x\", (d) => d.x)\n      .attr(\"y\", (d) => d.y)\n      .style(\"font-size\", \"5pt\")\n      .style(\"text-anchor\", \"start\")\n      .text((d) => d.label);\n\n    //===== DRAW GANTT PANELL ============================\n    let ganttPanelGroup = svgGroup\n      .append(\"g\")\n      .attr(\"id\", \"treeGantt_ganttPanelGroup\");\n    //create background lane\n    let backgroundLaneGroup = ganttPanelGroup\n      .append(\"g\")\n      .attr(\"id\", \"treeGantt-backgroundLaneGroup\");\n    backgroundLaneGroup\n      .selectAll(\".treeGantt-backgroundLane\")\n      .data(tree_leaves)\n      .enter()\n      .append(\"rect\")\n      .attr(\"class\", \"treeGantt-backgroundLane\")\n      .attr(\"stroke\", \"gray\")\n      .attr(\"stroke-width\", \"0.5px\")\n      .attr(\"fill\", \"none\")\n      .attr(\"x\", () => scale_x(dateRange[0]))\n      .attr(\"y\", function(d) {\n        let res = strip_leaf_map.get(d.data.name) - strip_rect_h / 2;\n        return res;\n      })\n      .attr(\"width\", () => scale_x(dateRange[1]) - scale_x(dateRange[0]))\n      .attr(\"height\", strip_rect_h);\n    //create rectangle movement\n    let moveLaneGroup = ganttPanelGroup\n      .append(\"g\")\n      .attr(\"id\", \"treeGantt-moveLaneGroup\");\n    moveLaneGroup\n      .selectAll(\".treeGantt-moveLane\")\n      .data(ganttData)\n      .enter()\n      .append(\"rect\")\n      .attr(\"class\", \"treeGantt-moveLane\")\n      .attr(\"x\", (d) => scale_x(d.data.start_date))\n      .attr(\"y\", function(d) {\n        let res = strip_leaf_map.get(d.name) - strip_rect_h / 2;\n        return res;\n      })\n      .attr(\"height\", strip_rect_h)\n      .attr(\"width\", (d) => {\n        let diffRange = moment\n          .range(d.data.start_date, d.data.end_date)\n          .diff(\"days\");\n        if (diffRange === 0) {\n          return (\n            scale_x(d.data.end_date.endOf(\"day\")) -\n            scale_x(d.data.start_date.startOf(\"day\"))\n          );\n        } else {\n          return scale_x(d.data.end_date) - scale_x(d.data.start_date);\n        }\n      })\n      .attr(\"fill\", (d) => {\n        let col = props.colorScale.byLocation.get(d.data.location_name);\n        if (col) {\n          return col;\n        } else {\n          if (d.location_color) {\n            return d.location_color;\n          } else {\n            return \"gray\";\n          }\n        }\n      })\n      .style(\"opacity\", 1)\n      .append(\"title\")\n      .text((d) => d.data.location_name);\n\n    // ========= DRAW ISOLATE COLLECTION DATE ==========\n    let isoCollectionGroup = ganttPanelGroup\n      .append(\"g\")\n      .attr(\"id\", \"treeGantt-isoCollectionGroup\");\n    isoCollectionGroup\n      .selectAll(\".treeGantt-isoCollection\")\n      .data(isolateData)\n      .enter()\n      .append(\"circle\")\n      .attr(\"class\", \"treeGantt-isoCollection\")\n      .attr(\"r\", 0.3 * strip_rect_h)\n      .attr(\"fill\", \"black\")\n      .attr(\"cx\", (d) => scale_x(d.isolate_colDate))\n      .style(\"opacity\", 1)\n      .attr(\"cy\", function(d) {\n        let res = strip_leaf_map.get(d.isolate_name);\n        return res;\n      });\n\n    if (props.selectedData && props.selectedData.length > 0) {\n      updateBySelectedData();\n    }\n\n    //zoom functionality\n    const zoomHandler = zoom()\n      .scaleExtent([0.1, 8])\n      .on(\"zoom\", () => {\n        zoomStateRef.current = currentEvent.transform;\n        select(\"#treeGantt_svgGroup\").attr(\"transform\", currentEvent.transform);\n      })\n      .filter(function() {\n        return !currentEvent.button && currentEvent.type !== \"wheel\";\n      });\n\n    container.select(\"#phylotreegantt-zoomIn\").on(\"click\", () => {\n      zoomHandler.scaleBy(svg.transition().duration(500), 1.5);\n    });\n\n    container.select(\"#phylotreegantt-zoomOut\").on(\"click\", () => {\n      zoomHandler.scaleBy(svg.transition().duration(500), 0.5);\n    });\n\n    svg.call(zoomHandler);\n  }\n\n  function updateBySelectedData() {\n    //update tree leaf label color\n    svg.selectAll(\".tree_nodeLabel\").attr(\"fill\", (d) => {\n      if (props.selectedData.indexOf(d.data.name) !== -1) {\n        return \"red\";\n      } else {\n        return \"black\";\n      }\n    });\n    //update strip opacity\n    svg.selectAll(\".treeGantt_strip\").style(\"opacity\", (d) => {\n      if (props.selectedData.indexOf(d.name) !== -1) {\n        return 1;\n      } else {\n        return 0.2;\n      }\n    });\n    //update movement opacity\n    svg.selectAll(\".treeGantt-moveLane\").style(\"opacity\", (d) => {\n      if (props.selectedData.indexOf(d.name) !== -1) {\n        return 1;\n      } else {\n        return 0.2;\n      }\n    });\n    //update collection date marker opacity\n    svg.selectAll(\".treeGantt-isoCollection\").style(\"opacity\", (d) => {\n      if (props.selectedData.indexOf(d.isolate_name) !== -1) {\n        return 1;\n      } else {\n        return 0.2;\n      }\n    });\n  }\n  function clearSelectedData() {\n    //update tree leaf label color\n    svg.selectAll(\".tree_nodeLabel\").attr(\"fill\", \"black\");\n    //update strip opacity\n    svg.selectAll(\".treeGantt_strip\").style(\"opacity\", 1);\n    //update movement opacity\n    svg.selectAll(\".treeGantt-moveLane\").style(\"opacity\", 1);\n    //update collection date marker opacity\n    svg.selectAll(\".treeGantt-isoCollection\").style(\"opacity\", 1);\n  }\n  function getLeafDistance(leaves) {\n    //leaves: map\n    //get list of sorted leaf's x position\n    const leaves_x = _.cloneDeep(Array.from(leaves.values()));\n    if (leaves_x && leaves_x.length > 0) {\n      let sorted_leaves_x = leaves_x.sort((a, b) => ascending(a, b));\n      let distances = [];\n      for (var i = 1; i < sorted_leaves_x.length; i++) {\n        let curr = sorted_leaves_x[i];\n        let prev = sorted_leaves_x[i - 1];\n        let dist = curr - prev;\n        distances.push(dist);\n      }\n      let avg_dist = mean(distances);\n      return avg_dist;\n    } else {\n      alert(\"Error in getting distance between tree leaf\");\n      return null;\n    }\n  }\n\n  function getMoveDataByIsolateName(isoName, isoData) {\n    let sourceName = isoData.get(isoName).isolate_sourceName;\n    let moveDataList = props.movementData.filter(\n      (d) => d.source_name === sourceName\n    );\n    return moveDataList;\n  }\n\n  //HANDLERS\n  const clearSelectedDataHandler = () => {\n    props.setSelectedData([]);\n  };\n\n  //UTILS\n  const getStripTitle = (title) => {\n    switch (title) {\n      case \"species\":\n        return \"Species\";\n      case \"sourceType\":\n        return \"Source type\";\n      case \"location\":\n        return \"Location\";\n      case \"profile1\":\n        return \"Profile 1\";\n      case \"profile2\":\n        return \"Profile 2\";\n      case \"profile3\":\n        return \"Profile 3\";\n      default:\n        return \"N/A\";\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <div id=\"phylotreeganttContainer\" ref={phylotreeganttContainerRef}>\n        <div id=\"phylotreegantt-no-drawing\">\n          <Empty\n            description={\"No chart: please click redraw button\"}\n            image={Empty.PRESENTED_IMAGE_SIMPLE}\n          />\n        </div>\n        <div id=\"phylotreegantt-zoomButton-container\">\n          <Button\n            id={\"phylotreegantt-zoomIn\"}\n            size={\"medium\"}\n            shape={\"circle\"}\n            icon={<ZoomInOutlined />}\n          ></Button>\n          <Button\n            id={\"phylotreegantt-zoomOut\"}\n            size={\"medium\"}\n            shape={\"circle\"}\n            icon={<ZoomOutOutlined />}\n          ></Button>\n          <Button\n            title={\"Clear selection\"}\n            shape={\"circle\"}\n            id={\"phylotreegantt-clearSelection\"}\n            size={\"medium\"}\n            icon={<ClearOutlined />}\n            onClick={clearSelectedDataHandler}\n          ></Button>\n        </div>\n        <div id=\"phylotreegantt-tooltip\"></div>\n        <svg id=\"phylotreegantt-svg\" ref={phylotreeganttSVGRef}></svg>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default PhyloTreeGanttChart;\n"]},"metadata":{},"sourceType":"module"}