{"ast":null,"code":"import * as constant from \"../utils/constants\";\nimport { initialState } from \"../reducers\";\n\nvar temporalbarSettingsReducer = function temporalbarSettingsReducer(prevState, action) {\n  switch (action.type) {\n    case constant.NEW_CHART_MODE_TEMP:\n      var newState_chartMode = Object.assign({}, prevState);\n\n      if (action.payload && action.payload !== prevState.chartMode) {\n        newState_chartMode.chartMode = action.payload;\n      }\n\n      return newState_chartMode;\n\n    case constant.NEW_SCALE_MODE_TEMP:\n      var newState_scaleMode = Object.assign({}, prevState);\n\n      if (action.payload && action.payload !== prevState.scaleMode) {\n        newState_scaleMode.scaleMode = action.payload;\n      }\n\n      return newState_scaleMode;\n\n    case constant.NEW_RESIZE_SIGNAL_TEMP:\n      var newState_resizeSignal = Object.assign({}, prevState);\n\n      if (action.payload !== prevState.isUserStartResize) {\n        newState_resizeSignal.isUserStartResize = action.payload;\n      }\n\n      return newState_resizeSignal;\n\n    case constant.NEW_ISANIMATION_PLAYING_TEMP:\n      var newState_isAnimPlayingSignal = Object.assign({}, prevState); //console.log(\"reducer\", action.payload, prevState.isAnimationPlaying);\n\n      if (action.payload !== prevState.isAnimationPlaying) {\n        newState_isAnimPlayingSignal.isAnimationPlaying = action.payload;\n      }\n\n      return newState_isAnimPlayingSignal;\n\n    default:\n      if (prevState) {\n        return prevState;\n      } else {\n        return initialState.temporalbarSettings;\n      }\n\n  }\n};\n\nexport default temporalbarSettingsReducer;","map":{"version":3,"sources":["/Volumes/DATA/BUDI/APP_DEV/haiviz-v04/src/reducers/reducer-temporalbarSettings.js"],"names":["constant","initialState","temporalbarSettingsReducer","prevState","action","type","NEW_CHART_MODE_TEMP","newState_chartMode","Object","assign","payload","chartMode","NEW_SCALE_MODE_TEMP","newState_scaleMode","scaleMode","NEW_RESIZE_SIGNAL_TEMP","newState_resizeSignal","isUserStartResize","NEW_ISANIMATION_PLAYING_TEMP","newState_isAnimPlayingSignal","isAnimationPlaying","temporalbarSettings"],"mappings":"AAAA,OAAO,KAAKA,QAAZ,MAA0B,oBAA1B;AACA,SAASC,YAAT,QAA6B,aAA7B;;AAEA,IAAMC,0BAA0B,GAAG,SAA7BA,0BAA6B,CAACC,SAAD,EAAYC,MAAZ,EAAuB;AACxD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKL,QAAQ,CAACM,mBAAd;AACE,UAAIC,kBAAkB,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBN,SAAlB,CAAzB;;AACA,UAAIC,MAAM,CAACM,OAAP,IAAkBN,MAAM,CAACM,OAAP,KAAmBP,SAAS,CAACQ,SAAnD,EAA8D;AAC5DJ,QAAAA,kBAAkB,CAACI,SAAnB,GAA+BP,MAAM,CAACM,OAAtC;AACD;;AACD,aAAOH,kBAAP;;AAEF,SAAKP,QAAQ,CAACY,mBAAd;AACE,UAAIC,kBAAkB,GAAGL,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBN,SAAlB,CAAzB;;AACA,UAAIC,MAAM,CAACM,OAAP,IAAkBN,MAAM,CAACM,OAAP,KAAmBP,SAAS,CAACW,SAAnD,EAA8D;AAC5DD,QAAAA,kBAAkB,CAACC,SAAnB,GAA+BV,MAAM,CAACM,OAAtC;AACD;;AACD,aAAOG,kBAAP;;AAEF,SAAKb,QAAQ,CAACe,sBAAd;AACE,UAAIC,qBAAqB,GAAGR,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBN,SAAlB,CAA5B;;AACA,UAAIC,MAAM,CAACM,OAAP,KAAmBP,SAAS,CAACc,iBAAjC,EAAoD;AAClDD,QAAAA,qBAAqB,CAACC,iBAAtB,GAA0Cb,MAAM,CAACM,OAAjD;AACD;;AACD,aAAOM,qBAAP;;AAEF,SAAKhB,QAAQ,CAACkB,4BAAd;AACE,UAAIC,4BAA4B,GAAGX,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBN,SAAlB,CAAnC,CADF,CAEE;;AACA,UAAIC,MAAM,CAACM,OAAP,KAAmBP,SAAS,CAACiB,kBAAjC,EAAqD;AACnDD,QAAAA,4BAA4B,CAACC,kBAA7B,GAAkDhB,MAAM,CAACM,OAAzD;AACD;;AACD,aAAOS,4BAAP;;AAEF;AACE,UAAIhB,SAAJ,EAAe;AACb,eAAOA,SAAP;AACD,OAFD,MAEO;AACL,eAAOF,YAAY,CAACoB,mBAApB;AACD;;AAnCL;AAqCD,CAtCD;;AAwCA,eAAenB,0BAAf","sourcesContent":["import * as constant from \"../utils/constants\";\nimport { initialState } from \"../reducers\";\n\nconst temporalbarSettingsReducer = (prevState, action) => {\n  switch (action.type) {\n    case constant.NEW_CHART_MODE_TEMP:\n      let newState_chartMode = Object.assign({}, prevState);\n      if (action.payload && action.payload !== prevState.chartMode) {\n        newState_chartMode.chartMode = action.payload;\n      }\n      return newState_chartMode;\n\n    case constant.NEW_SCALE_MODE_TEMP:\n      let newState_scaleMode = Object.assign({}, prevState);\n      if (action.payload && action.payload !== prevState.scaleMode) {\n        newState_scaleMode.scaleMode = action.payload;\n      }\n      return newState_scaleMode;\n\n    case constant.NEW_RESIZE_SIGNAL_TEMP:\n      let newState_resizeSignal = Object.assign({}, prevState);\n      if (action.payload !== prevState.isUserStartResize) {\n        newState_resizeSignal.isUserStartResize = action.payload;\n      }\n      return newState_resizeSignal;\n\n    case constant.NEW_ISANIMATION_PLAYING_TEMP:\n      let newState_isAnimPlayingSignal = Object.assign({}, prevState);\n      //console.log(\"reducer\", action.payload, prevState.isAnimationPlaying);\n      if (action.payload !== prevState.isAnimationPlaying) {\n        newState_isAnimPlayingSignal.isAnimationPlaying = action.payload;\n      }\n      return newState_isAnimPlayingSignal;\n\n    default:\n      if (prevState) {\n        return prevState;\n      } else {\n        return initialState.temporalbarSettings;\n      }\n  }\n};\n\nexport default temporalbarSettingsReducer;\n"]},"metadata":{},"sourceType":"module"}